//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RaskTrip.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RaskTrip_Entities : DbContext
    {
        public RaskTrip_Entities()
            : base("name=RaskTrip_Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccumulationType> AccumulationTypes { get; set; }
        public virtual DbSet<AddressType> AddressTypes { get; set; }
        public virtual DbSet<ApplicationError> ApplicationErrors { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<CompanyAddress> CompanyAddresses { get; set; }
        public virtual DbSet<CompanyProperty> CompanyProperties { get; set; }
        public virtual DbSet<CompanyType> CompanyTypes { get; set; }
        public virtual DbSet<ConfigParameter> ConfigParameters { get; set; }
        public virtual DbSet<ContactType> ContactTypes { get; set; }
        public virtual DbSet<DynamicLink> DynamicLinks { get; set; }
        public virtual DbSet<Equipment> Equipments { get; set; }
        public virtual DbSet<EquipmentCategory> EquipmentCategories { get; set; }
        public virtual DbSet<EquipmentOwnerType> EquipmentOwnerTypes { get; set; }
        public virtual DbSet<FrequencyType> FrequencyTypes { get; set; }
        public virtual DbSet<GeneralTime> GeneralTimes { get; set; }
        public virtual DbSet<Inventory> Inventories { get; set; }
        public virtual DbSet<InventoryTransaction> InventoryTransactions { get; set; }
        public virtual DbSet<InventoryType> InventoryTypes { get; set; }
        public virtual DbSet<InvoiceDeliveryType> InvoiceDeliveryTypes { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<LotSaltTime> LotSaltTimes { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<NotificationType> NotificationTypes { get; set; }
        public virtual DbSet<NotificationVendor> NotificationVendors { get; set; }
        public virtual DbSet<PaymentTerm> PaymentTerms { get; set; }
        public virtual DbSet<PrecipitationType> PrecipitationTypes { get; set; }
        public virtual DbSet<Property> Properties { get; set; }
        public virtual DbSet<PropertyAddress> PropertyAddresses { get; set; }
        public virtual DbSet<PropertyContact> PropertyContacts { get; set; }
        public virtual DbSet<PropertyContract> PropertyContracts { get; set; }
        public virtual DbSet<PropertyDocument> PropertyDocuments { get; set; }
        public virtual DbSet<PropertyFeeRate> PropertyFeeRates { get; set; }
        public virtual DbSet<PropertyFlatRate> PropertyFlatRates { get; set; }
        public virtual DbSet<PropertyInvoiceDelivery> PropertyInvoiceDeliveries { get; set; }
        public virtual DbSet<PropertyWorkType> PropertyWorkTypes { get; set; }
        public virtual DbSet<Proposal> Proposals { get; set; }
        public virtual DbSet<ProposalAddress> ProposalAddresses { get; set; }
        public virtual DbSet<ProposalAddressType> ProposalAddressTypes { get; set; }
        public virtual DbSet<ProposalContact> ProposalContacts { get; set; }
        public virtual DbSet<ProposalFeeRate> ProposalFeeRates { get; set; }
        public virtual DbSet<ProposalFlatRate> ProposalFlatRates { get; set; }
        public virtual DbSet<ProposalInvoiceDelivery> ProposalInvoiceDeliveries { get; set; }
        public virtual DbSet<ProposalStatu> ProposalStatus { get; set; }
        public virtual DbSet<ProposalWorkType> ProposalWorkTypes { get; set; }
        public virtual DbSet<PushTimeTicket> PushTimeTickets { get; set; }
        public virtual DbSet<PushTimeTicketProperty> PushTimeTicketProperties { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Season> Seasons { get; set; }
        public virtual DbSet<SidewalkTime> SidewalkTimes { get; set; }
        public virtual DbSet<SidewalkTimeEquipment> SidewalkTimeEquipments { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<SurfaceType> SurfaceTypes { get; set; }
        public virtual DbSet<Territory> Territories { get; set; }
        public virtual DbSet<TerritoryArea> TerritoryAreas { get; set; }
        public virtual DbSet<TimeTicket> TimeTickets { get; set; }
        public virtual DbSet<TimeTicketProperty> TimeTicketProperties { get; set; }
        public virtual DbSet<Trip> Trips { get; set; }
        public virtual DbSet<TripRoute> TripRoutes { get; set; }
        public virtual DbSet<TripStatu> TripStatus { get; set; }
        public virtual DbSet<Truck> Trucks { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<VendorEquipment> VendorEquipments { get; set; }
        public virtual DbSet<VendorFeeRate> VendorFeeRates { get; set; }
        public virtual DbSet<VendorForeman> VendorForemen { get; set; }
        public virtual DbSet<VendorProperty> VendorProperties { get; set; }
        public virtual DbSet<VendorPropertyRoute> VendorPropertyRoutes { get; set; }
        public virtual DbSet<VendorRoute> VendorRoutes { get; set; }
        public virtual DbSet<VendorStatu> VendorStatus { get; set; }
        public virtual DbSet<VendorWorker> VendorWorkers { get; set; }
        public virtual DbSet<VendorWorkType> VendorWorkTypes { get; set; }
        public virtual DbSet<WeatherEvent> WeatherEvents { get; set; }
        public virtual DbSet<WeatherEventPrecipitation> WeatherEventPrecipitations { get; set; }
        public virtual DbSet<WeatherEventSurface> WeatherEventSurfaces { get; set; }
        public virtual DbSet<WindType> WindTypes { get; set; }
        public virtual DbSet<WorkEvent> WorkEvents { get; set; }
        public virtual DbSet<WorkType> WorkTypes { get; set; }
        public virtual DbSet<C__TerritoryPushForeman> C__TerritoryPushForeman { get; set; }
        public virtual DbSet<vwForemanAlia> vwForemanAlias { get; set; }
    
        [DbFunction("RaskTrip_Entities", "fn_GetSeparateValues")]
        public virtual IQueryable<fn_GetSeparateValues_Result> fn_GetSeparateValues(string ids)
        {
            var idsParameter = ids != null ?
                new ObjectParameter("ids", ids) :
                new ObjectParameter("ids", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetSeparateValues_Result>("[RaskTrip_Entities].[fn_GetSeparateValues](@ids)", idsParameter);
        }
    
        public virtual ObjectResult<f_Company_GetActiveByCompanyTypeId_Result> f_Company_GetActiveByCompanyTypeId(Nullable<int> companyTypeId)
        {
            var companyTypeIdParameter = companyTypeId.HasValue ?
                new ObjectParameter("companyTypeId", companyTypeId) :
                new ObjectParameter("companyTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Company_GetActiveByCompanyTypeId_Result>("f_Company_GetActiveByCompanyTypeId", companyTypeIdParameter);
        }
    
        public virtual ObjectResult<f_Company_GetQbCompanyInfo_Result> f_Company_GetQbCompanyInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Company_GetQbCompanyInfo_Result>("f_Company_GetQbCompanyInfo");
        }
    
        public virtual ObjectResult<f_Company_Search_Result> f_Company_Search(Nullable<int> companyTypeId, string companyName, string contactName, Nullable<bool> includeActiveOnly)
        {
            var companyTypeIdParameter = companyTypeId.HasValue ?
                new ObjectParameter("companyTypeId", companyTypeId) :
                new ObjectParameter("companyTypeId", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("companyName", companyName) :
                new ObjectParameter("companyName", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("contactName", contactName) :
                new ObjectParameter("contactName", typeof(string));
    
            var includeActiveOnlyParameter = includeActiveOnly.HasValue ?
                new ObjectParameter("includeActiveOnly", includeActiveOnly) :
                new ObjectParameter("includeActiveOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Company_Search_Result>("f_Company_Search", companyTypeIdParameter, companyNameParameter, contactNameParameter, includeActiveOnlyParameter);
        }
    
        public virtual ObjectResult<f_CompanyAddress_GetByCompanyIdDisplay_Result> f_CompanyAddress_GetByCompanyIdDisplay(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_CompanyAddress_GetByCompanyIdDisplay_Result>("f_CompanyAddress_GetByCompanyIdDisplay", companyIdParameter);
        }
    
        public virtual ObjectResult<f_CompanyProperty_GetByCompanyIdDisplay_Result> f_CompanyProperty_GetByCompanyIdDisplay(Nullable<int> companyId, Nullable<bool> hideInactive)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var hideInactiveParameter = hideInactive.HasValue ?
                new ObjectParameter("hideInactive", hideInactive) :
                new ObjectParameter("hideInactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_CompanyProperty_GetByCompanyIdDisplay_Result>("f_CompanyProperty_GetByCompanyIdDisplay", companyIdParameter, hideInactiveParameter);
        }
    
        public virtual ObjectResult<f_CompanyProperty_GetByPropertyIdCompanyTypeId_Result> f_CompanyProperty_GetByPropertyIdCompanyTypeId(Nullable<int> propertyId, Nullable<int> companyTypeId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("propertyId", propertyId) :
                new ObjectParameter("propertyId", typeof(int));
    
            var companyTypeIdParameter = companyTypeId.HasValue ?
                new ObjectParameter("companyTypeId", companyTypeId) :
                new ObjectParameter("companyTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_CompanyProperty_GetByPropertyIdCompanyTypeId_Result>("f_CompanyProperty_GetByPropertyIdCompanyTypeId", propertyIdParameter, companyTypeIdParameter);
        }
    
        public virtual ObjectResult<f_CompanyProperty_GetByPropertyIdDisplay_Result> f_CompanyProperty_GetByPropertyIdDisplay(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("propertyId", propertyId) :
                new ObjectParameter("propertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_CompanyProperty_GetByPropertyIdDisplay_Result>("f_CompanyProperty_GetByPropertyIdDisplay", propertyIdParameter);
        }
    
        public virtual ObjectResult<f_Customer_PropertyReport_Result> f_Customer_PropertyReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Customer_PropertyReport_Result>("f_Customer_PropertyReport");
        }
    
        public virtual ObjectResult<f_CustomerContract_Report_Result> f_CustomerContract_Report()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_CustomerContract_Report_Result>("f_CustomerContract_Report");
        }
    
        public virtual ObjectResult<f_CustomerProperty_PushReport_Result> f_CustomerProperty_PushReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_CustomerProperty_PushReport_Result>("f_CustomerProperty_PushReport");
        }
    
        public virtual ObjectResult<f_CustomerProperty_SidewalkReport_Result> f_CustomerProperty_SidewalkReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_CustomerProperty_SidewalkReport_Result>("f_CustomerProperty_SidewalkReport");
        }
    
        public virtual ObjectResult<f_DynamicLink_GetActiveOnly_Result> f_DynamicLink_GetActiveOnly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_DynamicLink_GetActiveOnly_Result>("f_DynamicLink_GetActiveOnly");
        }
    
        public virtual ObjectResult<f_Equipment_GetActive_Result> f_Equipment_GetActive()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Equipment_GetActive_Result>("f_Equipment_GetActive");
        }
    
        public virtual ObjectResult<f_Equipment_GetByTerritoryIdDisplay_Result> f_Equipment_GetByTerritoryIdDisplay(Nullable<int> territoryId)
        {
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Equipment_GetByTerritoryIdDisplay_Result>("f_Equipment_GetByTerritoryIdDisplay", territoryIdParameter);
        }
    
        public virtual ObjectResult<f_Equipment_GetCurrentByWorkTypeId_Result> f_Equipment_GetCurrentByWorkTypeId(Nullable<int> workTypeId, Nullable<int> equipmentId)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("equipmentId", equipmentId) :
                new ObjectParameter("equipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Equipment_GetCurrentByWorkTypeId_Result>("f_Equipment_GetCurrentByWorkTypeId", workTypeIdParameter, equipmentIdParameter);
        }
    
        public virtual ObjectResult<f_Equipment_Search_Result> f_Equipment_Search(Nullable<int> workTypeId, Nullable<bool> hideInactive)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            var hideInactiveParameter = hideInactive.HasValue ?
                new ObjectParameter("hideInactive", hideInactive) :
                new ObjectParameter("hideInactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Equipment_Search_Result>("f_Equipment_Search", workTypeIdParameter, hideInactiveParameter);
        }
    
        public virtual ObjectResult<f_GeneralTime_Search_Result> f_GeneralTime_Search(Nullable<int> vendorId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_GeneralTime_Search_Result>("f_GeneralTime_Search", vendorIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<f_Inventory_GetAllDisplay_Result> f_Inventory_GetAllDisplay()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Inventory_GetAllDisplay_Result>("f_Inventory_GetAllDisplay");
        }
    
        public virtual ObjectResult<f_LotSaltTime_Entry_Result> f_LotSaltTime_Entry(Nullable<int> vendorId, Nullable<int> workTypeId, Nullable<int> seasonId, Nullable<int> weatherEventId, Nullable<System.DateTime> serviceDate, Nullable<int> vendorRouteId, Nullable<long> lotSaltTimeId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("seasonId", seasonId) :
                new ObjectParameter("seasonId", typeof(int));
    
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("weatherEventId", weatherEventId) :
                new ObjectParameter("weatherEventId", typeof(int));
    
            var serviceDateParameter = serviceDate.HasValue ?
                new ObjectParameter("serviceDate", serviceDate) :
                new ObjectParameter("serviceDate", typeof(System.DateTime));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("vendorRouteId", vendorRouteId) :
                new ObjectParameter("vendorRouteId", typeof(int));
    
            var lotSaltTimeIdParameter = lotSaltTimeId.HasValue ?
                new ObjectParameter("lotSaltTimeId", lotSaltTimeId) :
                new ObjectParameter("lotSaltTimeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_LotSaltTime_Entry_Result>("f_LotSaltTime_Entry", vendorIdParameter, workTypeIdParameter, seasonIdParameter, weatherEventIdParameter, serviceDateParameter, vendorRouteIdParameter, lotSaltTimeIdParameter);
        }
    
        public virtual ObjectResult<f_LotSaltTime_GetByWorkEventIdDisplay_Result> f_LotSaltTime_GetByWorkEventIdDisplay(Nullable<long> workEventId)
        {
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("workEventId", workEventId) :
                new ObjectParameter("workEventId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_LotSaltTime_GetByWorkEventIdDisplay_Result>("f_LotSaltTime_GetByWorkEventIdDisplay", workEventIdParameter);
        }
    
        public virtual ObjectResult<f_LotSaltTime_GetDetails_Result> f_LotSaltTime_GetDetails(Nullable<long> lotSaltTimeId)
        {
            var lotSaltTimeIdParameter = lotSaltTimeId.HasValue ?
                new ObjectParameter("lotSaltTimeId", lotSaltTimeId) :
                new ObjectParameter("lotSaltTimeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_LotSaltTime_GetDetails_Result>("f_LotSaltTime_GetDetails", lotSaltTimeIdParameter);
        }
    
        public virtual ObjectResult<f_LotSaltTime_Search_Result> f_LotSaltTime_Search(Nullable<int> vendorId, Nullable<int> workTypeId, Nullable<int> seasonId, Nullable<int> weatherEventId, Nullable<System.DateTime> serviceDate, Nullable<int> vendorRouteId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("seasonId", seasonId) :
                new ObjectParameter("seasonId", typeof(int));
    
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("weatherEventId", weatherEventId) :
                new ObjectParameter("weatherEventId", typeof(int));
    
            var serviceDateParameter = serviceDate.HasValue ?
                new ObjectParameter("serviceDate", serviceDate) :
                new ObjectParameter("serviceDate", typeof(System.DateTime));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("vendorRouteId", vendorRouteId) :
                new ObjectParameter("vendorRouteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_LotSaltTime_Search_Result>("f_LotSaltTime_Search", vendorIdParameter, workTypeIdParameter, seasonIdParameter, weatherEventIdParameter, serviceDateParameter, vendorRouteIdParameter);
        }
    
        public virtual ObjectResult<f_NotificationVendor_GetBySelection_Result> f_NotificationVendor_GetBySelection(string notificationList)
        {
            var notificationListParameter = notificationList != null ?
                new ObjectParameter("notificationList", notificationList) :
                new ObjectParameter("notificationList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_NotificationVendor_GetBySelection_Result>("f_NotificationVendor_GetBySelection", notificationListParameter);
        }
    
        public virtual ObjectResult<f_NotificationVendor_GetNotAcknowledgedByUsername_Result> f_NotificationVendor_GetNotAcknowledgedByUsername(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_NotificationVendor_GetNotAcknowledgedByUsername_Result>("f_NotificationVendor_GetNotAcknowledgedByUsername", usernameParameter);
        }
    
        public virtual ObjectResult<f_NotificationVendor_GetNotAcknowledgedByVendorId_Result> f_NotificationVendor_GetNotAcknowledgedByVendorId(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_NotificationVendor_GetNotAcknowledgedByVendorId_Result>("f_NotificationVendor_GetNotAcknowledgedByVendorId", vendorIdParameter);
        }
    
        public virtual ObjectResult<f_NotificationVendor_GetNotAcknowledgedSummary_Result> f_NotificationVendor_GetNotAcknowledgedSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_NotificationVendor_GetNotAcknowledgedSummary_Result>("f_NotificationVendor_GetNotAcknowledgedSummary");
        }
    
        public virtual ObjectResult<f_NotificationVendor_Search_Result> f_NotificationVendor_Search(Nullable<int> vendorId, string subject, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("subject", subject) :
                new ObjectParameter("subject", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_NotificationVendor_Search_Result>("f_NotificationVendor_Search", vendorIdParameter, subjectParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int f_NotificationVendor_UpdateNotificationSelection(string username, string notificationList)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var notificationListParameter = notificationList != null ?
                new ObjectParameter("notificationList", notificationList) :
                new ObjectParameter("notificationList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_NotificationVendor_UpdateNotificationSelection", usernameParameter, notificationListParameter);
        }
    
        public virtual ObjectResult<f_Property_AllFrequencies_Report_Result> f_Property_AllFrequencies_Report()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Property_AllFrequencies_Report_Result>("f_Property_AllFrequencies_Report");
        }
    
        public virtual ObjectResult<f_Property_ContractForPdf_Result> f_Property_ContractForPdf(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Property_ContractForPdf_Result>("f_Property_ContractForPdf", propertyIdParameter);
        }
    
        public virtual ObjectResult<f_Property_FeeRateReport_Result> f_Property_FeeRateReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Property_FeeRateReport_Result>("f_Property_FeeRateReport");
        }
    
        public virtual ObjectResult<f_Property_FlatRateSheetReport_Result> f_Property_FlatRateSheetReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Property_FlatRateSheetReport_Result>("f_Property_FlatRateSheetReport");
        }
    
        public virtual ObjectResult<f_Property_GetByPropertyContract_Result> f_Property_GetByPropertyContract()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Property_GetByPropertyContract_Result>("f_Property_GetByPropertyContract");
        }
    
        public virtual ObjectResult<f_Property_GetByTerritoryIdDisplay_Result> f_Property_GetByTerritoryIdDisplay(Nullable<int> territoryId)
        {
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Property_GetByTerritoryIdDisplay_Result>("f_Property_GetByTerritoryIdDisplay", territoryIdParameter);
        }
    
        public virtual ObjectResult<f_Property_GetCurrent_Result> f_Property_GetCurrent(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("propertyId", propertyId) :
                new ObjectParameter("propertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Property_GetCurrent_Result>("f_Property_GetCurrent", propertyIdParameter);
        }
    
        public virtual ObjectResult<f_Property_GetCurrentBillingAddressByPropertyId_Result> f_Property_GetCurrentBillingAddressByPropertyId(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("propertyId", propertyId) :
                new ObjectParameter("propertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Property_GetCurrentBillingAddressByPropertyId_Result>("f_Property_GetCurrentBillingAddressByPropertyId", propertyIdParameter);
        }
    
        public virtual ObjectResult<f_Property_GetForPushTime_Result> f_Property_GetForPushTime(Nullable<int> vendorId, Nullable<System.DateTime> serviceDate, Nullable<int> workTypeId, Nullable<int> vendorPropertyId, Nullable<int> territoryId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var serviceDateParameter = serviceDate.HasValue ?
                new ObjectParameter("serviceDate", serviceDate) :
                new ObjectParameter("serviceDate", typeof(System.DateTime));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("vendorPropertyId", vendorPropertyId) :
                new ObjectParameter("vendorPropertyId", typeof(int));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Property_GetForPushTime_Result>("f_Property_GetForPushTime", vendorIdParameter, serviceDateParameter, workTypeIdParameter, vendorPropertyIdParameter, territoryIdParameter);
        }
    
        public virtual ObjectResult<f_Property_GetForSiteInspectionReport_Result> f_Property_GetForSiteInspectionReport(Nullable<int> territoryId)
        {
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Property_GetForSiteInspectionReport_Result>("f_Property_GetForSiteInspectionReport", territoryIdParameter);
        }
    
        public virtual ObjectResult<f_Property_GetQbPropertyInfo_Result> f_Property_GetQbPropertyInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Property_GetQbPropertyInfo_Result>("f_Property_GetQbPropertyInfo");
        }
    
        public virtual ObjectResult<f_Property_GetVendorInfoByForemanId_Result> f_Property_GetVendorInfoByForemanId(Nullable<int> foremanId)
        {
            var foremanIdParameter = foremanId.HasValue ?
                new ObjectParameter("foremanId", foremanId) :
                new ObjectParameter("foremanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Property_GetVendorInfoByForemanId_Result>("f_Property_GetVendorInfoByForemanId", foremanIdParameter);
        }
    
        public virtual ObjectResult<f_Property_InvoiceMethods_Report_Result> f_Property_InvoiceMethods_Report()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Property_InvoiceMethods_Report_Result>("f_Property_InvoiceMethods_Report");
        }
    
        public virtual ObjectResult<f_Property_Push_Report_Result> f_Property_Push_Report()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Property_Push_Report_Result>("f_Property_Push_Report");
        }
    
        public virtual ObjectResult<f_Property_Report_Result> f_Property_Report()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Property_Report_Result>("f_Property_Report");
        }
    
        public virtual ObjectResult<f_Property_Search_Result> f_Property_Search(string propertyManager, string propertyName, string city, Nullable<int> stateId, Nullable<int> territoryId, Nullable<bool> hideInactiveContract)
        {
            var propertyManagerParameter = propertyManager != null ?
                new ObjectParameter("propertyManager", propertyManager) :
                new ObjectParameter("propertyManager", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("propertyName", propertyName) :
                new ObjectParameter("propertyName", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("stateId", stateId) :
                new ObjectParameter("stateId", typeof(int));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            var hideInactiveContractParameter = hideInactiveContract.HasValue ?
                new ObjectParameter("hideInactiveContract", hideInactiveContract) :
                new ObjectParameter("hideInactiveContract", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Property_Search_Result>("f_Property_Search", propertyManagerParameter, propertyNameParameter, cityParameter, stateIdParameter, territoryIdParameter, hideInactiveContractParameter);
        }
    
        public virtual ObjectResult<f_Property_Sidewalk_Report_Result> f_Property_Sidewalk_Report()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Property_Sidewalk_Report_Result>("f_Property_Sidewalk_Report");
        }
    
        public virtual ObjectResult<f_PropertyAddress_GetByPropertyIdDisplay_Result> f_PropertyAddress_GetByPropertyIdDisplay(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("propertyId", propertyId) :
                new ObjectParameter("propertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_PropertyAddress_GetByPropertyIdDisplay_Result>("f_PropertyAddress_GetByPropertyIdDisplay", propertyIdParameter);
        }
    
        public virtual ObjectResult<f_PropertyAddress_GetLocationByPropertyId_Result> f_PropertyAddress_GetLocationByPropertyId(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("propertyId", propertyId) :
                new ObjectParameter("propertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_PropertyAddress_GetLocationByPropertyId_Result>("f_PropertyAddress_GetLocationByPropertyId", propertyIdParameter);
        }
    
        public virtual ObjectResult<f_PropertyAddress_GetLocationByVendorPropertyId_Result> f_PropertyAddress_GetLocationByVendorPropertyId(Nullable<int> vendorPropertyId)
        {
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("vendorPropertyId", vendorPropertyId) :
                new ObjectParameter("vendorPropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_PropertyAddress_GetLocationByVendorPropertyId_Result>("f_PropertyAddress_GetLocationByVendorPropertyId", vendorPropertyIdParameter);
        }
    
        public virtual ObjectResult<f_PropertyContact_GetByPropertyIdDisplay_Result> f_PropertyContact_GetByPropertyIdDisplay(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("propertyId", propertyId) :
                new ObjectParameter("propertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_PropertyContact_GetByPropertyIdDisplay_Result>("f_PropertyContact_GetByPropertyIdDisplay", propertyIdParameter);
        }
    
        public virtual ObjectResult<f_PropertyContract_GetByPropertyIdDisplay_Result> f_PropertyContract_GetByPropertyIdDisplay(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("propertyId", propertyId) :
                new ObjectParameter("propertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_PropertyContract_GetByPropertyIdDisplay_Result>("f_PropertyContract_GetByPropertyIdDisplay", propertyIdParameter);
        }
    
        public virtual ObjectResult<f_PropertyContract_Report_Result> f_PropertyContract_Report(Nullable<int> propertyContractId)
        {
            var propertyContractIdParameter = propertyContractId.HasValue ?
                new ObjectParameter("propertyContractId", propertyContractId) :
                new ObjectParameter("propertyContractId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_PropertyContract_Report_Result>("f_PropertyContract_Report", propertyContractIdParameter);
        }
    
        public virtual ObjectResult<f_PropertyDocument_GetByPropertyIdDisplay_Result> f_PropertyDocument_GetByPropertyIdDisplay(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("propertyId", propertyId) :
                new ObjectParameter("propertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_PropertyDocument_GetByPropertyIdDisplay_Result>("f_PropertyDocument_GetByPropertyIdDisplay", propertyIdParameter);
        }
    
        public virtual ObjectResult<f_PropertyFeeRate_GetByPropertyContractIdDisplay_Result> f_PropertyFeeRate_GetByPropertyContractIdDisplay(Nullable<int> propertyContractId, Nullable<bool> hideInactive)
        {
            var propertyContractIdParameter = propertyContractId.HasValue ?
                new ObjectParameter("propertyContractId", propertyContractId) :
                new ObjectParameter("propertyContractId", typeof(int));
    
            var hideInactiveParameter = hideInactive.HasValue ?
                new ObjectParameter("hideInactive", hideInactive) :
                new ObjectParameter("hideInactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_PropertyFeeRate_GetByPropertyContractIdDisplay_Result>("f_PropertyFeeRate_GetByPropertyContractIdDisplay", propertyContractIdParameter, hideInactiveParameter);
        }
    
        public virtual ObjectResult<f_PropertyFeeRate_Report_Result> f_PropertyFeeRate_Report(Nullable<int> propertyContractId)
        {
            var propertyContractIdParameter = propertyContractId.HasValue ?
                new ObjectParameter("propertyContractId", propertyContractId) :
                new ObjectParameter("propertyContractId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_PropertyFeeRate_Report_Result>("f_PropertyFeeRate_Report", propertyContractIdParameter);
        }
    
        public virtual ObjectResult<f_PropertyFlatRate_GetByPropertyContractIdDisplay_Result> f_PropertyFlatRate_GetByPropertyContractIdDisplay(Nullable<int> propertyContractId, Nullable<bool> hideInactive)
        {
            var propertyContractIdParameter = propertyContractId.HasValue ?
                new ObjectParameter("propertyContractId", propertyContractId) :
                new ObjectParameter("propertyContractId", typeof(int));
    
            var hideInactiveParameter = hideInactive.HasValue ?
                new ObjectParameter("hideInactive", hideInactive) :
                new ObjectParameter("hideInactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_PropertyFlatRate_GetByPropertyContractIdDisplay_Result>("f_PropertyFlatRate_GetByPropertyContractIdDisplay", propertyContractIdParameter, hideInactiveParameter);
        }
    
        public virtual ObjectResult<f_PropertyFlatRate_GetCurrentByWorkTypeIdPropertyIdServiceDate_Result> f_PropertyFlatRate_GetCurrentByWorkTypeIdPropertyIdServiceDate(Nullable<int> workTypeId, Nullable<int> vendorPropertyId, Nullable<System.DateTime> serviceDate, Nullable<int> propertyFlatRateId)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("vendorPropertyId", vendorPropertyId) :
                new ObjectParameter("vendorPropertyId", typeof(int));
    
            var serviceDateParameter = serviceDate.HasValue ?
                new ObjectParameter("serviceDate", serviceDate) :
                new ObjectParameter("serviceDate", typeof(System.DateTime));
    
            var propertyFlatRateIdParameter = propertyFlatRateId.HasValue ?
                new ObjectParameter("propertyFlatRateId", propertyFlatRateId) :
                new ObjectParameter("propertyFlatRateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_PropertyFlatRate_GetCurrentByWorkTypeIdPropertyIdServiceDate_Result>("f_PropertyFlatRate_GetCurrentByWorkTypeIdPropertyIdServiceDate", workTypeIdParameter, vendorPropertyIdParameter, serviceDateParameter, propertyFlatRateIdParameter);
        }
    
        public virtual ObjectResult<string> f_PropertyFlatRate_GetDescriptionByWorkTypeId(Nullable<int> workTypeId)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("f_PropertyFlatRate_GetDescriptionByWorkTypeId", workTypeIdParameter);
        }
    
        public virtual ObjectResult<f_PropertyWorkType_GetByPropertyIdDisplay_Result> f_PropertyWorkType_GetByPropertyIdDisplay(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("propertyId", propertyId) :
                new ObjectParameter("propertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_PropertyWorkType_GetByPropertyIdDisplay_Result>("f_PropertyWorkType_GetByPropertyIdDisplay", propertyIdParameter);
        }
    
        public virtual ObjectResult<f_Proposal_Search_Result> f_Proposal_Search(string propertyManager, string propertyName, string city, Nullable<int> stateId, Nullable<int> territoryId, Nullable<int> proposalStatusId)
        {
            var propertyManagerParameter = propertyManager != null ?
                new ObjectParameter("propertyManager", propertyManager) :
                new ObjectParameter("propertyManager", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("propertyName", propertyName) :
                new ObjectParameter("propertyName", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("stateId", stateId) :
                new ObjectParameter("stateId", typeof(int));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            var proposalStatusIdParameter = proposalStatusId.HasValue ?
                new ObjectParameter("proposalStatusId", proposalStatusId) :
                new ObjectParameter("proposalStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Proposal_Search_Result>("f_Proposal_Search", propertyManagerParameter, propertyNameParameter, cityParameter, stateIdParameter, territoryIdParameter, proposalStatusIdParameter);
        }
    
        public virtual ObjectResult<f_PushTimeTicket_Search_Result> f_PushTimeTicket_Search(Nullable<int> vendorId, Nullable<int> workTypeId, Nullable<int> weatherEventId, Nullable<System.DateTime> serviceDate, Nullable<int> timeTicketId, Nullable<int> territoryId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("weatherEventId", weatherEventId) :
                new ObjectParameter("weatherEventId", typeof(int));
    
            var serviceDateParameter = serviceDate.HasValue ?
                new ObjectParameter("serviceDate", serviceDate) :
                new ObjectParameter("serviceDate", typeof(System.DateTime));
    
            var timeTicketIdParameter = timeTicketId.HasValue ?
                new ObjectParameter("timeTicketId", timeTicketId) :
                new ObjectParameter("timeTicketId", typeof(int));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_PushTimeTicket_Search_Result>("f_PushTimeTicket_Search", vendorIdParameter, workTypeIdParameter, weatherEventIdParameter, serviceDateParameter, timeTicketIdParameter, territoryIdParameter);
        }
    
        public virtual ObjectResult<f_PushTimeTicketProperty_Entry_Result> f_PushTimeTicketProperty_Entry(Nullable<int> timeTicketId, Nullable<long> pushTimeTicketId)
        {
            var timeTicketIdParameter = timeTicketId.HasValue ?
                new ObjectParameter("timeTicketId", timeTicketId) :
                new ObjectParameter("timeTicketId", typeof(int));
    
            var pushTimeTicketIdParameter = pushTimeTicketId.HasValue ?
                new ObjectParameter("pushTimeTicketId", pushTimeTicketId) :
                new ObjectParameter("pushTimeTicketId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_PushTimeTicketProperty_Entry_Result>("f_PushTimeTicketProperty_Entry", timeTicketIdParameter, pushTimeTicketIdParameter);
        }
    
        public virtual ObjectResult<f_Role_GetByUsername_Result> f_Role_GetByUsername(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Role_GetByUsername_Result>("f_Role_GetByUsername", usernameParameter);
        }
    
        public virtual ObjectResult<f_SidewalkTime_GetByWorkEventIdDisplay_Result> f_SidewalkTime_GetByWorkEventIdDisplay(Nullable<long> workEventId)
        {
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("workEventId", workEventId) :
                new ObjectParameter("workEventId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_SidewalkTime_GetByWorkEventIdDisplay_Result>("f_SidewalkTime_GetByWorkEventIdDisplay", workEventIdParameter);
        }
    
        public virtual ObjectResult<f_SidewalkTime_GetDetails_Result> f_SidewalkTime_GetDetails(Nullable<long> sidewalkTimeId)
        {
            var sidewalkTimeIdParameter = sidewalkTimeId.HasValue ?
                new ObjectParameter("sidewalkTimeId", sidewalkTimeId) :
                new ObjectParameter("sidewalkTimeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_SidewalkTime_GetDetails_Result>("f_SidewalkTime_GetDetails", sidewalkTimeIdParameter);
        }
    
        public virtual ObjectResult<f_SidewalkTime_GetForVendors_Result> f_SidewalkTime_GetForVendors(Nullable<int> vendorId, Nullable<int> vendorRouteId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_SidewalkTime_GetForVendors_Result>("f_SidewalkTime_GetForVendors", vendorIdParameter, vendorRouteIdParameter);
        }
    
        public virtual ObjectResult<f_SidewalkTime_Search_Result> f_SidewalkTime_Search(Nullable<int> vendorId, Nullable<int> workTypeId, Nullable<int> seasonId, Nullable<int> weatherEventId, Nullable<System.DateTime> serviceDate, Nullable<int> vendorRouteId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("seasonId", seasonId) :
                new ObjectParameter("seasonId", typeof(int));
    
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("weatherEventId", weatherEventId) :
                new ObjectParameter("weatherEventId", typeof(int));
    
            var serviceDateParameter = serviceDate.HasValue ?
                new ObjectParameter("serviceDate", serviceDate) :
                new ObjectParameter("serviceDate", typeof(System.DateTime));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("vendorRouteId", vendorRouteId) :
                new ObjectParameter("vendorRouteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_SidewalkTime_Search_Result>("f_SidewalkTime_Search", vendorIdParameter, workTypeIdParameter, seasonIdParameter, weatherEventIdParameter, serviceDateParameter, vendorRouteIdParameter);
        }
    
        public virtual ObjectResult<f_Territory_GetForProperty_Result> f_Territory_GetForProperty(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("propertyId", propertyId) :
                new ObjectParameter("propertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Territory_GetForProperty_Result>("f_Territory_GetForProperty", propertyIdParameter);
        }
    
        public virtual ObjectResult<f_Territory_GetForVendor_Result> f_Territory_GetForVendor(Nullable<int> vendorId, Nullable<int> territoryId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Territory_GetForVendor_Result>("f_Territory_GetForVendor", vendorIdParameter, territoryIdParameter);
        }
    
        public virtual ObjectResult<f_Territory_GetOnlyForVendor_Result> f_Territory_GetOnlyForVendor(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Territory_GetOnlyForVendor_Result>("f_Territory_GetOnlyForVendor", vendorIdParameter);
        }
    
        public virtual ObjectResult<f_Territory_Search_Result> f_Territory_Search(string territoryNameSearch, string zipCodeSearch)
        {
            var territoryNameSearchParameter = territoryNameSearch != null ?
                new ObjectParameter("territoryNameSearch", territoryNameSearch) :
                new ObjectParameter("territoryNameSearch", typeof(string));
    
            var zipCodeSearchParameter = zipCodeSearch != null ?
                new ObjectParameter("zipCodeSearch", zipCodeSearch) :
                new ObjectParameter("zipCodeSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Territory_Search_Result>("f_Territory_Search", territoryNameSearchParameter, zipCodeSearchParameter);
        }
    
        public virtual int f_Territory_UpdateForemanVendorProperty(Nullable<int> territoryId, Nullable<int> newPushForemanId, Nullable<System.DateTime> effectiveDate, string userName)
        {
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            var newPushForemanIdParameter = newPushForemanId.HasValue ?
                new ObjectParameter("NewPushForemanId", newPushForemanId) :
                new ObjectParameter("NewPushForemanId", typeof(int));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_Territory_UpdateForemanVendorProperty", territoryIdParameter, newPushForemanIdParameter, effectiveDateParameter, userNameParameter);
        }
    
        public virtual ObjectResult<f_TerritoryArea_GetByTerritoryIdDisplay_Result> f_TerritoryArea_GetByTerritoryIdDisplay(Nullable<int> territoryId)
        {
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_TerritoryArea_GetByTerritoryIdDisplay_Result>("f_TerritoryArea_GetByTerritoryIdDisplay", territoryIdParameter);
        }
    
        public virtual ObjectResult<f_TimeTicket_GetByVendorIdSeasonIdTerritoryId_Result> f_TimeTicket_GetByVendorIdSeasonIdTerritoryId(Nullable<int> vendorId, Nullable<int> seasonId, Nullable<int> territoryId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("seasonId", seasonId) :
                new ObjectParameter("seasonId", typeof(int));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_TimeTicket_GetByVendorIdSeasonIdTerritoryId_Result>("f_TimeTicket_GetByVendorIdSeasonIdTerritoryId", vendorIdParameter, seasonIdParameter, territoryIdParameter);
        }
    
        public virtual ObjectResult<f_TimeTicket_Report_Result> f_TimeTicket_Report(Nullable<int> seasonId, Nullable<int> vendorId, Nullable<int> vendorRouteId, Nullable<int> workTypeId)
        {
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("seasonId", seasonId) :
                new ObjectParameter("seasonId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("vendorRouteId", vendorRouteId) :
                new ObjectParameter("vendorRouteId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_TimeTicket_Report_Result>("f_TimeTicket_Report", seasonIdParameter, vendorIdParameter, vendorRouteIdParameter, workTypeIdParameter);
        }
    
        public virtual ObjectResult<f_TimeTicket_Search_Result> f_TimeTicket_Search(Nullable<int> seasonId, Nullable<int> vendorId, Nullable<int> vendorRouteId)
        {
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("seasonId", seasonId) :
                new ObjectParameter("seasonId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("vendorRouteId", vendorRouteId) :
                new ObjectParameter("vendorRouteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_TimeTicket_Search_Result>("f_TimeTicket_Search", seasonIdParameter, vendorIdParameter, vendorRouteIdParameter);
        }
    
        public virtual ObjectResult<f_Users_Search_Result> f_Users_Search(string usernameSearch, string emailSearch, string businessNameSearch, Nullable<bool> showInActives)
        {
            var usernameSearchParameter = usernameSearch != null ?
                new ObjectParameter("usernameSearch", usernameSearch) :
                new ObjectParameter("usernameSearch", typeof(string));
    
            var emailSearchParameter = emailSearch != null ?
                new ObjectParameter("emailSearch", emailSearch) :
                new ObjectParameter("emailSearch", typeof(string));
    
            var businessNameSearchParameter = businessNameSearch != null ?
                new ObjectParameter("businessNameSearch", businessNameSearch) :
                new ObjectParameter("businessNameSearch", typeof(string));
    
            var showInActivesParameter = showInActives.HasValue ?
                new ObjectParameter("showInActives", showInActives) :
                new ObjectParameter("showInActives", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Users_Search_Result>("f_Users_Search", usernameSearchParameter, emailSearchParameter, businessNameSearchParameter, showInActivesParameter);
        }
    
        public virtual int f_Utility_RethrowError()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_Utility_RethrowError");
        }
    
        public virtual ObjectResult<f_Vendor_EquipmentRatesReport_Result> f_Vendor_EquipmentRatesReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_EquipmentRatesReport_Result>("f_Vendor_EquipmentRatesReport");
        }
    
        public virtual ObjectResult<f_Vendor_FeeRateReport_Result> f_Vendor_FeeRateReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_FeeRateReport_Result>("f_Vendor_FeeRateReport");
        }
    
        public virtual ObjectResult<f_Vendor_GetActive_Result> f_Vendor_GetActive(Nullable<int> currentVendorId, Nullable<int> workTypeId)
        {
            var currentVendorIdParameter = currentVendorId.HasValue ?
                new ObjectParameter("currentVendorId", currentVendorId) :
                new ObjectParameter("currentVendorId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_GetActive_Result>("f_Vendor_GetActive", currentVendorIdParameter, workTypeIdParameter);
        }
    
        public virtual ObjectResult<f_Vendor_GetAssignedByTerritoryId_Result> f_Vendor_GetAssignedByTerritoryId(Nullable<int> territoryId, Nullable<int> currentVendorId)
        {
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            var currentVendorIdParameter = currentVendorId.HasValue ?
                new ObjectParameter("currentVendorId", currentVendorId) :
                new ObjectParameter("currentVendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_GetAssignedByTerritoryId_Result>("f_Vendor_GetAssignedByTerritoryId", territoryIdParameter, currentVendorIdParameter);
        }
    
        public virtual ObjectResult<f_Vendor_GetAssignedByVendorId_Result> f_Vendor_GetAssignedByVendorId(Nullable<int> vendorId, Nullable<int> currentVendorId, Nullable<bool> isActive)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var currentVendorIdParameter = currentVendorId.HasValue ?
                new ObjectParameter("currentVendorId", currentVendorId) :
                new ObjectParameter("currentVendorId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_GetAssignedByVendorId_Result>("f_Vendor_GetAssignedByVendorId", vendorIdParameter, currentVendorIdParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<f_Vendor_GetAssignedByVendorIdTerritoryId_Result> f_Vendor_GetAssignedByVendorIdTerritoryId(Nullable<int> vendorId, string aBFilter, Nullable<int> territoryId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var aBFilterParameter = aBFilter != null ?
                new ObjectParameter("ABFilter", aBFilter) :
                new ObjectParameter("ABFilter", typeof(string));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_GetAssignedByVendorIdTerritoryId_Result>("f_Vendor_GetAssignedByVendorIdTerritoryId", vendorIdParameter, aBFilterParameter, territoryIdParameter);
        }
    
        public virtual ObjectResult<f_Vendor_GetAssignedEquipmentCountsByVendorId_Result> f_Vendor_GetAssignedEquipmentCountsByVendorId(Nullable<int> vendorId, string aBFilter, Nullable<int> territoryId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var aBFilterParameter = aBFilter != null ?
                new ObjectParameter("ABFilter", aBFilter) :
                new ObjectParameter("ABFilter", typeof(string));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_GetAssignedEquipmentCountsByVendorId_Result>("f_Vendor_GetAssignedEquipmentCountsByVendorId", vendorIdParameter, aBFilterParameter, territoryIdParameter);
        }
    
        public virtual ObjectResult<f_Vendor_GetAvailablePushForeman_Result> f_Vendor_GetAvailablePushForeman(Nullable<bool> includeInactive)
        {
            var includeInactiveParameter = includeInactive.HasValue ?
                new ObjectParameter("includeInactive", includeInactive) :
                new ObjectParameter("includeInactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_GetAvailablePushForeman_Result>("f_Vendor_GetAvailablePushForeman", includeInactiveParameter);
        }
    
        public virtual ObjectResult<f_Vendor_GetByPropertyIdWorkTypeId_Result> f_Vendor_GetByPropertyIdWorkTypeId(Nullable<int> propertyId, Nullable<int> workTypeId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("propertyId", propertyId) :
                new ObjectParameter("propertyId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_GetByPropertyIdWorkTypeId_Result>("f_Vendor_GetByPropertyIdWorkTypeId", propertyIdParameter, workTypeIdParameter);
        }
    
        public virtual ObjectResult<f_Vendor_GetByPropertyIdWorkTypeIdDate_Result> f_Vendor_GetByPropertyIdWorkTypeIdDate(Nullable<int> propertyId, Nullable<int> workTypeId, Nullable<System.DateTime> date)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("propertyId", propertyId) :
                new ObjectParameter("propertyId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_GetByPropertyIdWorkTypeIdDate_Result>("f_Vendor_GetByPropertyIdWorkTypeIdDate", propertyIdParameter, workTypeIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<f_Vendor_GetCurrentAssignedByVendorId_Result> f_Vendor_GetCurrentAssignedByVendorId(Nullable<int> vendorId, Nullable<int> currentVendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var currentVendorIdParameter = currentVendorId.HasValue ?
                new ObjectParameter("currentVendorId", currentVendorId) :
                new ObjectParameter("currentVendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_GetCurrentAssignedByVendorId_Result>("f_Vendor_GetCurrentAssignedByVendorId", vendorIdParameter, currentVendorIdParameter);
        }
    
        public virtual ObjectResult<f_Vendor_GetCurrentForemanByWorkTypeId_Result> f_Vendor_GetCurrentForemanByWorkTypeId(Nullable<int> workTypeId, Nullable<int> vendorId)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_GetCurrentForemanByWorkTypeId_Result>("f_Vendor_GetCurrentForemanByWorkTypeId", workTypeIdParameter, vendorIdParameter);
        }
    
        public virtual ObjectResult<f_Vendor_GetForeman_Result> f_Vendor_GetForeman(Nullable<bool> includeInactive)
        {
            var includeInactiveParameter = includeInactive.HasValue ?
                new ObjectParameter("includeInactive", includeInactive) :
                new ObjectParameter("includeInactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_GetForeman_Result>("f_Vendor_GetForeman", includeInactiveParameter);
        }
    
        public virtual ObjectResult<f_Vendor_GetForemanAvailable_Result> f_Vendor_GetForemanAvailable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_GetForemanAvailable_Result>("f_Vendor_GetForemanAvailable");
        }
    
        public virtual ObjectResult<f_Vendor_GetForemanList_Result> f_Vendor_GetForemanList(Nullable<bool> includeInactive)
        {
            var includeInactiveParameter = includeInactive.HasValue ?
                new ObjectParameter("includeInactive", includeInactive) :
                new ObjectParameter("includeInactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_GetForemanList_Result>("f_Vendor_GetForemanList", includeInactiveParameter);
        }
    
        public virtual ObjectResult<f_Vendor_GetForPush_Result> f_Vendor_GetForPush(Nullable<int> workTypeId, Nullable<int> foremanId, Nullable<int> vendorId, Nullable<int> territoryId)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            var foremanIdParameter = foremanId.HasValue ?
                new ObjectParameter("foremanId", foremanId) :
                new ObjectParameter("foremanId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_GetForPush_Result>("f_Vendor_GetForPush", workTypeIdParameter, foremanIdParameter, vendorIdParameter, territoryIdParameter);
        }
    
        public virtual ObjectResult<f_Vendor_GetQbVendorInfo_Result> f_Vendor_GetQbVendorInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_GetQbVendorInfo_Result>("f_Vendor_GetQbVendorInfo");
        }
    
        public virtual ObjectResult<f_Vendor_LocalOnlyReport_Result> f_Vendor_LocalOnlyReport(Nullable<int> loggedInForemanId)
        {
            var loggedInForemanIdParameter = loggedInForemanId.HasValue ?
                new ObjectParameter("LoggedInForemanId", loggedInForemanId) :
                new ObjectParameter("LoggedInForemanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_LocalOnlyReport_Result>("f_Vendor_LocalOnlyReport", loggedInForemanIdParameter);
        }
    
        public virtual ObjectResult<f_Vendor_OutlyingOnlyReport_Result> f_Vendor_OutlyingOnlyReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_OutlyingOnlyReport_Result>("f_Vendor_OutlyingOnlyReport");
        }
    
        public virtual ObjectResult<f_Vendor_Report_Result> f_Vendor_Report()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_Report_Result>("f_Vendor_Report");
        }
    
        public virtual int f_Vendor_ResetSeasonalFlags()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_Vendor_ResetSeasonalFlags");
        }
    
        public virtual ObjectResult<f_Vendor_Search_Result> f_Vendor_Search(string name, string city, Nullable<int> stateId, string zipCode, Nullable<int> territoryId, Nullable<bool> onlyForeman, Nullable<bool> onlyOutlying, Nullable<bool> includeActive, Nullable<bool> includeInactive, Nullable<bool> localOnly, Nullable<bool> includeObsolete)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("stateId", stateId) :
                new ObjectParameter("stateId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("zipCode", zipCode) :
                new ObjectParameter("zipCode", typeof(string));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            var onlyForemanParameter = onlyForeman.HasValue ?
                new ObjectParameter("onlyForeman", onlyForeman) :
                new ObjectParameter("onlyForeman", typeof(bool));
    
            var onlyOutlyingParameter = onlyOutlying.HasValue ?
                new ObjectParameter("onlyOutlying", onlyOutlying) :
                new ObjectParameter("onlyOutlying", typeof(bool));
    
            var includeActiveParameter = includeActive.HasValue ?
                new ObjectParameter("includeActive", includeActive) :
                new ObjectParameter("includeActive", typeof(bool));
    
            var includeInactiveParameter = includeInactive.HasValue ?
                new ObjectParameter("includeInactive", includeInactive) :
                new ObjectParameter("includeInactive", typeof(bool));
    
            var localOnlyParameter = localOnly.HasValue ?
                new ObjectParameter("localOnly", localOnly) :
                new ObjectParameter("localOnly", typeof(bool));
    
            var includeObsoleteParameter = includeObsolete.HasValue ?
                new ObjectParameter("includeObsolete", includeObsolete) :
                new ObjectParameter("includeObsolete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_Vendor_Search_Result>("f_Vendor_Search", nameParameter, cityParameter, stateIdParameter, zipCodeParameter, territoryIdParameter, onlyForemanParameter, onlyOutlyingParameter, includeActiveParameter, includeInactiveParameter, localOnlyParameter, includeObsoleteParameter);
        }
    
        public virtual ObjectResult<f_VendorEquipment_GetByTerritoryIdDisplay_Result> f_VendorEquipment_GetByTerritoryIdDisplay(Nullable<int> territoryId, Nullable<System.DateTime> date)
        {
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorEquipment_GetByTerritoryIdDisplay_Result>("f_VendorEquipment_GetByTerritoryIdDisplay", territoryIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<f_VendorEquipment_GetByVendorIdDisplay_Result> f_VendorEquipment_GetByVendorIdDisplay(Nullable<int> vendorId, Nullable<System.DateTime> date, Nullable<int> territoryId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorEquipment_GetByVendorIdDisplay_Result>("f_VendorEquipment_GetByVendorIdDisplay", vendorIdParameter, dateParameter, territoryIdParameter);
        }
    
        public virtual ObjectResult<f_VendorFeeRate_GetByVendorIdDisplay_Result> f_VendorFeeRate_GetByVendorIdDisplay(Nullable<int> vendorId, Nullable<bool> hideInactive)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var hideInactiveParameter = hideInactive.HasValue ?
                new ObjectParameter("hideInactive", hideInactive) :
                new ObjectParameter("hideInactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorFeeRate_GetByVendorIdDisplay_Result>("f_VendorFeeRate_GetByVendorIdDisplay", vendorIdParameter, hideInactiveParameter);
        }
    
        public virtual ObjectResult<f_VendorForeman_GetByVendorIdDisplay_Result> f_VendorForeman_GetByVendorIdDisplay(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorForeman_GetByVendorIdDisplay_Result>("f_VendorForeman_GetByVendorIdDisplay", vendorIdParameter);
        }
    
        public virtual ObjectResult<f_VendorProperty_DriverRouteReport_Result> f_VendorProperty_DriverRouteReport(Nullable<int> vendorId, Nullable<int> vendorRouteId, Nullable<int> workTypeId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("vendorRouteId", vendorRouteId) :
                new ObjectParameter("vendorRouteId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorProperty_DriverRouteReport_Result>("f_VendorProperty_DriverRouteReport", vendorIdParameter, vendorRouteIdParameter, workTypeIdParameter);
        }
    
        public virtual ObjectResult<f_VendorProperty_GetActiveProperty_Result> f_VendorProperty_GetActiveProperty(Nullable<int> vendorId, Nullable<int> vendorRouteId, Nullable<int> territoryId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("vendorRouteId", vendorRouteId) :
                new ObjectParameter("vendorRouteId", typeof(int));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorProperty_GetActiveProperty_Result>("f_VendorProperty_GetActiveProperty", vendorIdParameter, vendorRouteIdParameter, territoryIdParameter);
        }
    
        public virtual ObjectResult<f_VendorProperty_GetActivePropertyList_Result> f_VendorProperty_GetActivePropertyList(Nullable<int> vendorId, Nullable<int> vendorRouteId, Nullable<int> territoryId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("vendorRouteId", vendorRouteId) :
                new ObjectParameter("vendorRouteId", typeof(int));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorProperty_GetActivePropertyList_Result>("f_VendorProperty_GetActivePropertyList", vendorIdParameter, vendorRouteIdParameter, territoryIdParameter);
        }
    
        public virtual ObjectResult<f_VendorProperty_GetByPropertyIdDisplay_Result> f_VendorProperty_GetByPropertyIdDisplay(Nullable<int> propertyId, Nullable<bool> hideInactive)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("propertyId", propertyId) :
                new ObjectParameter("propertyId", typeof(int));
    
            var hideInactiveParameter = hideInactive.HasValue ?
                new ObjectParameter("hideInactive", hideInactive) :
                new ObjectParameter("hideInactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorProperty_GetByPropertyIdDisplay_Result>("f_VendorProperty_GetByPropertyIdDisplay", propertyIdParameter, hideInactiveParameter);
        }
    
        public virtual ObjectResult<f_VendorProperty_GetCurrentByVendorRouteId_Result> f_VendorProperty_GetCurrentByVendorRouteId(Nullable<int> vendorRouteId, Nullable<int> vendorPropertyId)
        {
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("vendorRouteId", vendorRouteId) :
                new ObjectParameter("vendorRouteId", typeof(int));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("vendorPropertyId", vendorPropertyId) :
                new ObjectParameter("vendorPropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorProperty_GetCurrentByVendorRouteId_Result>("f_VendorProperty_GetCurrentByVendorRouteId", vendorRouteIdParameter, vendorPropertyIdParameter);
        }
    
        public virtual ObjectResult<f_VendorProperty_RestrictedServiceReport_Result> f_VendorProperty_RestrictedServiceReport(Nullable<int> vendorId, Nullable<int> workTypeId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorProperty_RestrictedServiceReport_Result>("f_VendorProperty_RestrictedServiceReport", vendorIdParameter, workTypeIdParameter);
        }
    
        public virtual ObjectResult<f_VendorPropertyRoute_GetAssignedByVendorId_Result> f_VendorPropertyRoute_GetAssignedByVendorId(Nullable<int> vendorId, Nullable<int> vendorRouteId, Nullable<System.DateTime> date)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("vendorRouteId", vendorRouteId) :
                new ObjectParameter("vendorRouteId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorPropertyRoute_GetAssignedByVendorId_Result>("f_VendorPropertyRoute_GetAssignedByVendorId", vendorIdParameter, vendorRouteIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<f_VendorPropertyRoute_GetByVendorRouteIdDisplay_Result> f_VendorPropertyRoute_GetByVendorRouteIdDisplay(Nullable<int> vendorRouteId)
        {
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("vendorRouteId", vendorRouteId) :
                new ObjectParameter("vendorRouteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorPropertyRoute_GetByVendorRouteIdDisplay_Result>("f_VendorPropertyRoute_GetByVendorRouteIdDisplay", vendorRouteIdParameter);
        }
    
        public virtual ObjectResult<f_VendorPropertyRoute_GetForGenerateTicket_Result> f_VendorPropertyRoute_GetForGenerateTicket(Nullable<int> vendorId, Nullable<int> vendorRouteId, Nullable<int> workTypeId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("vendorRouteId", vendorRouteId) :
                new ObjectParameter("vendorRouteId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorPropertyRoute_GetForGenerateTicket_Result>("f_VendorPropertyRoute_GetForGenerateTicket", vendorIdParameter, vendorRouteIdParameter, workTypeIdParameter);
        }
    
        public virtual ObjectResult<f_VendorRoute_GetActiveByVendorId_Result> f_VendorRoute_GetActiveByVendorId(Nullable<int> vendorId, Nullable<bool> hideInactive, Nullable<int> territoryId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var hideInactiveParameter = hideInactive.HasValue ?
                new ObjectParameter("hideInactive", hideInactive) :
                new ObjectParameter("hideInactive", typeof(bool));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorRoute_GetActiveByVendorId_Result>("f_VendorRoute_GetActiveByVendorId", vendorIdParameter, hideInactiveParameter, territoryIdParameter);
        }
    
        public virtual ObjectResult<f_VendorRoute_GetByVendorIdDisplay_Result> f_VendorRoute_GetByVendorIdDisplay(Nullable<int> vendorId, Nullable<bool> hideInactive, Nullable<int> territoryId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var hideInactiveParameter = hideInactive.HasValue ?
                new ObjectParameter("hideInactive", hideInactive) :
                new ObjectParameter("hideInactive", typeof(bool));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorRoute_GetByVendorIdDisplay_Result>("f_VendorRoute_GetByVendorIdDisplay", vendorIdParameter, hideInactiveParameter, territoryIdParameter);
        }
    
        public virtual ObjectResult<f_VendorRoute_GetByVendorIdServiceDate_Result> f_VendorRoute_GetByVendorIdServiceDate(Nullable<int> vendorId, Nullable<System.DateTime> serviceDate, Nullable<int> workTypeId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var serviceDateParameter = serviceDate.HasValue ?
                new ObjectParameter("serviceDate", serviceDate) :
                new ObjectParameter("serviceDate", typeof(System.DateTime));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorRoute_GetByVendorIdServiceDate_Result>("f_VendorRoute_GetByVendorIdServiceDate", vendorIdParameter, serviceDateParameter, workTypeIdParameter);
        }
    
        public virtual ObjectResult<f_VendorRoute_GetByVendorRouteIdServiceDate_Result> f_VendorRoute_GetByVendorRouteIdServiceDate(Nullable<int> vendorRouteId, Nullable<System.DateTime> serviceDate)
        {
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("vendorRouteId", vendorRouteId) :
                new ObjectParameter("vendorRouteId", typeof(int));
    
            var serviceDateParameter = serviceDate.HasValue ?
                new ObjectParameter("serviceDate", serviceDate) :
                new ObjectParameter("serviceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorRoute_GetByVendorRouteIdServiceDate_Result>("f_VendorRoute_GetByVendorRouteIdServiceDate", vendorRouteIdParameter, serviceDateParameter);
        }
    
        public virtual ObjectResult<f_VendorRoute_GetSidewalkByVendorId_Result> f_VendorRoute_GetSidewalkByVendorId(Nullable<int> vendorId, Nullable<bool> hideInactive, Nullable<int> territoryId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var hideInactiveParameter = hideInactive.HasValue ?
                new ObjectParameter("hideInactive", hideInactive) :
                new ObjectParameter("hideInactive", typeof(bool));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorRoute_GetSidewalkByVendorId_Result>("f_VendorRoute_GetSidewalkByVendorId", vendorIdParameter, hideInactiveParameter, territoryIdParameter);
        }
    
        public virtual ObjectResult<f_VendorTerritory_GetByVendorIdDisplay_Result> f_VendorTerritory_GetByVendorIdDisplay(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorTerritory_GetByVendorIdDisplay_Result>("f_VendorTerritory_GetByVendorIdDisplay", vendorIdParameter);
        }
    
        public virtual ObjectResult<f_VendorWorker_GetByVendorIdDisplay_Result> f_VendorWorker_GetByVendorIdDisplay(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorWorker_GetByVendorIdDisplay_Result>("f_VendorWorker_GetByVendorIdDisplay", vendorIdParameter);
        }
    
        public virtual ObjectResult<f_VendorWorker_GetCurrentByVendorId_Result> f_VendorWorker_GetCurrentByVendorId(Nullable<int> vendorId, Nullable<int> currentWorkerId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var currentWorkerIdParameter = currentWorkerId.HasValue ?
                new ObjectParameter("currentWorkerId", currentWorkerId) :
                new ObjectParameter("currentWorkerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorWorker_GetCurrentByVendorId_Result>("f_VendorWorker_GetCurrentByVendorId", vendorIdParameter, currentWorkerIdParameter);
        }
    
        public virtual ObjectResult<f_VendorWorkType_GetByUsername_Result> f_VendorWorkType_GetByUsername(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_VendorWorkType_GetByUsername_Result>("f_VendorWorkType_GetByUsername", usernameParameter);
        }
    
        public virtual int f_WeatherEvent_CascadeDelete(Nullable<int> weatherEventId)
        {
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("weatherEventId", weatherEventId) :
                new ObjectParameter("weatherEventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_WeatherEvent_CascadeDelete", weatherEventIdParameter);
        }
    
        public virtual ObjectResult<f_WeatherEvent_GetByVendorIdDisplay_Result> f_WeatherEvent_GetByVendorIdDisplay(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_WeatherEvent_GetByVendorIdDisplay_Result>("f_WeatherEvent_GetByVendorIdDisplay", vendorIdParameter);
        }
    
        public virtual ObjectResult<f_WeatherEvent_GetByVendorIdSeasonId_Result> f_WeatherEvent_GetByVendorIdSeasonId(Nullable<int> vendorId, Nullable<int> seasonId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("seasonId", seasonId) :
                new ObjectParameter("seasonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_WeatherEvent_GetByVendorIdSeasonId_Result>("f_WeatherEvent_GetByVendorIdSeasonId", vendorIdParameter, seasonIdParameter);
        }
    
        public virtual ObjectResult<f_WeatherEvent_GetByVendorIdSeasonIdTerritoryId_Result> f_WeatherEvent_GetByVendorIdSeasonIdTerritoryId(Nullable<int> vendorId, Nullable<int> seasonId, Nullable<int> territoryId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("seasonId", seasonId) :
                new ObjectParameter("seasonId", typeof(int));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_WeatherEvent_GetByVendorIdSeasonIdTerritoryId_Result>("f_WeatherEvent_GetByVendorIdSeasonIdTerritoryId", vendorIdParameter, seasonIdParameter, territoryIdParameter);
        }
    
        public virtual ObjectResult<f_WeatherEvent_Search_Result> f_WeatherEvent_Search(Nullable<int> vendorId, Nullable<int> seasonId, Nullable<int> territoryId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("seasonId", seasonId) :
                new ObjectParameter("seasonId", typeof(int));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("territoryId", territoryId) :
                new ObjectParameter("territoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_WeatherEvent_Search_Result>("f_WeatherEvent_Search", vendorIdParameter, seasonIdParameter, territoryIdParameter);
        }
    
        public virtual ObjectResult<f_WorkEvent_GetByServiceDate_Result> f_WorkEvent_GetByServiceDate(Nullable<int> vendorId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_WorkEvent_GetByServiceDate_Result>("f_WorkEvent_GetByServiceDate", vendorIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<f_WorkEvent_GetByWorkTypeIdVendorIdServiceDateWeatherEventId_Result> f_WorkEvent_GetByWorkTypeIdVendorIdServiceDateWeatherEventId(Nullable<int> workTypeId, Nullable<int> vendorId, Nullable<System.DateTime> serviceDate, Nullable<int> weatherEventId)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var serviceDateParameter = serviceDate.HasValue ?
                new ObjectParameter("serviceDate", serviceDate) :
                new ObjectParameter("serviceDate", typeof(System.DateTime));
    
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("weatherEventId", weatherEventId) :
                new ObjectParameter("weatherEventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_WorkEvent_GetByWorkTypeIdVendorIdServiceDateWeatherEventId_Result>("f_WorkEvent_GetByWorkTypeIdVendorIdServiceDateWeatherEventId", workTypeIdParameter, vendorIdParameter, serviceDateParameter, weatherEventIdParameter);
        }
    
        public virtual int f_WorkEvent_GetQbCheck()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_WorkEvent_GetQbCheck");
        }
    
        public virtual int f_WorkEvent_GetQbInvoice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_WorkEvent_GetQbInvoice");
        }
    
        public virtual ObjectResult<f_WorkEvent_GetQuickbooksCheckList_Result> f_WorkEvent_GetQuickbooksCheckList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_WorkEvent_GetQuickbooksCheckList_Result>("f_WorkEvent_GetQuickbooksCheckList");
        }
    
        public virtual ObjectResult<f_WorkEvent_GetQuickbooksGeneralTimeList_Result> f_WorkEvent_GetQuickbooksGeneralTimeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_WorkEvent_GetQuickbooksGeneralTimeList_Result>("f_WorkEvent_GetQuickbooksGeneralTimeList");
        }
    
        public virtual ObjectResult<f_WorkEvent_GetQuickbooksInvoiceList_Result> f_WorkEvent_GetQuickbooksInvoiceList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_WorkEvent_GetQuickbooksInvoiceList_Result>("f_WorkEvent_GetQuickbooksInvoiceList");
        }
    
        public virtual int f_WorkEvent_MarkQuickbooksInvoiced(Nullable<int> workTypeId, Nullable<long> id, Nullable<System.DateTime> invoiceDateTime)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("workTypeId", workTypeId) :
                new ObjectParameter("workTypeId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var invoiceDateTimeParameter = invoiceDateTime.HasValue ?
                new ObjectParameter("invoiceDateTime", invoiceDateTime) :
                new ObjectParameter("invoiceDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_WorkEvent_MarkQuickbooksInvoiced", workTypeIdParameter, idParameter, invoiceDateTimeParameter);
        }
    
        public virtual ObjectResult<f_WorkType_GetByVendorId_Result> f_WorkType_GetByVendorId(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_WorkType_GetByVendorId_Result>("f_WorkType_GetByVendorId", vendorIdParameter);
        }
    
        public virtual int AccumulationType_Delete(Nullable<int> accumulationTypeId)
        {
            var accumulationTypeIdParameter = accumulationTypeId.HasValue ?
                new ObjectParameter("AccumulationTypeId", accumulationTypeId) :
                new ObjectParameter("AccumulationTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccumulationType_Delete", accumulationTypeIdParameter);
        }
    
        public virtual ObjectResult<AccumulationType_Find_Result> AccumulationType_Find(Nullable<bool> searchUsinGOR, Nullable<int> accumulationTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var accumulationTypeIdParameter = accumulationTypeId.HasValue ?
                new ObjectParameter("AccumulationTypeId", accumulationTypeId) :
                new ObjectParameter("AccumulationTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccumulationType_Find_Result>("AccumulationType_Find", searchUsinGORParameter, accumulationTypeIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<AccumulationType_Get_List_Result> AccumulationType_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccumulationType_Get_List_Result>("AccumulationType_Get_List");
        }
    
        public virtual ObjectResult<AccumulationType_GetByAccumulationTypeId_Result> AccumulationType_GetByAccumulationTypeId(Nullable<int> accumulationTypeId)
        {
            var accumulationTypeIdParameter = accumulationTypeId.HasValue ?
                new ObjectParameter("AccumulationTypeId", accumulationTypeId) :
                new ObjectParameter("AccumulationTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccumulationType_GetByAccumulationTypeId_Result>("AccumulationType_GetByAccumulationTypeId", accumulationTypeIdParameter);
        }
    
        public virtual ObjectResult<AccumulationType_GetByName_Result> AccumulationType_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccumulationType_GetByName_Result>("AccumulationType_GetByName", nameParameter);
        }
    
        public virtual int AccumulationType_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccumulationType_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int AccumulationType_Insert(ObjectParameter accumulationTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccumulationType_Insert", accumulationTypeId, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int AccumulationType_Update(Nullable<int> accumulationTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var accumulationTypeIdParameter = accumulationTypeId.HasValue ?
                new ObjectParameter("AccumulationTypeId", accumulationTypeId) :
                new ObjectParameter("AccumulationTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccumulationType_Update", accumulationTypeIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int AddressType_Delete(Nullable<int> addressTypeId)
        {
            var addressTypeIdParameter = addressTypeId.HasValue ?
                new ObjectParameter("AddressTypeId", addressTypeId) :
                new ObjectParameter("AddressTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddressType_Delete", addressTypeIdParameter);
        }
    
        public virtual ObjectResult<AddressType_Find_Result> AddressType_Find(Nullable<bool> searchUsinGOR, Nullable<int> addressTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var addressTypeIdParameter = addressTypeId.HasValue ?
                new ObjectParameter("AddressTypeId", addressTypeId) :
                new ObjectParameter("AddressTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddressType_Find_Result>("AddressType_Find", searchUsinGORParameter, addressTypeIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<AddressType_Get_List_Result> AddressType_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddressType_Get_List_Result>("AddressType_Get_List");
        }
    
        public virtual ObjectResult<AddressType_GetByAddressTypeId_Result> AddressType_GetByAddressTypeId(Nullable<int> addressTypeId)
        {
            var addressTypeIdParameter = addressTypeId.HasValue ?
                new ObjectParameter("AddressTypeId", addressTypeId) :
                new ObjectParameter("AddressTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddressType_GetByAddressTypeId_Result>("AddressType_GetByAddressTypeId", addressTypeIdParameter);
        }
    
        public virtual ObjectResult<AddressType_GetByName_Result> AddressType_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddressType_GetByName_Result>("AddressType_GetByName", nameParameter);
        }
    
        public virtual int AddressType_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddressType_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int AddressType_Insert(ObjectParameter addressTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddressType_Insert", addressTypeId, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int AddressType_Update(Nullable<int> addressTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var addressTypeIdParameter = addressTypeId.HasValue ?
                new ObjectParameter("AddressTypeId", addressTypeId) :
                new ObjectParameter("AddressTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddressType_Update", addressTypeIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ApplicationError_Delete(Nullable<int> applicationErrorId)
        {
            var applicationErrorIdParameter = applicationErrorId.HasValue ?
                new ObjectParameter("ApplicationErrorId", applicationErrorId) :
                new ObjectParameter("ApplicationErrorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ApplicationError_Delete", applicationErrorIdParameter);
        }
    
        public virtual ObjectResult<ApplicationError_Find_Result> ApplicationError_Find(Nullable<bool> searchUsinGOR, Nullable<int> applicationErrorId, string exceptionMessage, string exceptionTrace, string referrerUrl, string currentUrl, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var applicationErrorIdParameter = applicationErrorId.HasValue ?
                new ObjectParameter("ApplicationErrorId", applicationErrorId) :
                new ObjectParameter("ApplicationErrorId", typeof(int));
    
            var exceptionMessageParameter = exceptionMessage != null ?
                new ObjectParameter("ExceptionMessage", exceptionMessage) :
                new ObjectParameter("ExceptionMessage", typeof(string));
    
            var exceptionTraceParameter = exceptionTrace != null ?
                new ObjectParameter("ExceptionTrace", exceptionTrace) :
                new ObjectParameter("ExceptionTrace", typeof(string));
    
            var referrerUrlParameter = referrerUrl != null ?
                new ObjectParameter("ReferrerUrl", referrerUrl) :
                new ObjectParameter("ReferrerUrl", typeof(string));
    
            var currentUrlParameter = currentUrl != null ?
                new ObjectParameter("CurrentUrl", currentUrl) :
                new ObjectParameter("CurrentUrl", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ApplicationError_Find_Result>("ApplicationError_Find", searchUsinGORParameter, applicationErrorIdParameter, exceptionMessageParameter, exceptionTraceParameter, referrerUrlParameter, currentUrlParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<ApplicationError_Get_List_Result> ApplicationError_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ApplicationError_Get_List_Result>("ApplicationError_Get_List");
        }
    
        public virtual ObjectResult<ApplicationError_GetByApplicationErrorId_Result> ApplicationError_GetByApplicationErrorId(Nullable<int> applicationErrorId)
        {
            var applicationErrorIdParameter = applicationErrorId.HasValue ?
                new ObjectParameter("ApplicationErrorId", applicationErrorId) :
                new ObjectParameter("ApplicationErrorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ApplicationError_GetByApplicationErrorId_Result>("ApplicationError_GetByApplicationErrorId", applicationErrorIdParameter);
        }
    
        public virtual int ApplicationError_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ApplicationError_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int ApplicationError_Insert(ObjectParameter applicationErrorId, string exceptionMessage, string exceptionTrace, string referrerUrl, string currentUrl, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var exceptionMessageParameter = exceptionMessage != null ?
                new ObjectParameter("ExceptionMessage", exceptionMessage) :
                new ObjectParameter("ExceptionMessage", typeof(string));
    
            var exceptionTraceParameter = exceptionTrace != null ?
                new ObjectParameter("ExceptionTrace", exceptionTrace) :
                new ObjectParameter("ExceptionTrace", typeof(string));
    
            var referrerUrlParameter = referrerUrl != null ?
                new ObjectParameter("ReferrerUrl", referrerUrl) :
                new ObjectParameter("ReferrerUrl", typeof(string));
    
            var currentUrlParameter = currentUrl != null ?
                new ObjectParameter("CurrentUrl", currentUrl) :
                new ObjectParameter("CurrentUrl", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ApplicationError_Insert", applicationErrorId, exceptionMessageParameter, exceptionTraceParameter, referrerUrlParameter, currentUrlParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ApplicationError_Update(Nullable<int> applicationErrorId, string exceptionMessage, string exceptionTrace, string referrerUrl, string currentUrl, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var applicationErrorIdParameter = applicationErrorId.HasValue ?
                new ObjectParameter("ApplicationErrorId", applicationErrorId) :
                new ObjectParameter("ApplicationErrorId", typeof(int));
    
            var exceptionMessageParameter = exceptionMessage != null ?
                new ObjectParameter("ExceptionMessage", exceptionMessage) :
                new ObjectParameter("ExceptionMessage", typeof(string));
    
            var exceptionTraceParameter = exceptionTrace != null ?
                new ObjectParameter("ExceptionTrace", exceptionTrace) :
                new ObjectParameter("ExceptionTrace", typeof(string));
    
            var referrerUrlParameter = referrerUrl != null ?
                new ObjectParameter("ReferrerUrl", referrerUrl) :
                new ObjectParameter("ReferrerUrl", typeof(string));
    
            var currentUrlParameter = currentUrl != null ?
                new ObjectParameter("CurrentUrl", currentUrl) :
                new ObjectParameter("CurrentUrl", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ApplicationError_Update", applicationErrorIdParameter, exceptionMessageParameter, exceptionTraceParameter, referrerUrlParameter, currentUrlParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Company_Delete(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Company_Delete", companyIdParameter);
        }
    
        public virtual ObjectResult<Company_Find_Result> Company_Find(Nullable<bool> searchUsinGOR, Nullable<int> companyId, Nullable<int> companyTypeId, string companyName, string contactName, string workPhoneNumber, Nullable<int> workPhoneNumberExtention, string mobilePhoneNumber, string faxNumber, string emailAddress, string qbReference, Nullable<bool> isSyncNeeded, Nullable<bool> isActive, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var companyTypeIdParameter = companyTypeId.HasValue ?
                new ObjectParameter("CompanyTypeId", companyTypeId) :
                new ObjectParameter("CompanyTypeId", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var workPhoneNumberParameter = workPhoneNumber != null ?
                new ObjectParameter("WorkPhoneNumber", workPhoneNumber) :
                new ObjectParameter("WorkPhoneNumber", typeof(string));
    
            var workPhoneNumberExtentionParameter = workPhoneNumberExtention.HasValue ?
                new ObjectParameter("WorkPhoneNumberExtention", workPhoneNumberExtention) :
                new ObjectParameter("WorkPhoneNumberExtention", typeof(int));
    
            var mobilePhoneNumberParameter = mobilePhoneNumber != null ?
                new ObjectParameter("MobilePhoneNumber", mobilePhoneNumber) :
                new ObjectParameter("MobilePhoneNumber", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var qbReferenceParameter = qbReference != null ?
                new ObjectParameter("QbReference", qbReference) :
                new ObjectParameter("QbReference", typeof(string));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Company_Find_Result>("Company_Find", searchUsinGORParameter, companyIdParameter, companyTypeIdParameter, companyNameParameter, contactNameParameter, workPhoneNumberParameter, workPhoneNumberExtentionParameter, mobilePhoneNumberParameter, faxNumberParameter, emailAddressParameter, qbReferenceParameter, isSyncNeededParameter, isActiveParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<Company_Get_List_Result> Company_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Company_Get_List_Result>("Company_Get_List");
        }
    
        public virtual ObjectResult<Company_GetByCompanyId_Result> Company_GetByCompanyId(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Company_GetByCompanyId_Result>("Company_GetByCompanyId", companyIdParameter);
        }
    
        public virtual ObjectResult<Company_GetByCompanyTypeId_Result> Company_GetByCompanyTypeId(Nullable<int> companyTypeId)
        {
            var companyTypeIdParameter = companyTypeId.HasValue ?
                new ObjectParameter("CompanyTypeId", companyTypeId) :
                new ObjectParameter("CompanyTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Company_GetByCompanyTypeId_Result>("Company_GetByCompanyTypeId", companyTypeIdParameter);
        }
    
        public virtual int Company_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Company_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int Company_Insert(ObjectParameter companyId, Nullable<int> companyTypeId, string companyName, string contactName, string workPhoneNumber, Nullable<int> workPhoneNumberExtention, string mobilePhoneNumber, string faxNumber, string emailAddress, string qbReference, Nullable<bool> isSyncNeeded, Nullable<bool> isActive, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var companyTypeIdParameter = companyTypeId.HasValue ?
                new ObjectParameter("CompanyTypeId", companyTypeId) :
                new ObjectParameter("CompanyTypeId", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var workPhoneNumberParameter = workPhoneNumber != null ?
                new ObjectParameter("WorkPhoneNumber", workPhoneNumber) :
                new ObjectParameter("WorkPhoneNumber", typeof(string));
    
            var workPhoneNumberExtentionParameter = workPhoneNumberExtention.HasValue ?
                new ObjectParameter("WorkPhoneNumberExtention", workPhoneNumberExtention) :
                new ObjectParameter("WorkPhoneNumberExtention", typeof(int));
    
            var mobilePhoneNumberParameter = mobilePhoneNumber != null ?
                new ObjectParameter("MobilePhoneNumber", mobilePhoneNumber) :
                new ObjectParameter("MobilePhoneNumber", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var qbReferenceParameter = qbReference != null ?
                new ObjectParameter("QbReference", qbReference) :
                new ObjectParameter("QbReference", typeof(string));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Company_Insert", companyId, companyTypeIdParameter, companyNameParameter, contactNameParameter, workPhoneNumberParameter, workPhoneNumberExtentionParameter, mobilePhoneNumberParameter, faxNumberParameter, emailAddressParameter, qbReferenceParameter, isSyncNeededParameter, isActiveParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Company_Update(Nullable<int> companyId, Nullable<int> companyTypeId, string companyName, string contactName, string workPhoneNumber, Nullable<int> workPhoneNumberExtention, string mobilePhoneNumber, string faxNumber, string emailAddress, string qbReference, Nullable<bool> isSyncNeeded, Nullable<bool> isActive, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var companyTypeIdParameter = companyTypeId.HasValue ?
                new ObjectParameter("CompanyTypeId", companyTypeId) :
                new ObjectParameter("CompanyTypeId", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var workPhoneNumberParameter = workPhoneNumber != null ?
                new ObjectParameter("WorkPhoneNumber", workPhoneNumber) :
                new ObjectParameter("WorkPhoneNumber", typeof(string));
    
            var workPhoneNumberExtentionParameter = workPhoneNumberExtention.HasValue ?
                new ObjectParameter("WorkPhoneNumberExtention", workPhoneNumberExtention) :
                new ObjectParameter("WorkPhoneNumberExtention", typeof(int));
    
            var mobilePhoneNumberParameter = mobilePhoneNumber != null ?
                new ObjectParameter("MobilePhoneNumber", mobilePhoneNumber) :
                new ObjectParameter("MobilePhoneNumber", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var qbReferenceParameter = qbReference != null ?
                new ObjectParameter("QbReference", qbReference) :
                new ObjectParameter("QbReference", typeof(string));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Company_Update", companyIdParameter, companyTypeIdParameter, companyNameParameter, contactNameParameter, workPhoneNumberParameter, workPhoneNumberExtentionParameter, mobilePhoneNumberParameter, faxNumberParameter, emailAddressParameter, qbReferenceParameter, isSyncNeededParameter, isActiveParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int CompanyAddress_Delete(Nullable<int> companyAddressId)
        {
            var companyAddressIdParameter = companyAddressId.HasValue ?
                new ObjectParameter("CompanyAddressId", companyAddressId) :
                new ObjectParameter("CompanyAddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompanyAddress_Delete", companyAddressIdParameter);
        }
    
        public virtual ObjectResult<CompanyAddress_Find_Result> CompanyAddress_Find(Nullable<bool> searchUsinGOR, Nullable<int> companyAddressId, Nullable<int> companyId, Nullable<int> addressTypeId, string street1, string street2, string city, Nullable<int> stateId, string zipCode, string attention, Nullable<bool> isSyncNeeded, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var companyAddressIdParameter = companyAddressId.HasValue ?
                new ObjectParameter("CompanyAddressId", companyAddressId) :
                new ObjectParameter("CompanyAddressId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var addressTypeIdParameter = addressTypeId.HasValue ?
                new ObjectParameter("AddressTypeId", addressTypeId) :
                new ObjectParameter("AddressTypeId", typeof(int));
    
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            var street2Parameter = street2 != null ?
                new ObjectParameter("Street2", street2) :
                new ObjectParameter("Street2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var attentionParameter = attention != null ?
                new ObjectParameter("Attention", attention) :
                new ObjectParameter("Attention", typeof(string));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyAddress_Find_Result>("CompanyAddress_Find", searchUsinGORParameter, companyAddressIdParameter, companyIdParameter, addressTypeIdParameter, street1Parameter, street2Parameter, cityParameter, stateIdParameter, zipCodeParameter, attentionParameter, isSyncNeededParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<CompanyAddress_Get_List_Result> CompanyAddress_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyAddress_Get_List_Result>("CompanyAddress_Get_List");
        }
    
        public virtual ObjectResult<CompanyAddress_GetByAddressTypeId_Result> CompanyAddress_GetByAddressTypeId(Nullable<int> addressTypeId)
        {
            var addressTypeIdParameter = addressTypeId.HasValue ?
                new ObjectParameter("AddressTypeId", addressTypeId) :
                new ObjectParameter("AddressTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyAddress_GetByAddressTypeId_Result>("CompanyAddress_GetByAddressTypeId", addressTypeIdParameter);
        }
    
        public virtual ObjectResult<CompanyAddress_GetByCompanyAddressId_Result> CompanyAddress_GetByCompanyAddressId(Nullable<int> companyAddressId)
        {
            var companyAddressIdParameter = companyAddressId.HasValue ?
                new ObjectParameter("CompanyAddressId", companyAddressId) :
                new ObjectParameter("CompanyAddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyAddress_GetByCompanyAddressId_Result>("CompanyAddress_GetByCompanyAddressId", companyAddressIdParameter);
        }
    
        public virtual ObjectResult<CompanyAddress_GetByCompanyId_Result> CompanyAddress_GetByCompanyId(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyAddress_GetByCompanyId_Result>("CompanyAddress_GetByCompanyId", companyIdParameter);
        }
    
        public virtual ObjectResult<CompanyAddress_GetByCompanyIdAddressTypeId_Result> CompanyAddress_GetByCompanyIdAddressTypeId(Nullable<int> companyId, Nullable<int> addressTypeId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var addressTypeIdParameter = addressTypeId.HasValue ?
                new ObjectParameter("AddressTypeId", addressTypeId) :
                new ObjectParameter("AddressTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyAddress_GetByCompanyIdAddressTypeId_Result>("CompanyAddress_GetByCompanyIdAddressTypeId", companyIdParameter, addressTypeIdParameter);
        }
    
        public virtual ObjectResult<CompanyAddress_GetByStateId_Result> CompanyAddress_GetByStateId(Nullable<int> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyAddress_GetByStateId_Result>("CompanyAddress_GetByStateId", stateIdParameter);
        }
    
        public virtual int CompanyAddress_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompanyAddress_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int CompanyAddress_Insert(ObjectParameter companyAddressId, Nullable<int> companyId, Nullable<int> addressTypeId, string street1, string street2, string city, Nullable<int> stateId, string zipCode, string attention, Nullable<bool> isSyncNeeded, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var addressTypeIdParameter = addressTypeId.HasValue ?
                new ObjectParameter("AddressTypeId", addressTypeId) :
                new ObjectParameter("AddressTypeId", typeof(int));
    
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            var street2Parameter = street2 != null ?
                new ObjectParameter("Street2", street2) :
                new ObjectParameter("Street2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var attentionParameter = attention != null ?
                new ObjectParameter("Attention", attention) :
                new ObjectParameter("Attention", typeof(string));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompanyAddress_Insert", companyAddressId, companyIdParameter, addressTypeIdParameter, street1Parameter, street2Parameter, cityParameter, stateIdParameter, zipCodeParameter, attentionParameter, isSyncNeededParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int CompanyAddress_Update(Nullable<int> companyAddressId, Nullable<int> companyId, Nullable<int> addressTypeId, string street1, string street2, string city, Nullable<int> stateId, string zipCode, string attention, Nullable<bool> isSyncNeeded, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var companyAddressIdParameter = companyAddressId.HasValue ?
                new ObjectParameter("CompanyAddressId", companyAddressId) :
                new ObjectParameter("CompanyAddressId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var addressTypeIdParameter = addressTypeId.HasValue ?
                new ObjectParameter("AddressTypeId", addressTypeId) :
                new ObjectParameter("AddressTypeId", typeof(int));
    
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            var street2Parameter = street2 != null ?
                new ObjectParameter("Street2", street2) :
                new ObjectParameter("Street2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var attentionParameter = attention != null ?
                new ObjectParameter("Attention", attention) :
                new ObjectParameter("Attention", typeof(string));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompanyAddress_Update", companyAddressIdParameter, companyIdParameter, addressTypeIdParameter, street1Parameter, street2Parameter, cityParameter, stateIdParameter, zipCodeParameter, attentionParameter, isSyncNeededParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int CompanyProperty_Delete(Nullable<int> companyPropertyId)
        {
            var companyPropertyIdParameter = companyPropertyId.HasValue ?
                new ObjectParameter("CompanyPropertyId", companyPropertyId) :
                new ObjectParameter("CompanyPropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompanyProperty_Delete", companyPropertyIdParameter);
        }
    
        public virtual ObjectResult<CompanyProperty_Find_Result> CompanyProperty_Find(Nullable<bool> searchUsinGOR, Nullable<int> companyPropertyId, Nullable<int> companyId, Nullable<int> propertyId, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, Nullable<bool> isSyncNeeded, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var companyPropertyIdParameter = companyPropertyId.HasValue ?
                new ObjectParameter("CompanyPropertyId", companyPropertyId) :
                new ObjectParameter("CompanyPropertyId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyProperty_Find_Result>("CompanyProperty_Find", searchUsinGORParameter, companyPropertyIdParameter, companyIdParameter, propertyIdParameter, effectiveDateParameter, expirationDateParameter, isSyncNeededParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<CompanyProperty_Get_List_Result> CompanyProperty_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyProperty_Get_List_Result>("CompanyProperty_Get_List");
        }
    
        public virtual ObjectResult<CompanyProperty_GetByCompanyId_Result> CompanyProperty_GetByCompanyId(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyProperty_GetByCompanyId_Result>("CompanyProperty_GetByCompanyId", companyIdParameter);
        }
    
        public virtual ObjectResult<CompanyProperty_GetByCompanyPropertyId_Result> CompanyProperty_GetByCompanyPropertyId(Nullable<int> companyPropertyId)
        {
            var companyPropertyIdParameter = companyPropertyId.HasValue ?
                new ObjectParameter("CompanyPropertyId", companyPropertyId) :
                new ObjectParameter("CompanyPropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyProperty_GetByCompanyPropertyId_Result>("CompanyProperty_GetByCompanyPropertyId", companyPropertyIdParameter);
        }
    
        public virtual ObjectResult<CompanyProperty_GetByPropertyId_Result> CompanyProperty_GetByPropertyId(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyProperty_GetByPropertyId_Result>("CompanyProperty_GetByPropertyId", propertyIdParameter);
        }
    
        public virtual int CompanyProperty_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompanyProperty_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int CompanyProperty_Insert(ObjectParameter companyPropertyId, Nullable<int> companyId, Nullable<int> propertyId, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, Nullable<bool> isSyncNeeded, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompanyProperty_Insert", companyPropertyId, companyIdParameter, propertyIdParameter, effectiveDateParameter, expirationDateParameter, isSyncNeededParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int CompanyProperty_Update(Nullable<int> companyPropertyId, Nullable<int> companyId, Nullable<int> propertyId, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, Nullable<bool> isSyncNeeded, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var companyPropertyIdParameter = companyPropertyId.HasValue ?
                new ObjectParameter("CompanyPropertyId", companyPropertyId) :
                new ObjectParameter("CompanyPropertyId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompanyProperty_Update", companyPropertyIdParameter, companyIdParameter, propertyIdParameter, effectiveDateParameter, expirationDateParameter, isSyncNeededParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int CompanyType_Delete(Nullable<int> companyTypeId)
        {
            var companyTypeIdParameter = companyTypeId.HasValue ?
                new ObjectParameter("CompanyTypeId", companyTypeId) :
                new ObjectParameter("CompanyTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompanyType_Delete", companyTypeIdParameter);
        }
    
        public virtual ObjectResult<CompanyType_Find_Result> CompanyType_Find(Nullable<bool> searchUsinGOR, Nullable<int> companyTypeId, string name, string description, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var companyTypeIdParameter = companyTypeId.HasValue ?
                new ObjectParameter("CompanyTypeId", companyTypeId) :
                new ObjectParameter("CompanyTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyType_Find_Result>("CompanyType_Find", searchUsinGORParameter, companyTypeIdParameter, nameParameter, descriptionParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<CompanyType_Get_List_Result> CompanyType_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyType_Get_List_Result>("CompanyType_Get_List");
        }
    
        public virtual ObjectResult<CompanyType_GetByCompanyTypeId_Result> CompanyType_GetByCompanyTypeId(Nullable<int> companyTypeId)
        {
            var companyTypeIdParameter = companyTypeId.HasValue ?
                new ObjectParameter("CompanyTypeId", companyTypeId) :
                new ObjectParameter("CompanyTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyType_GetByCompanyTypeId_Result>("CompanyType_GetByCompanyTypeId", companyTypeIdParameter);
        }
    
        public virtual ObjectResult<CompanyType_GetByName_Result> CompanyType_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyType_GetByName_Result>("CompanyType_GetByName", nameParameter);
        }
    
        public virtual int CompanyType_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompanyType_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int CompanyType_Insert(ObjectParameter companyTypeId, string name, string description, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompanyType_Insert", companyTypeId, nameParameter, descriptionParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int CompanyType_Update(Nullable<int> companyTypeId, string name, string description, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var companyTypeIdParameter = companyTypeId.HasValue ?
                new ObjectParameter("CompanyTypeId", companyTypeId) :
                new ObjectParameter("CompanyTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompanyType_Update", companyTypeIdParameter, nameParameter, descriptionParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ConfigParameter_Delete(Nullable<int> configParameterId)
        {
            var configParameterIdParameter = configParameterId.HasValue ?
                new ObjectParameter("ConfigParameterId", configParameterId) :
                new ObjectParameter("ConfigParameterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConfigParameter_Delete", configParameterIdParameter);
        }
    
        public virtual ObjectResult<ConfigParameter_Find_Result> ConfigParameter_Find(Nullable<bool> searchUsinGOR, Nullable<int> configParameterId, string paramName, string paramValue, string description, string regEx, Nullable<bool> isSystemValue, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var configParameterIdParameter = configParameterId.HasValue ?
                new ObjectParameter("ConfigParameterId", configParameterId) :
                new ObjectParameter("ConfigParameterId", typeof(int));
    
            var paramNameParameter = paramName != null ?
                new ObjectParameter("ParamName", paramName) :
                new ObjectParameter("ParamName", typeof(string));
    
            var paramValueParameter = paramValue != null ?
                new ObjectParameter("ParamValue", paramValue) :
                new ObjectParameter("ParamValue", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var regExParameter = regEx != null ?
                new ObjectParameter("RegEx", regEx) :
                new ObjectParameter("RegEx", typeof(string));
    
            var isSystemValueParameter = isSystemValue.HasValue ?
                new ObjectParameter("IsSystemValue", isSystemValue) :
                new ObjectParameter("IsSystemValue", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConfigParameter_Find_Result>("ConfigParameter_Find", searchUsinGORParameter, configParameterIdParameter, paramNameParameter, paramValueParameter, descriptionParameter, regExParameter, isSystemValueParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<ConfigParameter_Get_List_Result> ConfigParameter_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConfigParameter_Get_List_Result>("ConfigParameter_Get_List");
        }
    
        public virtual ObjectResult<ConfigParameter_GetByConfigParameterId_Result> ConfigParameter_GetByConfigParameterId(Nullable<int> configParameterId)
        {
            var configParameterIdParameter = configParameterId.HasValue ?
                new ObjectParameter("ConfigParameterId", configParameterId) :
                new ObjectParameter("ConfigParameterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConfigParameter_GetByConfigParameterId_Result>("ConfigParameter_GetByConfigParameterId", configParameterIdParameter);
        }
    
        public virtual ObjectResult<ConfigParameter_GetByParamName_Result> ConfigParameter_GetByParamName(string paramName)
        {
            var paramNameParameter = paramName != null ?
                new ObjectParameter("ParamName", paramName) :
                new ObjectParameter("ParamName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConfigParameter_GetByParamName_Result>("ConfigParameter_GetByParamName", paramNameParameter);
        }
    
        public virtual int ConfigParameter_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConfigParameter_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int ConfigParameter_Insert(ObjectParameter configParameterId, string paramName, string paramValue, string description, string regEx, Nullable<bool> isSystemValue, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var paramNameParameter = paramName != null ?
                new ObjectParameter("ParamName", paramName) :
                new ObjectParameter("ParamName", typeof(string));
    
            var paramValueParameter = paramValue != null ?
                new ObjectParameter("ParamValue", paramValue) :
                new ObjectParameter("ParamValue", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var regExParameter = regEx != null ?
                new ObjectParameter("RegEx", regEx) :
                new ObjectParameter("RegEx", typeof(string));
    
            var isSystemValueParameter = isSystemValue.HasValue ?
                new ObjectParameter("IsSystemValue", isSystemValue) :
                new ObjectParameter("IsSystemValue", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConfigParameter_Insert", configParameterId, paramNameParameter, paramValueParameter, descriptionParameter, regExParameter, isSystemValueParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ConfigParameter_Update(Nullable<int> configParameterId, string paramName, string paramValue, string description, string regEx, Nullable<bool> isSystemValue, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var configParameterIdParameter = configParameterId.HasValue ?
                new ObjectParameter("ConfigParameterId", configParameterId) :
                new ObjectParameter("ConfigParameterId", typeof(int));
    
            var paramNameParameter = paramName != null ?
                new ObjectParameter("ParamName", paramName) :
                new ObjectParameter("ParamName", typeof(string));
    
            var paramValueParameter = paramValue != null ?
                new ObjectParameter("ParamValue", paramValue) :
                new ObjectParameter("ParamValue", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var regExParameter = regEx != null ?
                new ObjectParameter("RegEx", regEx) :
                new ObjectParameter("RegEx", typeof(string));
    
            var isSystemValueParameter = isSystemValue.HasValue ?
                new ObjectParameter("IsSystemValue", isSystemValue) :
                new ObjectParameter("IsSystemValue", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConfigParameter_Update", configParameterIdParameter, paramNameParameter, paramValueParameter, descriptionParameter, regExParameter, isSystemValueParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ContactType_Delete(Nullable<int> contactTypeId)
        {
            var contactTypeIdParameter = contactTypeId.HasValue ?
                new ObjectParameter("ContactTypeId", contactTypeId) :
                new ObjectParameter("ContactTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ContactType_Delete", contactTypeIdParameter);
        }
    
        public virtual ObjectResult<ContactType_Find_Result> ContactType_Find(Nullable<bool> searchUsinGOR, Nullable<int> contactTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var contactTypeIdParameter = contactTypeId.HasValue ?
                new ObjectParameter("ContactTypeId", contactTypeId) :
                new ObjectParameter("ContactTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContactType_Find_Result>("ContactType_Find", searchUsinGORParameter, contactTypeIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<ContactType_Get_List_Result> ContactType_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContactType_Get_List_Result>("ContactType_Get_List");
        }
    
        public virtual ObjectResult<ContactType_GetByContactTypeId_Result> ContactType_GetByContactTypeId(Nullable<int> contactTypeId)
        {
            var contactTypeIdParameter = contactTypeId.HasValue ?
                new ObjectParameter("ContactTypeId", contactTypeId) :
                new ObjectParameter("ContactTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContactType_GetByContactTypeId_Result>("ContactType_GetByContactTypeId", contactTypeIdParameter);
        }
    
        public virtual ObjectResult<ContactType_GetByName_Result> ContactType_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContactType_GetByName_Result>("ContactType_GetByName", nameParameter);
        }
    
        public virtual int ContactType_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ContactType_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int ContactType_Insert(ObjectParameter contactTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ContactType_Insert", contactTypeId, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ContactType_Update(Nullable<int> contactTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var contactTypeIdParameter = contactTypeId.HasValue ?
                new ObjectParameter("ContactTypeId", contactTypeId) :
                new ObjectParameter("ContactTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ContactType_Update", contactTypeIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int DynamicLink_Delete(Nullable<int> dynamicLinkId)
        {
            var dynamicLinkIdParameter = dynamicLinkId.HasValue ?
                new ObjectParameter("DynamicLinkId", dynamicLinkId) :
                new ObjectParameter("DynamicLinkId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DynamicLink_Delete", dynamicLinkIdParameter);
        }
    
        public virtual ObjectResult<DynamicLink_Find_Result> DynamicLink_Find(Nullable<bool> searchUsinGOR, Nullable<int> dynamicLinkId, string navigateUrl, string name, string displayText, Nullable<int> displayOrder, Nullable<bool> isOpenInNewWindow, Nullable<bool> isActive, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var dynamicLinkIdParameter = dynamicLinkId.HasValue ?
                new ObjectParameter("DynamicLinkId", dynamicLinkId) :
                new ObjectParameter("DynamicLinkId", typeof(int));
    
            var navigateUrlParameter = navigateUrl != null ?
                new ObjectParameter("NavigateUrl", navigateUrl) :
                new ObjectParameter("NavigateUrl", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var displayTextParameter = displayText != null ?
                new ObjectParameter("DisplayText", displayText) :
                new ObjectParameter("DisplayText", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var isOpenInNewWindowParameter = isOpenInNewWindow.HasValue ?
                new ObjectParameter("IsOpenInNewWindow", isOpenInNewWindow) :
                new ObjectParameter("IsOpenInNewWindow", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DynamicLink_Find_Result>("DynamicLink_Find", searchUsinGORParameter, dynamicLinkIdParameter, navigateUrlParameter, nameParameter, displayTextParameter, displayOrderParameter, isOpenInNewWindowParameter, isActiveParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<DynamicLink_Get_List_Result> DynamicLink_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DynamicLink_Get_List_Result>("DynamicLink_Get_List");
        }
    
        public virtual ObjectResult<DynamicLink_GetByDynamicLinkId_Result> DynamicLink_GetByDynamicLinkId(Nullable<int> dynamicLinkId)
        {
            var dynamicLinkIdParameter = dynamicLinkId.HasValue ?
                new ObjectParameter("DynamicLinkId", dynamicLinkId) :
                new ObjectParameter("DynamicLinkId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DynamicLink_GetByDynamicLinkId_Result>("DynamicLink_GetByDynamicLinkId", dynamicLinkIdParameter);
        }
    
        public virtual int DynamicLink_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DynamicLink_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int DynamicLink_Insert(ObjectParameter dynamicLinkId, string navigateUrl, string name, string displayText, Nullable<int> displayOrder, Nullable<bool> isOpenInNewWindow, Nullable<bool> isActive, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var navigateUrlParameter = navigateUrl != null ?
                new ObjectParameter("NavigateUrl", navigateUrl) :
                new ObjectParameter("NavigateUrl", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var displayTextParameter = displayText != null ?
                new ObjectParameter("DisplayText", displayText) :
                new ObjectParameter("DisplayText", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var isOpenInNewWindowParameter = isOpenInNewWindow.HasValue ?
                new ObjectParameter("IsOpenInNewWindow", isOpenInNewWindow) :
                new ObjectParameter("IsOpenInNewWindow", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DynamicLink_Insert", dynamicLinkId, navigateUrlParameter, nameParameter, displayTextParameter, displayOrderParameter, isOpenInNewWindowParameter, isActiveParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int DynamicLink_Update(Nullable<int> dynamicLinkId, string navigateUrl, string name, string displayText, Nullable<int> displayOrder, Nullable<bool> isOpenInNewWindow, Nullable<bool> isActive, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var dynamicLinkIdParameter = dynamicLinkId.HasValue ?
                new ObjectParameter("DynamicLinkId", dynamicLinkId) :
                new ObjectParameter("DynamicLinkId", typeof(int));
    
            var navigateUrlParameter = navigateUrl != null ?
                new ObjectParameter("NavigateUrl", navigateUrl) :
                new ObjectParameter("NavigateUrl", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var displayTextParameter = displayText != null ?
                new ObjectParameter("DisplayText", displayText) :
                new ObjectParameter("DisplayText", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var isOpenInNewWindowParameter = isOpenInNewWindow.HasValue ?
                new ObjectParameter("IsOpenInNewWindow", isOpenInNewWindow) :
                new ObjectParameter("IsOpenInNewWindow", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DynamicLink_Update", dynamicLinkIdParameter, navigateUrlParameter, nameParameter, displayTextParameter, displayOrderParameter, isOpenInNewWindowParameter, isActiveParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Equipment_Delete(Nullable<int> equipmentId)
        {
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Equipment_Delete", equipmentIdParameter);
        }
    
        public virtual ObjectResult<Equipment_Find_Result> Equipment_Find(Nullable<bool> searchUsinGOR, Nullable<int> equipmentId, Nullable<int> workTypeId, string name, Nullable<int> equipmentOwnerTypeId, Nullable<int> equipmentCateGOryId, Nullable<double> defaultCustomerRate, Nullable<double> defaultVendorRate, string qbItemName, string qbReference, Nullable<bool> isActive, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var equipmentOwnerTypeIdParameter = equipmentOwnerTypeId.HasValue ?
                new ObjectParameter("EquipmentOwnerTypeId", equipmentOwnerTypeId) :
                new ObjectParameter("EquipmentOwnerTypeId", typeof(int));
    
            var equipmentCateGOryIdParameter = equipmentCateGOryId.HasValue ?
                new ObjectParameter("EquipmentCateGOryId", equipmentCateGOryId) :
                new ObjectParameter("EquipmentCateGOryId", typeof(int));
    
            var defaultCustomerRateParameter = defaultCustomerRate.HasValue ?
                new ObjectParameter("DefaultCustomerRate", defaultCustomerRate) :
                new ObjectParameter("DefaultCustomerRate", typeof(double));
    
            var defaultVendorRateParameter = defaultVendorRate.HasValue ?
                new ObjectParameter("DefaultVendorRate", defaultVendorRate) :
                new ObjectParameter("DefaultVendorRate", typeof(double));
    
            var qbItemNameParameter = qbItemName != null ?
                new ObjectParameter("QbItemName", qbItemName) :
                new ObjectParameter("QbItemName", typeof(string));
    
            var qbReferenceParameter = qbReference != null ?
                new ObjectParameter("QbReference", qbReference) :
                new ObjectParameter("QbReference", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Equipment_Find_Result>("Equipment_Find", searchUsinGORParameter, equipmentIdParameter, workTypeIdParameter, nameParameter, equipmentOwnerTypeIdParameter, equipmentCateGOryIdParameter, defaultCustomerRateParameter, defaultVendorRateParameter, qbItemNameParameter, qbReferenceParameter, isActiveParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<Equipment_Get_List_Result> Equipment_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Equipment_Get_List_Result>("Equipment_Get_List");
        }
    
        public virtual ObjectResult<Equipment_GetByEquipmentCateGOryId_Result> Equipment_GetByEquipmentCateGOryId(Nullable<int> equipmentCateGOryId)
        {
            var equipmentCateGOryIdParameter = equipmentCateGOryId.HasValue ?
                new ObjectParameter("EquipmentCateGOryId", equipmentCateGOryId) :
                new ObjectParameter("EquipmentCateGOryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Equipment_GetByEquipmentCateGOryId_Result>("Equipment_GetByEquipmentCateGOryId", equipmentCateGOryIdParameter);
        }
    
        public virtual ObjectResult<Equipment_GetByEquipmentId_Result> Equipment_GetByEquipmentId(Nullable<int> equipmentId)
        {
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Equipment_GetByEquipmentId_Result>("Equipment_GetByEquipmentId", equipmentIdParameter);
        }
    
        public virtual ObjectResult<Equipment_GetByEquipmentOwnerTypeId_Result> Equipment_GetByEquipmentOwnerTypeId(Nullable<int> equipmentOwnerTypeId)
        {
            var equipmentOwnerTypeIdParameter = equipmentOwnerTypeId.HasValue ?
                new ObjectParameter("EquipmentOwnerTypeId", equipmentOwnerTypeId) :
                new ObjectParameter("EquipmentOwnerTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Equipment_GetByEquipmentOwnerTypeId_Result>("Equipment_GetByEquipmentOwnerTypeId", equipmentOwnerTypeIdParameter);
        }
    
        public virtual ObjectResult<Equipment_GetByWorkTypeId_Result> Equipment_GetByWorkTypeId(Nullable<int> workTypeId)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Equipment_GetByWorkTypeId_Result>("Equipment_GetByWorkTypeId", workTypeIdParameter);
        }
    
        public virtual int Equipment_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Equipment_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int Equipment_Insert(ObjectParameter equipmentId, Nullable<int> workTypeId, string name, Nullable<int> equipmentOwnerTypeId, Nullable<int> equipmentCateGOryId, Nullable<double> defaultCustomerRate, Nullable<double> defaultVendorRate, string qbItemName, string qbReference, Nullable<bool> isActive, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var equipmentOwnerTypeIdParameter = equipmentOwnerTypeId.HasValue ?
                new ObjectParameter("EquipmentOwnerTypeId", equipmentOwnerTypeId) :
                new ObjectParameter("EquipmentOwnerTypeId", typeof(int));
    
            var equipmentCateGOryIdParameter = equipmentCateGOryId.HasValue ?
                new ObjectParameter("EquipmentCateGOryId", equipmentCateGOryId) :
                new ObjectParameter("EquipmentCateGOryId", typeof(int));
    
            var defaultCustomerRateParameter = defaultCustomerRate.HasValue ?
                new ObjectParameter("DefaultCustomerRate", defaultCustomerRate) :
                new ObjectParameter("DefaultCustomerRate", typeof(double));
    
            var defaultVendorRateParameter = defaultVendorRate.HasValue ?
                new ObjectParameter("DefaultVendorRate", defaultVendorRate) :
                new ObjectParameter("DefaultVendorRate", typeof(double));
    
            var qbItemNameParameter = qbItemName != null ?
                new ObjectParameter("QbItemName", qbItemName) :
                new ObjectParameter("QbItemName", typeof(string));
    
            var qbReferenceParameter = qbReference != null ?
                new ObjectParameter("QbReference", qbReference) :
                new ObjectParameter("QbReference", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Equipment_Insert", equipmentId, workTypeIdParameter, nameParameter, equipmentOwnerTypeIdParameter, equipmentCateGOryIdParameter, defaultCustomerRateParameter, defaultVendorRateParameter, qbItemNameParameter, qbReferenceParameter, isActiveParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Equipment_Update(Nullable<int> equipmentId, Nullable<int> workTypeId, string name, Nullable<int> equipmentOwnerTypeId, Nullable<int> equipmentCateGOryId, Nullable<double> defaultCustomerRate, Nullable<double> defaultVendorRate, string qbItemName, string qbReference, Nullable<bool> isActive, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var equipmentOwnerTypeIdParameter = equipmentOwnerTypeId.HasValue ?
                new ObjectParameter("EquipmentOwnerTypeId", equipmentOwnerTypeId) :
                new ObjectParameter("EquipmentOwnerTypeId", typeof(int));
    
            var equipmentCateGOryIdParameter = equipmentCateGOryId.HasValue ?
                new ObjectParameter("EquipmentCateGOryId", equipmentCateGOryId) :
                new ObjectParameter("EquipmentCateGOryId", typeof(int));
    
            var defaultCustomerRateParameter = defaultCustomerRate.HasValue ?
                new ObjectParameter("DefaultCustomerRate", defaultCustomerRate) :
                new ObjectParameter("DefaultCustomerRate", typeof(double));
    
            var defaultVendorRateParameter = defaultVendorRate.HasValue ?
                new ObjectParameter("DefaultVendorRate", defaultVendorRate) :
                new ObjectParameter("DefaultVendorRate", typeof(double));
    
            var qbItemNameParameter = qbItemName != null ?
                new ObjectParameter("QbItemName", qbItemName) :
                new ObjectParameter("QbItemName", typeof(string));
    
            var qbReferenceParameter = qbReference != null ?
                new ObjectParameter("QbReference", qbReference) :
                new ObjectParameter("QbReference", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Equipment_Update", equipmentIdParameter, workTypeIdParameter, nameParameter, equipmentOwnerTypeIdParameter, equipmentCateGOryIdParameter, defaultCustomerRateParameter, defaultVendorRateParameter, qbItemNameParameter, qbReferenceParameter, isActiveParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int EquipmentCateGOry_Delete(Nullable<int> equipmentCateGOryId)
        {
            var equipmentCateGOryIdParameter = equipmentCateGOryId.HasValue ?
                new ObjectParameter("EquipmentCateGOryId", equipmentCateGOryId) :
                new ObjectParameter("EquipmentCateGOryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EquipmentCateGOry_Delete", equipmentCateGOryIdParameter);
        }
    
        public virtual ObjectResult<EquipmentCateGOry_Find_Result> EquipmentCateGOry_Find(Nullable<bool> searchUsinGOR, Nullable<int> equipmentCateGOryId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var equipmentCateGOryIdParameter = equipmentCateGOryId.HasValue ?
                new ObjectParameter("EquipmentCateGOryId", equipmentCateGOryId) :
                new ObjectParameter("EquipmentCateGOryId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EquipmentCateGOry_Find_Result>("EquipmentCateGOry_Find", searchUsinGORParameter, equipmentCateGOryIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<EquipmentCateGOry_Get_List_Result> EquipmentCateGOry_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EquipmentCateGOry_Get_List_Result>("EquipmentCateGOry_Get_List");
        }
    
        public virtual ObjectResult<EquipmentCateGOry_GetByEquipmentCateGOryId_Result> EquipmentCateGOry_GetByEquipmentCateGOryId(Nullable<int> equipmentCateGOryId)
        {
            var equipmentCateGOryIdParameter = equipmentCateGOryId.HasValue ?
                new ObjectParameter("EquipmentCateGOryId", equipmentCateGOryId) :
                new ObjectParameter("EquipmentCateGOryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EquipmentCateGOry_GetByEquipmentCateGOryId_Result>("EquipmentCateGOry_GetByEquipmentCateGOryId", equipmentCateGOryIdParameter);
        }
    
        public virtual ObjectResult<EquipmentCateGOry_GetByName_Result> EquipmentCateGOry_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EquipmentCateGOry_GetByName_Result>("EquipmentCateGOry_GetByName", nameParameter);
        }
    
        public virtual int EquipmentCateGOry_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EquipmentCateGOry_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int EquipmentCateGOry_Insert(ObjectParameter equipmentCateGOryId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EquipmentCateGOry_Insert", equipmentCateGOryId, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int EquipmentCateGOry_Update(Nullable<int> equipmentCateGOryId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var equipmentCateGOryIdParameter = equipmentCateGOryId.HasValue ?
                new ObjectParameter("EquipmentCateGOryId", equipmentCateGOryId) :
                new ObjectParameter("EquipmentCateGOryId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EquipmentCateGOry_Update", equipmentCateGOryIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int EquipmentOwnerType_Delete(Nullable<int> equipmentOwnerTypeId)
        {
            var equipmentOwnerTypeIdParameter = equipmentOwnerTypeId.HasValue ?
                new ObjectParameter("EquipmentOwnerTypeId", equipmentOwnerTypeId) :
                new ObjectParameter("EquipmentOwnerTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EquipmentOwnerType_Delete", equipmentOwnerTypeIdParameter);
        }
    
        public virtual ObjectResult<EquipmentOwnerType_Find_Result> EquipmentOwnerType_Find(Nullable<bool> searchUsinGOR, Nullable<int> equipmentOwnerTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var equipmentOwnerTypeIdParameter = equipmentOwnerTypeId.HasValue ?
                new ObjectParameter("EquipmentOwnerTypeId", equipmentOwnerTypeId) :
                new ObjectParameter("EquipmentOwnerTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EquipmentOwnerType_Find_Result>("EquipmentOwnerType_Find", searchUsinGORParameter, equipmentOwnerTypeIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<EquipmentOwnerType_Get_List_Result> EquipmentOwnerType_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EquipmentOwnerType_Get_List_Result>("EquipmentOwnerType_Get_List");
        }
    
        public virtual ObjectResult<EquipmentOwnerType_GetByEquipmentOwnerTypeId_Result> EquipmentOwnerType_GetByEquipmentOwnerTypeId(Nullable<int> equipmentOwnerTypeId)
        {
            var equipmentOwnerTypeIdParameter = equipmentOwnerTypeId.HasValue ?
                new ObjectParameter("EquipmentOwnerTypeId", equipmentOwnerTypeId) :
                new ObjectParameter("EquipmentOwnerTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EquipmentOwnerType_GetByEquipmentOwnerTypeId_Result>("EquipmentOwnerType_GetByEquipmentOwnerTypeId", equipmentOwnerTypeIdParameter);
        }
    
        public virtual ObjectResult<EquipmentOwnerType_GetByName_Result> EquipmentOwnerType_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EquipmentOwnerType_GetByName_Result>("EquipmentOwnerType_GetByName", nameParameter);
        }
    
        public virtual int EquipmentOwnerType_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EquipmentOwnerType_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int EquipmentOwnerType_Insert(ObjectParameter equipmentOwnerTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EquipmentOwnerType_Insert", equipmentOwnerTypeId, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int EquipmentOwnerType_Update(Nullable<int> equipmentOwnerTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var equipmentOwnerTypeIdParameter = equipmentOwnerTypeId.HasValue ?
                new ObjectParameter("EquipmentOwnerTypeId", equipmentOwnerTypeId) :
                new ObjectParameter("EquipmentOwnerTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EquipmentOwnerType_Update", equipmentOwnerTypeIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int FrequencyType_Delete(Nullable<int> frequencyTypeId)
        {
            var frequencyTypeIdParameter = frequencyTypeId.HasValue ?
                new ObjectParameter("FrequencyTypeId", frequencyTypeId) :
                new ObjectParameter("FrequencyTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FrequencyType_Delete", frequencyTypeIdParameter);
        }
    
        public virtual ObjectResult<FrequencyType_Find_Result> FrequencyType_Find(Nullable<bool> searchUsinGOR, Nullable<int> frequencyTypeId, string code, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var frequencyTypeIdParameter = frequencyTypeId.HasValue ?
                new ObjectParameter("FrequencyTypeId", frequencyTypeId) :
                new ObjectParameter("FrequencyTypeId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FrequencyType_Find_Result>("FrequencyType_Find", searchUsinGORParameter, frequencyTypeIdParameter, codeParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<FrequencyType_Get_List_Result> FrequencyType_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FrequencyType_Get_List_Result>("FrequencyType_Get_List");
        }
    
        public virtual ObjectResult<FrequencyType_GetByCode_Result> FrequencyType_GetByCode(string code)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FrequencyType_GetByCode_Result>("FrequencyType_GetByCode", codeParameter);
        }
    
        public virtual ObjectResult<FrequencyType_GetByFrequencyTypeId_Result> FrequencyType_GetByFrequencyTypeId(Nullable<int> frequencyTypeId)
        {
            var frequencyTypeIdParameter = frequencyTypeId.HasValue ?
                new ObjectParameter("FrequencyTypeId", frequencyTypeId) :
                new ObjectParameter("FrequencyTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FrequencyType_GetByFrequencyTypeId_Result>("FrequencyType_GetByFrequencyTypeId", frequencyTypeIdParameter);
        }
    
        public virtual ObjectResult<FrequencyType_GetByName_Result> FrequencyType_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FrequencyType_GetByName_Result>("FrequencyType_GetByName", nameParameter);
        }
    
        public virtual int FrequencyType_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FrequencyType_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int FrequencyType_Insert(ObjectParameter frequencyTypeId, string code, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FrequencyType_Insert", frequencyTypeId, codeParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int FrequencyType_Update(Nullable<int> frequencyTypeId, string code, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var frequencyTypeIdParameter = frequencyTypeId.HasValue ?
                new ObjectParameter("FrequencyTypeId", frequencyTypeId) :
                new ObjectParameter("FrequencyTypeId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FrequencyType_Update", frequencyTypeIdParameter, codeParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int GeneralTime_Delete(Nullable<long> generalTimeId)
        {
            var generalTimeIdParameter = generalTimeId.HasValue ?
                new ObjectParameter("GeneralTimeId", generalTimeId) :
                new ObjectParameter("GeneralTimeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeneralTime_Delete", generalTimeIdParameter);
        }
    
        public virtual ObjectResult<GeneralTime_Find_Result> GeneralTime_Find(Nullable<bool> searchUsinGOR, Nullable<long> generalTimeId, Nullable<long> workEventId, Nullable<int> driverId, Nullable<int> equipmentId, Nullable<System.DateTime> startTime, Nullable<double> hours, Nullable<bool> isCheckRun, Nullable<System.DateTime> checkRunDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var generalTimeIdParameter = generalTimeId.HasValue ?
                new ObjectParameter("GeneralTimeId", generalTimeId) :
                new ObjectParameter("GeneralTimeId", typeof(long));
    
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            var driverIdParameter = driverId.HasValue ?
                new ObjectParameter("DriverId", driverId) :
                new ObjectParameter("DriverId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var hoursParameter = hours.HasValue ?
                new ObjectParameter("Hours", hours) :
                new ObjectParameter("Hours", typeof(double));
    
            var isCheckRunParameter = isCheckRun.HasValue ?
                new ObjectParameter("IsCheckRun", isCheckRun) :
                new ObjectParameter("IsCheckRun", typeof(bool));
    
            var checkRunDateParameter = checkRunDate.HasValue ?
                new ObjectParameter("CheckRunDate", checkRunDate) :
                new ObjectParameter("CheckRunDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralTime_Find_Result>("GeneralTime_Find", searchUsinGORParameter, generalTimeIdParameter, workEventIdParameter, driverIdParameter, equipmentIdParameter, startTimeParameter, hoursParameter, isCheckRunParameter, checkRunDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<GeneralTime_Get_List_Result> GeneralTime_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralTime_Get_List_Result>("GeneralTime_Get_List");
        }
    
        public virtual ObjectResult<GeneralTime_GetByDriverId_Result> GeneralTime_GetByDriverId(Nullable<int> driverId)
        {
            var driverIdParameter = driverId.HasValue ?
                new ObjectParameter("DriverId", driverId) :
                new ObjectParameter("DriverId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralTime_GetByDriverId_Result>("GeneralTime_GetByDriverId", driverIdParameter);
        }
    
        public virtual ObjectResult<GeneralTime_GetByEquipmentId_Result> GeneralTime_GetByEquipmentId(Nullable<int> equipmentId)
        {
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralTime_GetByEquipmentId_Result>("GeneralTime_GetByEquipmentId", equipmentIdParameter);
        }
    
        public virtual ObjectResult<GeneralTime_GetByGeneralTimeId_Result> GeneralTime_GetByGeneralTimeId(Nullable<long> generalTimeId)
        {
            var generalTimeIdParameter = generalTimeId.HasValue ?
                new ObjectParameter("GeneralTimeId", generalTimeId) :
                new ObjectParameter("GeneralTimeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralTime_GetByGeneralTimeId_Result>("GeneralTime_GetByGeneralTimeId", generalTimeIdParameter);
        }
    
        public virtual ObjectResult<GeneralTime_GetByWorkEventId_Result> GeneralTime_GetByWorkEventId(Nullable<long> workEventId)
        {
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralTime_GetByWorkEventId_Result>("GeneralTime_GetByWorkEventId", workEventIdParameter);
        }
    
        public virtual int GeneralTime_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeneralTime_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int GeneralTime_Insert(ObjectParameter generalTimeId, Nullable<long> workEventId, Nullable<int> driverId, Nullable<int> equipmentId, Nullable<System.DateTime> startTime, Nullable<double> hours, Nullable<bool> isCheckRun, Nullable<System.DateTime> checkRunDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            var driverIdParameter = driverId.HasValue ?
                new ObjectParameter("DriverId", driverId) :
                new ObjectParameter("DriverId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var hoursParameter = hours.HasValue ?
                new ObjectParameter("Hours", hours) :
                new ObjectParameter("Hours", typeof(double));
    
            var isCheckRunParameter = isCheckRun.HasValue ?
                new ObjectParameter("IsCheckRun", isCheckRun) :
                new ObjectParameter("IsCheckRun", typeof(bool));
    
            var checkRunDateParameter = checkRunDate.HasValue ?
                new ObjectParameter("CheckRunDate", checkRunDate) :
                new ObjectParameter("CheckRunDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeneralTime_Insert", generalTimeId, workEventIdParameter, driverIdParameter, equipmentIdParameter, startTimeParameter, hoursParameter, isCheckRunParameter, checkRunDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int GeneralTime_Update(Nullable<long> generalTimeId, Nullable<long> workEventId, Nullable<int> driverId, Nullable<int> equipmentId, Nullable<System.DateTime> startTime, Nullable<double> hours, Nullable<bool> isCheckRun, Nullable<System.DateTime> checkRunDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var generalTimeIdParameter = generalTimeId.HasValue ?
                new ObjectParameter("GeneralTimeId", generalTimeId) :
                new ObjectParameter("GeneralTimeId", typeof(long));
    
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            var driverIdParameter = driverId.HasValue ?
                new ObjectParameter("DriverId", driverId) :
                new ObjectParameter("DriverId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var hoursParameter = hours.HasValue ?
                new ObjectParameter("Hours", hours) :
                new ObjectParameter("Hours", typeof(double));
    
            var isCheckRunParameter = isCheckRun.HasValue ?
                new ObjectParameter("IsCheckRun", isCheckRun) :
                new ObjectParameter("IsCheckRun", typeof(bool));
    
            var checkRunDateParameter = checkRunDate.HasValue ?
                new ObjectParameter("CheckRunDate", checkRunDate) :
                new ObjectParameter("CheckRunDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeneralTime_Update", generalTimeIdParameter, workEventIdParameter, driverIdParameter, equipmentIdParameter, startTimeParameter, hoursParameter, isCheckRunParameter, checkRunDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Inventory_Delete(Nullable<int> inventoryId)
        {
            var inventoryIdParameter = inventoryId.HasValue ?
                new ObjectParameter("InventoryId", inventoryId) :
                new ObjectParameter("InventoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Inventory_Delete", inventoryIdParameter);
        }
    
        public virtual ObjectResult<Inventory_Find_Result> Inventory_Find(Nullable<bool> searchUsinGOR, Nullable<int> inventoryId, Nullable<int> inventoryTypeId, Nullable<double> quantity, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var inventoryIdParameter = inventoryId.HasValue ?
                new ObjectParameter("InventoryId", inventoryId) :
                new ObjectParameter("InventoryId", typeof(int));
    
            var inventoryTypeIdParameter = inventoryTypeId.HasValue ?
                new ObjectParameter("InventoryTypeId", inventoryTypeId) :
                new ObjectParameter("InventoryTypeId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(double));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Inventory_Find_Result>("Inventory_Find", searchUsinGORParameter, inventoryIdParameter, inventoryTypeIdParameter, quantityParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<Inventory_Get_List_Result> Inventory_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Inventory_Get_List_Result>("Inventory_Get_List");
        }
    
        public virtual ObjectResult<Inventory_GetByInventoryId_Result> Inventory_GetByInventoryId(Nullable<int> inventoryId)
        {
            var inventoryIdParameter = inventoryId.HasValue ?
                new ObjectParameter("InventoryId", inventoryId) :
                new ObjectParameter("InventoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Inventory_GetByInventoryId_Result>("Inventory_GetByInventoryId", inventoryIdParameter);
        }
    
        public virtual ObjectResult<Inventory_GetByInventoryTypeId_Result> Inventory_GetByInventoryTypeId(Nullable<int> inventoryTypeId)
        {
            var inventoryTypeIdParameter = inventoryTypeId.HasValue ?
                new ObjectParameter("InventoryTypeId", inventoryTypeId) :
                new ObjectParameter("InventoryTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Inventory_GetByInventoryTypeId_Result>("Inventory_GetByInventoryTypeId", inventoryTypeIdParameter);
        }
    
        public virtual int Inventory_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Inventory_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int Inventory_Insert(ObjectParameter inventoryId, Nullable<int> inventoryTypeId, Nullable<double> quantity, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var inventoryTypeIdParameter = inventoryTypeId.HasValue ?
                new ObjectParameter("InventoryTypeId", inventoryTypeId) :
                new ObjectParameter("InventoryTypeId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(double));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Inventory_Insert", inventoryId, inventoryTypeIdParameter, quantityParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Inventory_Update(Nullable<int> inventoryId, Nullable<int> inventoryTypeId, Nullable<double> quantity, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var inventoryIdParameter = inventoryId.HasValue ?
                new ObjectParameter("InventoryId", inventoryId) :
                new ObjectParameter("InventoryId", typeof(int));
    
            var inventoryTypeIdParameter = inventoryTypeId.HasValue ?
                new ObjectParameter("InventoryTypeId", inventoryTypeId) :
                new ObjectParameter("InventoryTypeId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(double));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Inventory_Update", inventoryIdParameter, inventoryTypeIdParameter, quantityParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int InventoryTransaction_Delete(Nullable<int> inventoryTransactionId)
        {
            var inventoryTransactionIdParameter = inventoryTransactionId.HasValue ?
                new ObjectParameter("InventoryTransactionId", inventoryTransactionId) :
                new ObjectParameter("InventoryTransactionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoryTransaction_Delete", inventoryTransactionIdParameter);
        }
    
        public virtual ObjectResult<InventoryTransaction_Find_Result> InventoryTransaction_Find(Nullable<bool> searchUsinGOR, Nullable<int> inventoryTransactionId, Nullable<int> inventoryTypeId, Nullable<double> quantity, Nullable<System.DateTime> transactionDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var inventoryTransactionIdParameter = inventoryTransactionId.HasValue ?
                new ObjectParameter("InventoryTransactionId", inventoryTransactionId) :
                new ObjectParameter("InventoryTransactionId", typeof(int));
    
            var inventoryTypeIdParameter = inventoryTypeId.HasValue ?
                new ObjectParameter("InventoryTypeId", inventoryTypeId) :
                new ObjectParameter("InventoryTypeId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(double));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InventoryTransaction_Find_Result>("InventoryTransaction_Find", searchUsinGORParameter, inventoryTransactionIdParameter, inventoryTypeIdParameter, quantityParameter, transactionDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<InventoryTransaction_Get_List_Result> InventoryTransaction_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InventoryTransaction_Get_List_Result>("InventoryTransaction_Get_List");
        }
    
        public virtual ObjectResult<InventoryTransaction_GetByInventoryTransactionId_Result> InventoryTransaction_GetByInventoryTransactionId(Nullable<int> inventoryTransactionId)
        {
            var inventoryTransactionIdParameter = inventoryTransactionId.HasValue ?
                new ObjectParameter("InventoryTransactionId", inventoryTransactionId) :
                new ObjectParameter("InventoryTransactionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InventoryTransaction_GetByInventoryTransactionId_Result>("InventoryTransaction_GetByInventoryTransactionId", inventoryTransactionIdParameter);
        }
    
        public virtual ObjectResult<InventoryTransaction_GetByInventoryTypeId_Result> InventoryTransaction_GetByInventoryTypeId(Nullable<int> inventoryTypeId)
        {
            var inventoryTypeIdParameter = inventoryTypeId.HasValue ?
                new ObjectParameter("InventoryTypeId", inventoryTypeId) :
                new ObjectParameter("InventoryTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InventoryTransaction_GetByInventoryTypeId_Result>("InventoryTransaction_GetByInventoryTypeId", inventoryTypeIdParameter);
        }
    
        public virtual int InventoryTransaction_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoryTransaction_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int InventoryTransaction_Insert(ObjectParameter inventoryTransactionId, Nullable<int> inventoryTypeId, Nullable<double> quantity, Nullable<System.DateTime> transactionDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var inventoryTypeIdParameter = inventoryTypeId.HasValue ?
                new ObjectParameter("InventoryTypeId", inventoryTypeId) :
                new ObjectParameter("InventoryTypeId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(double));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoryTransaction_Insert", inventoryTransactionId, inventoryTypeIdParameter, quantityParameter, transactionDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int InventoryTransaction_Update(Nullable<int> inventoryTransactionId, Nullable<int> inventoryTypeId, Nullable<double> quantity, Nullable<System.DateTime> transactionDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var inventoryTransactionIdParameter = inventoryTransactionId.HasValue ?
                new ObjectParameter("InventoryTransactionId", inventoryTransactionId) :
                new ObjectParameter("InventoryTransactionId", typeof(int));
    
            var inventoryTypeIdParameter = inventoryTypeId.HasValue ?
                new ObjectParameter("InventoryTypeId", inventoryTypeId) :
                new ObjectParameter("InventoryTypeId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(double));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoryTransaction_Update", inventoryTransactionIdParameter, inventoryTypeIdParameter, quantityParameter, transactionDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int InventoryType_Delete(Nullable<int> inventoryTypeId)
        {
            var inventoryTypeIdParameter = inventoryTypeId.HasValue ?
                new ObjectParameter("InventoryTypeId", inventoryTypeId) :
                new ObjectParameter("InventoryTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoryType_Delete", inventoryTypeIdParameter);
        }
    
        public virtual ObjectResult<InventoryType_Find_Result> InventoryType_Find(Nullable<bool> searchUsinGOR, Nullable<int> inventoryTypeId, string name, string description, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var inventoryTypeIdParameter = inventoryTypeId.HasValue ?
                new ObjectParameter("InventoryTypeId", inventoryTypeId) :
                new ObjectParameter("InventoryTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InventoryType_Find_Result>("InventoryType_Find", searchUsinGORParameter, inventoryTypeIdParameter, nameParameter, descriptionParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<InventoryType_Get_List_Result> InventoryType_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InventoryType_Get_List_Result>("InventoryType_Get_List");
        }
    
        public virtual ObjectResult<InventoryType_GetByInventoryTypeId_Result> InventoryType_GetByInventoryTypeId(Nullable<int> inventoryTypeId)
        {
            var inventoryTypeIdParameter = inventoryTypeId.HasValue ?
                new ObjectParameter("InventoryTypeId", inventoryTypeId) :
                new ObjectParameter("InventoryTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InventoryType_GetByInventoryTypeId_Result>("InventoryType_GetByInventoryTypeId", inventoryTypeIdParameter);
        }
    
        public virtual ObjectResult<InventoryType_GetByName_Result> InventoryType_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InventoryType_GetByName_Result>("InventoryType_GetByName", nameParameter);
        }
    
        public virtual int InventoryType_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoryType_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int InventoryType_Insert(ObjectParameter inventoryTypeId, string name, string description, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoryType_Insert", inventoryTypeId, nameParameter, descriptionParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int InventoryType_Update(Nullable<int> inventoryTypeId, string name, string description, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var inventoryTypeIdParameter = inventoryTypeId.HasValue ?
                new ObjectParameter("InventoryTypeId", inventoryTypeId) :
                new ObjectParameter("InventoryTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoryType_Update", inventoryTypeIdParameter, nameParameter, descriptionParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int InvoiceDeliveryType_Delete(Nullable<int> invoiceDeliveryTypeId)
        {
            var invoiceDeliveryTypeIdParameter = invoiceDeliveryTypeId.HasValue ?
                new ObjectParameter("InvoiceDeliveryTypeId", invoiceDeliveryTypeId) :
                new ObjectParameter("InvoiceDeliveryTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvoiceDeliveryType_Delete", invoiceDeliveryTypeIdParameter);
        }
    
        public virtual ObjectResult<InvoiceDeliveryType_Find_Result> InvoiceDeliveryType_Find(Nullable<bool> searchUsinGOR, Nullable<int> invoiceDeliveryTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var invoiceDeliveryTypeIdParameter = invoiceDeliveryTypeId.HasValue ?
                new ObjectParameter("InvoiceDeliveryTypeId", invoiceDeliveryTypeId) :
                new ObjectParameter("InvoiceDeliveryTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvoiceDeliveryType_Find_Result>("InvoiceDeliveryType_Find", searchUsinGORParameter, invoiceDeliveryTypeIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<InvoiceDeliveryType_Get_List_Result> InvoiceDeliveryType_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvoiceDeliveryType_Get_List_Result>("InvoiceDeliveryType_Get_List");
        }
    
        public virtual ObjectResult<InvoiceDeliveryType_GetByInvoiceDeliveryTypeId_Result> InvoiceDeliveryType_GetByInvoiceDeliveryTypeId(Nullable<int> invoiceDeliveryTypeId)
        {
            var invoiceDeliveryTypeIdParameter = invoiceDeliveryTypeId.HasValue ?
                new ObjectParameter("InvoiceDeliveryTypeId", invoiceDeliveryTypeId) :
                new ObjectParameter("InvoiceDeliveryTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvoiceDeliveryType_GetByInvoiceDeliveryTypeId_Result>("InvoiceDeliveryType_GetByInvoiceDeliveryTypeId", invoiceDeliveryTypeIdParameter);
        }
    
        public virtual ObjectResult<InvoiceDeliveryType_GetByName_Result> InvoiceDeliveryType_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvoiceDeliveryType_GetByName_Result>("InvoiceDeliveryType_GetByName", nameParameter);
        }
    
        public virtual int InvoiceDeliveryType_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvoiceDeliveryType_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int InvoiceDeliveryType_Insert(ObjectParameter invoiceDeliveryTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvoiceDeliveryType_Insert", invoiceDeliveryTypeId, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int InvoiceDeliveryType_Update(Nullable<int> invoiceDeliveryTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var invoiceDeliveryTypeIdParameter = invoiceDeliveryTypeId.HasValue ?
                new ObjectParameter("InvoiceDeliveryTypeId", invoiceDeliveryTypeId) :
                new ObjectParameter("InvoiceDeliveryTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvoiceDeliveryType_Update", invoiceDeliveryTypeIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Job_Delete(Nullable<long> jobId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Job_Delete", jobIdParameter);
        }
    
        public virtual ObjectResult<Job_Find_Result> Job_Find(Nullable<bool> searchUsinGOR, Nullable<long> jobId, Nullable<long> workEventId, Nullable<int> tripRouteId, Nullable<int> vendorRouteId, Nullable<int> vendorPropertyId, Nullable<int> stopOrder, Nullable<int> jobStopOrder, Nullable<bool> isSelectedByFilter, Nullable<bool> isScheduled, Nullable<bool> isPublished, Nullable<bool> isHourly, Nullable<bool> isFlaggedForReview, Nullable<int> propertyId, string propertyName, Nullable<int> propertyAddressId, Nullable<int> salesRepUserId, Nullable<int> operationsUserId, Nullable<int> propertyWorkTypeId, Nullable<int> defaultPropertyFlatRateId, Nullable<int> jobPropertyFlatRateId, Nullable<bool> jobIsTonnage, Nullable<double> jobFixedTonnage, string jobServiceName, Nullable<bool> jobRequiresWeighInOut, Nullable<long> lotSaltTimeId, Nullable<int> actualDriverVendorWorkerId, Nullable<int> actualTruckId, Nullable<System.DateTime> actualClockIn, Nullable<System.DateTime> actualClockOut, Nullable<double> actualWeightIn, Nullable<double> actualWeightOut, Nullable<int> actualPropertyFlatRateId, Nullable<double> actualTonnage, Nullable<int> tripStatusId, string comments, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            var tripRouteIdParameter = tripRouteId.HasValue ?
                new ObjectParameter("TripRouteId", tripRouteId) :
                new ObjectParameter("TripRouteId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var stopOrderParameter = stopOrder.HasValue ?
                new ObjectParameter("StopOrder", stopOrder) :
                new ObjectParameter("StopOrder", typeof(int));
    
            var jobStopOrderParameter = jobStopOrder.HasValue ?
                new ObjectParameter("JobStopOrder", jobStopOrder) :
                new ObjectParameter("JobStopOrder", typeof(int));
    
            var isSelectedByFilterParameter = isSelectedByFilter.HasValue ?
                new ObjectParameter("IsSelectedByFilter", isSelectedByFilter) :
                new ObjectParameter("IsSelectedByFilter", typeof(bool));
    
            var isScheduledParameter = isScheduled.HasValue ?
                new ObjectParameter("IsScheduled", isScheduled) :
                new ObjectParameter("IsScheduled", typeof(bool));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("IsPublished", isPublished) :
                new ObjectParameter("IsPublished", typeof(bool));
    
            var isHourlyParameter = isHourly.HasValue ?
                new ObjectParameter("IsHourly", isHourly) :
                new ObjectParameter("IsHourly", typeof(bool));
    
            var isFlaggedForReviewParameter = isFlaggedForReview.HasValue ?
                new ObjectParameter("IsFlaggedForReview", isFlaggedForReview) :
                new ObjectParameter("IsFlaggedForReview", typeof(bool));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var propertyAddressIdParameter = propertyAddressId.HasValue ?
                new ObjectParameter("PropertyAddressId", propertyAddressId) :
                new ObjectParameter("PropertyAddressId", typeof(int));
    
            var salesRepUserIdParameter = salesRepUserId.HasValue ?
                new ObjectParameter("SalesRepUserId", salesRepUserId) :
                new ObjectParameter("SalesRepUserId", typeof(int));
    
            var operationsUserIdParameter = operationsUserId.HasValue ?
                new ObjectParameter("OperationsUserId", operationsUserId) :
                new ObjectParameter("OperationsUserId", typeof(int));
    
            var propertyWorkTypeIdParameter = propertyWorkTypeId.HasValue ?
                new ObjectParameter("PropertyWorkTypeId", propertyWorkTypeId) :
                new ObjectParameter("PropertyWorkTypeId", typeof(int));
    
            var defaultPropertyFlatRateIdParameter = defaultPropertyFlatRateId.HasValue ?
                new ObjectParameter("DefaultPropertyFlatRateId", defaultPropertyFlatRateId) :
                new ObjectParameter("DefaultPropertyFlatRateId", typeof(int));
    
            var jobPropertyFlatRateIdParameter = jobPropertyFlatRateId.HasValue ?
                new ObjectParameter("JobPropertyFlatRateId", jobPropertyFlatRateId) :
                new ObjectParameter("JobPropertyFlatRateId", typeof(int));
    
            var jobIsTonnageParameter = jobIsTonnage.HasValue ?
                new ObjectParameter("JobIsTonnage", jobIsTonnage) :
                new ObjectParameter("JobIsTonnage", typeof(bool));
    
            var jobFixedTonnageParameter = jobFixedTonnage.HasValue ?
                new ObjectParameter("JobFixedTonnage", jobFixedTonnage) :
                new ObjectParameter("JobFixedTonnage", typeof(double));
    
            var jobServiceNameParameter = jobServiceName != null ?
                new ObjectParameter("JobServiceName", jobServiceName) :
                new ObjectParameter("JobServiceName", typeof(string));
    
            var jobRequiresWeighInOutParameter = jobRequiresWeighInOut.HasValue ?
                new ObjectParameter("JobRequiresWeighInOut", jobRequiresWeighInOut) :
                new ObjectParameter("JobRequiresWeighInOut", typeof(bool));
    
            var lotSaltTimeIdParameter = lotSaltTimeId.HasValue ?
                new ObjectParameter("LotSaltTimeId", lotSaltTimeId) :
                new ObjectParameter("LotSaltTimeId", typeof(long));
    
            var actualDriverVendorWorkerIdParameter = actualDriverVendorWorkerId.HasValue ?
                new ObjectParameter("ActualDriverVendorWorkerId", actualDriverVendorWorkerId) :
                new ObjectParameter("ActualDriverVendorWorkerId", typeof(int));
    
            var actualTruckIdParameter = actualTruckId.HasValue ?
                new ObjectParameter("ActualTruckId", actualTruckId) :
                new ObjectParameter("ActualTruckId", typeof(int));
    
            var actualClockInParameter = actualClockIn.HasValue ?
                new ObjectParameter("ActualClockIn", actualClockIn) :
                new ObjectParameter("ActualClockIn", typeof(System.DateTime));
    
            var actualClockOutParameter = actualClockOut.HasValue ?
                new ObjectParameter("ActualClockOut", actualClockOut) :
                new ObjectParameter("ActualClockOut", typeof(System.DateTime));
    
            var actualWeightInParameter = actualWeightIn.HasValue ?
                new ObjectParameter("ActualWeightIn", actualWeightIn) :
                new ObjectParameter("ActualWeightIn", typeof(double));
    
            var actualWeightOutParameter = actualWeightOut.HasValue ?
                new ObjectParameter("ActualWeightOut", actualWeightOut) :
                new ObjectParameter("ActualWeightOut", typeof(double));
    
            var actualPropertyFlatRateIdParameter = actualPropertyFlatRateId.HasValue ?
                new ObjectParameter("ActualPropertyFlatRateId", actualPropertyFlatRateId) :
                new ObjectParameter("ActualPropertyFlatRateId", typeof(int));
    
            var actualTonnageParameter = actualTonnage.HasValue ?
                new ObjectParameter("ActualTonnage", actualTonnage) :
                new ObjectParameter("ActualTonnage", typeof(double));
    
            var tripStatusIdParameter = tripStatusId.HasValue ?
                new ObjectParameter("TripStatusId", tripStatusId) :
                new ObjectParameter("TripStatusId", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_Find_Result>("Job_Find", searchUsinGORParameter, jobIdParameter, workEventIdParameter, tripRouteIdParameter, vendorRouteIdParameter, vendorPropertyIdParameter, stopOrderParameter, jobStopOrderParameter, isSelectedByFilterParameter, isScheduledParameter, isPublishedParameter, isHourlyParameter, isFlaggedForReviewParameter, propertyIdParameter, propertyNameParameter, propertyAddressIdParameter, salesRepUserIdParameter, operationsUserIdParameter, propertyWorkTypeIdParameter, defaultPropertyFlatRateIdParameter, jobPropertyFlatRateIdParameter, jobIsTonnageParameter, jobFixedTonnageParameter, jobServiceNameParameter, jobRequiresWeighInOutParameter, lotSaltTimeIdParameter, actualDriverVendorWorkerIdParameter, actualTruckIdParameter, actualClockInParameter, actualClockOutParameter, actualWeightInParameter, actualWeightOutParameter, actualPropertyFlatRateIdParameter, actualTonnageParameter, tripStatusIdParameter, commentsParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<Job_Get_List_Result> Job_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_Get_List_Result>("Job_Get_List");
        }
    
        public virtual ObjectResult<Job_GetByActualDriverVendorWorkerId_Result> Job_GetByActualDriverVendorWorkerId(Nullable<int> actualDriverVendorWorkerId)
        {
            var actualDriverVendorWorkerIdParameter = actualDriverVendorWorkerId.HasValue ?
                new ObjectParameter("ActualDriverVendorWorkerId", actualDriverVendorWorkerId) :
                new ObjectParameter("ActualDriverVendorWorkerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetByActualDriverVendorWorkerId_Result>("Job_GetByActualDriverVendorWorkerId", actualDriverVendorWorkerIdParameter);
        }
    
        public virtual ObjectResult<Job_GetByActualPropertyFlatRateId_Result> Job_GetByActualPropertyFlatRateId(Nullable<int> actualPropertyFlatRateId)
        {
            var actualPropertyFlatRateIdParameter = actualPropertyFlatRateId.HasValue ?
                new ObjectParameter("ActualPropertyFlatRateId", actualPropertyFlatRateId) :
                new ObjectParameter("ActualPropertyFlatRateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetByActualPropertyFlatRateId_Result>("Job_GetByActualPropertyFlatRateId", actualPropertyFlatRateIdParameter);
        }
    
        public virtual ObjectResult<Job_GetByDefaultPropertyFlatRateId_Result> Job_GetByDefaultPropertyFlatRateId(Nullable<int> defaultPropertyFlatRateId)
        {
            var defaultPropertyFlatRateIdParameter = defaultPropertyFlatRateId.HasValue ?
                new ObjectParameter("DefaultPropertyFlatRateId", defaultPropertyFlatRateId) :
                new ObjectParameter("DefaultPropertyFlatRateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetByDefaultPropertyFlatRateId_Result>("Job_GetByDefaultPropertyFlatRateId", defaultPropertyFlatRateIdParameter);
        }
    
        public virtual ObjectResult<Job_GetByJobId_Result> Job_GetByJobId(Nullable<long> jobId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetByJobId_Result>("Job_GetByJobId", jobIdParameter);
        }
    
        public virtual ObjectResult<Job_GetByJobPropertyFlatRateId_Result> Job_GetByJobPropertyFlatRateId(Nullable<int> jobPropertyFlatRateId)
        {
            var jobPropertyFlatRateIdParameter = jobPropertyFlatRateId.HasValue ?
                new ObjectParameter("JobPropertyFlatRateId", jobPropertyFlatRateId) :
                new ObjectParameter("JobPropertyFlatRateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetByJobPropertyFlatRateId_Result>("Job_GetByJobPropertyFlatRateId", jobPropertyFlatRateIdParameter);
        }
    
        public virtual ObjectResult<Job_GetByLotSaltTimeId_Result> Job_GetByLotSaltTimeId(Nullable<long> lotSaltTimeId)
        {
            var lotSaltTimeIdParameter = lotSaltTimeId.HasValue ?
                new ObjectParameter("LotSaltTimeId", lotSaltTimeId) :
                new ObjectParameter("LotSaltTimeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetByLotSaltTimeId_Result>("Job_GetByLotSaltTimeId", lotSaltTimeIdParameter);
        }
    
        public virtual ObjectResult<Job_GetByOperationsUserId_Result> Job_GetByOperationsUserId(Nullable<int> operationsUserId)
        {
            var operationsUserIdParameter = operationsUserId.HasValue ?
                new ObjectParameter("OperationsUserId", operationsUserId) :
                new ObjectParameter("OperationsUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetByOperationsUserId_Result>("Job_GetByOperationsUserId", operationsUserIdParameter);
        }
    
        public virtual ObjectResult<Job_GetByPropertyAddressId_Result> Job_GetByPropertyAddressId(Nullable<int> propertyAddressId)
        {
            var propertyAddressIdParameter = propertyAddressId.HasValue ?
                new ObjectParameter("PropertyAddressId", propertyAddressId) :
                new ObjectParameter("PropertyAddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetByPropertyAddressId_Result>("Job_GetByPropertyAddressId", propertyAddressIdParameter);
        }
    
        public virtual ObjectResult<Job_GetByPropertyId_Result> Job_GetByPropertyId(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetByPropertyId_Result>("Job_GetByPropertyId", propertyIdParameter);
        }
    
        public virtual ObjectResult<Job_GetByPropertyWorkTypeId_Result> Job_GetByPropertyWorkTypeId(Nullable<int> propertyWorkTypeId)
        {
            var propertyWorkTypeIdParameter = propertyWorkTypeId.HasValue ?
                new ObjectParameter("PropertyWorkTypeId", propertyWorkTypeId) :
                new ObjectParameter("PropertyWorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetByPropertyWorkTypeId_Result>("Job_GetByPropertyWorkTypeId", propertyWorkTypeIdParameter);
        }
    
        public virtual ObjectResult<Job_GetBySalesRepUserId_Result> Job_GetBySalesRepUserId(Nullable<int> salesRepUserId)
        {
            var salesRepUserIdParameter = salesRepUserId.HasValue ?
                new ObjectParameter("SalesRepUserId", salesRepUserId) :
                new ObjectParameter("SalesRepUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetBySalesRepUserId_Result>("Job_GetBySalesRepUserId", salesRepUserIdParameter);
        }
    
        public virtual ObjectResult<Job_GetByTripRouteId_Result> Job_GetByTripRouteId(Nullable<int> tripRouteId)
        {
            var tripRouteIdParameter = tripRouteId.HasValue ?
                new ObjectParameter("TripRouteId", tripRouteId) :
                new ObjectParameter("TripRouteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetByTripRouteId_Result>("Job_GetByTripRouteId", tripRouteIdParameter);
        }
    
        public virtual ObjectResult<Job_GetByTripStatusId_Result> Job_GetByTripStatusId(Nullable<int> tripStatusId)
        {
            var tripStatusIdParameter = tripStatusId.HasValue ?
                new ObjectParameter("TripStatusId", tripStatusId) :
                new ObjectParameter("TripStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetByTripStatusId_Result>("Job_GetByTripStatusId", tripStatusIdParameter);
        }
    
        public virtual ObjectResult<Job_GetByVendorPropertyId_Result> Job_GetByVendorPropertyId(Nullable<int> vendorPropertyId)
        {
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetByVendorPropertyId_Result>("Job_GetByVendorPropertyId", vendorPropertyIdParameter);
        }
    
        public virtual ObjectResult<Job_GetByVendorRouteId_Result> Job_GetByVendorRouteId(Nullable<int> vendorRouteId)
        {
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetByVendorRouteId_Result>("Job_GetByVendorRouteId", vendorRouteIdParameter);
        }
    
        public virtual ObjectResult<Job_GetByWorkEventId_Result> Job_GetByWorkEventId(Nullable<long> workEventId)
        {
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetByWorkEventId_Result>("Job_GetByWorkEventId", workEventIdParameter);
        }
    
        public virtual int Job_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Job_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int Job_Insert(ObjectParameter jobId, Nullable<long> workEventId, Nullable<int> tripRouteId, Nullable<int> vendorRouteId, Nullable<int> vendorPropertyId, Nullable<int> stopOrder, Nullable<int> jobStopOrder, Nullable<bool> isSelectedByFilter, Nullable<bool> isScheduled, Nullable<bool> isPublished, Nullable<bool> isHourly, Nullable<bool> isFlaggedForReview, Nullable<int> propertyId, string propertyName, Nullable<int> propertyAddressId, Nullable<int> salesRepUserId, Nullable<int> operationsUserId, Nullable<int> propertyWorkTypeId, Nullable<int> defaultPropertyFlatRateId, Nullable<int> jobPropertyFlatRateId, Nullable<bool> jobIsTonnage, Nullable<double> jobFixedTonnage, string jobServiceName, Nullable<bool> jobRequiresWeighInOut, Nullable<long> lotSaltTimeId, Nullable<int> actualDriverVendorWorkerId, Nullable<int> actualTruckId, Nullable<System.DateTime> actualClockIn, Nullable<System.DateTime> actualClockOut, Nullable<double> actualWeightIn, Nullable<double> actualWeightOut, Nullable<int> actualPropertyFlatRateId, Nullable<double> actualTonnage, Nullable<int> tripStatusId, string comments, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            var tripRouteIdParameter = tripRouteId.HasValue ?
                new ObjectParameter("TripRouteId", tripRouteId) :
                new ObjectParameter("TripRouteId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var stopOrderParameter = stopOrder.HasValue ?
                new ObjectParameter("StopOrder", stopOrder) :
                new ObjectParameter("StopOrder", typeof(int));
    
            var jobStopOrderParameter = jobStopOrder.HasValue ?
                new ObjectParameter("JobStopOrder", jobStopOrder) :
                new ObjectParameter("JobStopOrder", typeof(int));
    
            var isSelectedByFilterParameter = isSelectedByFilter.HasValue ?
                new ObjectParameter("IsSelectedByFilter", isSelectedByFilter) :
                new ObjectParameter("IsSelectedByFilter", typeof(bool));
    
            var isScheduledParameter = isScheduled.HasValue ?
                new ObjectParameter("IsScheduled", isScheduled) :
                new ObjectParameter("IsScheduled", typeof(bool));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("IsPublished", isPublished) :
                new ObjectParameter("IsPublished", typeof(bool));
    
            var isHourlyParameter = isHourly.HasValue ?
                new ObjectParameter("IsHourly", isHourly) :
                new ObjectParameter("IsHourly", typeof(bool));
    
            var isFlaggedForReviewParameter = isFlaggedForReview.HasValue ?
                new ObjectParameter("IsFlaggedForReview", isFlaggedForReview) :
                new ObjectParameter("IsFlaggedForReview", typeof(bool));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var propertyAddressIdParameter = propertyAddressId.HasValue ?
                new ObjectParameter("PropertyAddressId", propertyAddressId) :
                new ObjectParameter("PropertyAddressId", typeof(int));
    
            var salesRepUserIdParameter = salesRepUserId.HasValue ?
                new ObjectParameter("SalesRepUserId", salesRepUserId) :
                new ObjectParameter("SalesRepUserId", typeof(int));
    
            var operationsUserIdParameter = operationsUserId.HasValue ?
                new ObjectParameter("OperationsUserId", operationsUserId) :
                new ObjectParameter("OperationsUserId", typeof(int));
    
            var propertyWorkTypeIdParameter = propertyWorkTypeId.HasValue ?
                new ObjectParameter("PropertyWorkTypeId", propertyWorkTypeId) :
                new ObjectParameter("PropertyWorkTypeId", typeof(int));
    
            var defaultPropertyFlatRateIdParameter = defaultPropertyFlatRateId.HasValue ?
                new ObjectParameter("DefaultPropertyFlatRateId", defaultPropertyFlatRateId) :
                new ObjectParameter("DefaultPropertyFlatRateId", typeof(int));
    
            var jobPropertyFlatRateIdParameter = jobPropertyFlatRateId.HasValue ?
                new ObjectParameter("JobPropertyFlatRateId", jobPropertyFlatRateId) :
                new ObjectParameter("JobPropertyFlatRateId", typeof(int));
    
            var jobIsTonnageParameter = jobIsTonnage.HasValue ?
                new ObjectParameter("JobIsTonnage", jobIsTonnage) :
                new ObjectParameter("JobIsTonnage", typeof(bool));
    
            var jobFixedTonnageParameter = jobFixedTonnage.HasValue ?
                new ObjectParameter("JobFixedTonnage", jobFixedTonnage) :
                new ObjectParameter("JobFixedTonnage", typeof(double));
    
            var jobServiceNameParameter = jobServiceName != null ?
                new ObjectParameter("JobServiceName", jobServiceName) :
                new ObjectParameter("JobServiceName", typeof(string));
    
            var jobRequiresWeighInOutParameter = jobRequiresWeighInOut.HasValue ?
                new ObjectParameter("JobRequiresWeighInOut", jobRequiresWeighInOut) :
                new ObjectParameter("JobRequiresWeighInOut", typeof(bool));
    
            var lotSaltTimeIdParameter = lotSaltTimeId.HasValue ?
                new ObjectParameter("LotSaltTimeId", lotSaltTimeId) :
                new ObjectParameter("LotSaltTimeId", typeof(long));
    
            var actualDriverVendorWorkerIdParameter = actualDriverVendorWorkerId.HasValue ?
                new ObjectParameter("ActualDriverVendorWorkerId", actualDriverVendorWorkerId) :
                new ObjectParameter("ActualDriverVendorWorkerId", typeof(int));
    
            var actualTruckIdParameter = actualTruckId.HasValue ?
                new ObjectParameter("ActualTruckId", actualTruckId) :
                new ObjectParameter("ActualTruckId", typeof(int));
    
            var actualClockInParameter = actualClockIn.HasValue ?
                new ObjectParameter("ActualClockIn", actualClockIn) :
                new ObjectParameter("ActualClockIn", typeof(System.DateTime));
    
            var actualClockOutParameter = actualClockOut.HasValue ?
                new ObjectParameter("ActualClockOut", actualClockOut) :
                new ObjectParameter("ActualClockOut", typeof(System.DateTime));
    
            var actualWeightInParameter = actualWeightIn.HasValue ?
                new ObjectParameter("ActualWeightIn", actualWeightIn) :
                new ObjectParameter("ActualWeightIn", typeof(double));
    
            var actualWeightOutParameter = actualWeightOut.HasValue ?
                new ObjectParameter("ActualWeightOut", actualWeightOut) :
                new ObjectParameter("ActualWeightOut", typeof(double));
    
            var actualPropertyFlatRateIdParameter = actualPropertyFlatRateId.HasValue ?
                new ObjectParameter("ActualPropertyFlatRateId", actualPropertyFlatRateId) :
                new ObjectParameter("ActualPropertyFlatRateId", typeof(int));
    
            var actualTonnageParameter = actualTonnage.HasValue ?
                new ObjectParameter("ActualTonnage", actualTonnage) :
                new ObjectParameter("ActualTonnage", typeof(double));
    
            var tripStatusIdParameter = tripStatusId.HasValue ?
                new ObjectParameter("TripStatusId", tripStatusId) :
                new ObjectParameter("TripStatusId", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Job_Insert", jobId, workEventIdParameter, tripRouteIdParameter, vendorRouteIdParameter, vendorPropertyIdParameter, stopOrderParameter, jobStopOrderParameter, isSelectedByFilterParameter, isScheduledParameter, isPublishedParameter, isHourlyParameter, isFlaggedForReviewParameter, propertyIdParameter, propertyNameParameter, propertyAddressIdParameter, salesRepUserIdParameter, operationsUserIdParameter, propertyWorkTypeIdParameter, defaultPropertyFlatRateIdParameter, jobPropertyFlatRateIdParameter, jobIsTonnageParameter, jobFixedTonnageParameter, jobServiceNameParameter, jobRequiresWeighInOutParameter, lotSaltTimeIdParameter, actualDriverVendorWorkerIdParameter, actualTruckIdParameter, actualClockInParameter, actualClockOutParameter, actualWeightInParameter, actualWeightOutParameter, actualPropertyFlatRateIdParameter, actualTonnageParameter, tripStatusIdParameter, commentsParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Job_Update(Nullable<long> jobId, Nullable<long> workEventId, Nullable<int> tripRouteId, Nullable<int> vendorRouteId, Nullable<int> vendorPropertyId, Nullable<int> stopOrder, Nullable<int> jobStopOrder, Nullable<bool> isSelectedByFilter, Nullable<bool> isScheduled, Nullable<bool> isPublished, Nullable<bool> isHourly, Nullable<bool> isFlaggedForReview, Nullable<int> propertyId, string propertyName, Nullable<int> propertyAddressId, Nullable<int> salesRepUserId, Nullable<int> operationsUserId, Nullable<int> propertyWorkTypeId, Nullable<int> defaultPropertyFlatRateId, Nullable<int> jobPropertyFlatRateId, Nullable<bool> jobIsTonnage, Nullable<double> jobFixedTonnage, string jobServiceName, Nullable<bool> jobRequiresWeighInOut, Nullable<long> lotSaltTimeId, Nullable<int> actualDriverVendorWorkerId, Nullable<int> actualTruckId, Nullable<System.DateTime> actualClockIn, Nullable<System.DateTime> actualClockOut, Nullable<double> actualWeightIn, Nullable<double> actualWeightOut, Nullable<int> actualPropertyFlatRateId, Nullable<double> actualTonnage, Nullable<int> tripStatusId, string comments, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            var tripRouteIdParameter = tripRouteId.HasValue ?
                new ObjectParameter("TripRouteId", tripRouteId) :
                new ObjectParameter("TripRouteId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var stopOrderParameter = stopOrder.HasValue ?
                new ObjectParameter("StopOrder", stopOrder) :
                new ObjectParameter("StopOrder", typeof(int));
    
            var jobStopOrderParameter = jobStopOrder.HasValue ?
                new ObjectParameter("JobStopOrder", jobStopOrder) :
                new ObjectParameter("JobStopOrder", typeof(int));
    
            var isSelectedByFilterParameter = isSelectedByFilter.HasValue ?
                new ObjectParameter("IsSelectedByFilter", isSelectedByFilter) :
                new ObjectParameter("IsSelectedByFilter", typeof(bool));
    
            var isScheduledParameter = isScheduled.HasValue ?
                new ObjectParameter("IsScheduled", isScheduled) :
                new ObjectParameter("IsScheduled", typeof(bool));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("IsPublished", isPublished) :
                new ObjectParameter("IsPublished", typeof(bool));
    
            var isHourlyParameter = isHourly.HasValue ?
                new ObjectParameter("IsHourly", isHourly) :
                new ObjectParameter("IsHourly", typeof(bool));
    
            var isFlaggedForReviewParameter = isFlaggedForReview.HasValue ?
                new ObjectParameter("IsFlaggedForReview", isFlaggedForReview) :
                new ObjectParameter("IsFlaggedForReview", typeof(bool));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var propertyAddressIdParameter = propertyAddressId.HasValue ?
                new ObjectParameter("PropertyAddressId", propertyAddressId) :
                new ObjectParameter("PropertyAddressId", typeof(int));
    
            var salesRepUserIdParameter = salesRepUserId.HasValue ?
                new ObjectParameter("SalesRepUserId", salesRepUserId) :
                new ObjectParameter("SalesRepUserId", typeof(int));
    
            var operationsUserIdParameter = operationsUserId.HasValue ?
                new ObjectParameter("OperationsUserId", operationsUserId) :
                new ObjectParameter("OperationsUserId", typeof(int));
    
            var propertyWorkTypeIdParameter = propertyWorkTypeId.HasValue ?
                new ObjectParameter("PropertyWorkTypeId", propertyWorkTypeId) :
                new ObjectParameter("PropertyWorkTypeId", typeof(int));
    
            var defaultPropertyFlatRateIdParameter = defaultPropertyFlatRateId.HasValue ?
                new ObjectParameter("DefaultPropertyFlatRateId", defaultPropertyFlatRateId) :
                new ObjectParameter("DefaultPropertyFlatRateId", typeof(int));
    
            var jobPropertyFlatRateIdParameter = jobPropertyFlatRateId.HasValue ?
                new ObjectParameter("JobPropertyFlatRateId", jobPropertyFlatRateId) :
                new ObjectParameter("JobPropertyFlatRateId", typeof(int));
    
            var jobIsTonnageParameter = jobIsTonnage.HasValue ?
                new ObjectParameter("JobIsTonnage", jobIsTonnage) :
                new ObjectParameter("JobIsTonnage", typeof(bool));
    
            var jobFixedTonnageParameter = jobFixedTonnage.HasValue ?
                new ObjectParameter("JobFixedTonnage", jobFixedTonnage) :
                new ObjectParameter("JobFixedTonnage", typeof(double));
    
            var jobServiceNameParameter = jobServiceName != null ?
                new ObjectParameter("JobServiceName", jobServiceName) :
                new ObjectParameter("JobServiceName", typeof(string));
    
            var jobRequiresWeighInOutParameter = jobRequiresWeighInOut.HasValue ?
                new ObjectParameter("JobRequiresWeighInOut", jobRequiresWeighInOut) :
                new ObjectParameter("JobRequiresWeighInOut", typeof(bool));
    
            var lotSaltTimeIdParameter = lotSaltTimeId.HasValue ?
                new ObjectParameter("LotSaltTimeId", lotSaltTimeId) :
                new ObjectParameter("LotSaltTimeId", typeof(long));
    
            var actualDriverVendorWorkerIdParameter = actualDriverVendorWorkerId.HasValue ?
                new ObjectParameter("ActualDriverVendorWorkerId", actualDriverVendorWorkerId) :
                new ObjectParameter("ActualDriverVendorWorkerId", typeof(int));
    
            var actualTruckIdParameter = actualTruckId.HasValue ?
                new ObjectParameter("ActualTruckId", actualTruckId) :
                new ObjectParameter("ActualTruckId", typeof(int));
    
            var actualClockInParameter = actualClockIn.HasValue ?
                new ObjectParameter("ActualClockIn", actualClockIn) :
                new ObjectParameter("ActualClockIn", typeof(System.DateTime));
    
            var actualClockOutParameter = actualClockOut.HasValue ?
                new ObjectParameter("ActualClockOut", actualClockOut) :
                new ObjectParameter("ActualClockOut", typeof(System.DateTime));
    
            var actualWeightInParameter = actualWeightIn.HasValue ?
                new ObjectParameter("ActualWeightIn", actualWeightIn) :
                new ObjectParameter("ActualWeightIn", typeof(double));
    
            var actualWeightOutParameter = actualWeightOut.HasValue ?
                new ObjectParameter("ActualWeightOut", actualWeightOut) :
                new ObjectParameter("ActualWeightOut", typeof(double));
    
            var actualPropertyFlatRateIdParameter = actualPropertyFlatRateId.HasValue ?
                new ObjectParameter("ActualPropertyFlatRateId", actualPropertyFlatRateId) :
                new ObjectParameter("ActualPropertyFlatRateId", typeof(int));
    
            var actualTonnageParameter = actualTonnage.HasValue ?
                new ObjectParameter("ActualTonnage", actualTonnage) :
                new ObjectParameter("ActualTonnage", typeof(double));
    
            var tripStatusIdParameter = tripStatusId.HasValue ?
                new ObjectParameter("TripStatusId", tripStatusId) :
                new ObjectParameter("TripStatusId", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Job_Update", jobIdParameter, workEventIdParameter, tripRouteIdParameter, vendorRouteIdParameter, vendorPropertyIdParameter, stopOrderParameter, jobStopOrderParameter, isSelectedByFilterParameter, isScheduledParameter, isPublishedParameter, isHourlyParameter, isFlaggedForReviewParameter, propertyIdParameter, propertyNameParameter, propertyAddressIdParameter, salesRepUserIdParameter, operationsUserIdParameter, propertyWorkTypeIdParameter, defaultPropertyFlatRateIdParameter, jobPropertyFlatRateIdParameter, jobIsTonnageParameter, jobFixedTonnageParameter, jobServiceNameParameter, jobRequiresWeighInOutParameter, lotSaltTimeIdParameter, actualDriverVendorWorkerIdParameter, actualTruckIdParameter, actualClockInParameter, actualClockOutParameter, actualWeightInParameter, actualWeightOutParameter, actualPropertyFlatRateIdParameter, actualTonnageParameter, tripStatusIdParameter, commentsParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int LotSaltTime_Delete(Nullable<long> lotSaltTimeId)
        {
            var lotSaltTimeIdParameter = lotSaltTimeId.HasValue ?
                new ObjectParameter("LotSaltTimeId", lotSaltTimeId) :
                new ObjectParameter("LotSaltTimeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LotSaltTime_Delete", lotSaltTimeIdParameter);
        }
    
        public virtual ObjectResult<LotSaltTime_Find_Result> LotSaltTime_Find(Nullable<bool> searchUsinGOR, Nullable<long> lotSaltTimeId, Nullable<long> workEventId, Nullable<int> vendorPropertyId, Nullable<int> vendorWorkerId, Nullable<int> propertyFlatRateId, Nullable<int> equipmentId, Nullable<bool> isHourlyRate, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<double> tonnage, string comments, Nullable<bool> isInvoiced, Nullable<System.DateTime> invoicedDate, Nullable<bool> isCheckRun, Nullable<System.DateTime> checkRunDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var lotSaltTimeIdParameter = lotSaltTimeId.HasValue ?
                new ObjectParameter("LotSaltTimeId", lotSaltTimeId) :
                new ObjectParameter("LotSaltTimeId", typeof(long));
    
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var vendorWorkerIdParameter = vendorWorkerId.HasValue ?
                new ObjectParameter("VendorWorkerId", vendorWorkerId) :
                new ObjectParameter("VendorWorkerId", typeof(int));
    
            var propertyFlatRateIdParameter = propertyFlatRateId.HasValue ?
                new ObjectParameter("PropertyFlatRateId", propertyFlatRateId) :
                new ObjectParameter("PropertyFlatRateId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var isHourlyRateParameter = isHourlyRate.HasValue ?
                new ObjectParameter("IsHourlyRate", isHourlyRate) :
                new ObjectParameter("IsHourlyRate", typeof(bool));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var tonnageParameter = tonnage.HasValue ?
                new ObjectParameter("Tonnage", tonnage) :
                new ObjectParameter("Tonnage", typeof(double));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var isInvoicedParameter = isInvoiced.HasValue ?
                new ObjectParameter("IsInvoiced", isInvoiced) :
                new ObjectParameter("IsInvoiced", typeof(bool));
    
            var invoicedDateParameter = invoicedDate.HasValue ?
                new ObjectParameter("InvoicedDate", invoicedDate) :
                new ObjectParameter("InvoicedDate", typeof(System.DateTime));
    
            var isCheckRunParameter = isCheckRun.HasValue ?
                new ObjectParameter("IsCheckRun", isCheckRun) :
                new ObjectParameter("IsCheckRun", typeof(bool));
    
            var checkRunDateParameter = checkRunDate.HasValue ?
                new ObjectParameter("CheckRunDate", checkRunDate) :
                new ObjectParameter("CheckRunDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LotSaltTime_Find_Result>("LotSaltTime_Find", searchUsinGORParameter, lotSaltTimeIdParameter, workEventIdParameter, vendorPropertyIdParameter, vendorWorkerIdParameter, propertyFlatRateIdParameter, equipmentIdParameter, isHourlyRateParameter, startTimeParameter, endTimeParameter, tonnageParameter, commentsParameter, isInvoicedParameter, invoicedDateParameter, isCheckRunParameter, checkRunDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<LotSaltTime_Get_List_Result> LotSaltTime_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LotSaltTime_Get_List_Result>("LotSaltTime_Get_List");
        }
    
        public virtual ObjectResult<LotSaltTime_GetByEquipmentId_Result> LotSaltTime_GetByEquipmentId(Nullable<int> equipmentId)
        {
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LotSaltTime_GetByEquipmentId_Result>("LotSaltTime_GetByEquipmentId", equipmentIdParameter);
        }
    
        public virtual ObjectResult<LotSaltTime_GetByLotSaltTimeId_Result> LotSaltTime_GetByLotSaltTimeId(Nullable<long> lotSaltTimeId)
        {
            var lotSaltTimeIdParameter = lotSaltTimeId.HasValue ?
                new ObjectParameter("LotSaltTimeId", lotSaltTimeId) :
                new ObjectParameter("LotSaltTimeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LotSaltTime_GetByLotSaltTimeId_Result>("LotSaltTime_GetByLotSaltTimeId", lotSaltTimeIdParameter);
        }
    
        public virtual ObjectResult<LotSaltTime_GetByPropertyFlatRateId_Result> LotSaltTime_GetByPropertyFlatRateId(Nullable<int> propertyFlatRateId)
        {
            var propertyFlatRateIdParameter = propertyFlatRateId.HasValue ?
                new ObjectParameter("PropertyFlatRateId", propertyFlatRateId) :
                new ObjectParameter("PropertyFlatRateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LotSaltTime_GetByPropertyFlatRateId_Result>("LotSaltTime_GetByPropertyFlatRateId", propertyFlatRateIdParameter);
        }
    
        public virtual ObjectResult<LotSaltTime_GetByVendorPropertyId_Result> LotSaltTime_GetByVendorPropertyId(Nullable<int> vendorPropertyId)
        {
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LotSaltTime_GetByVendorPropertyId_Result>("LotSaltTime_GetByVendorPropertyId", vendorPropertyIdParameter);
        }
    
        public virtual ObjectResult<LotSaltTime_GetByVendorWorkerId_Result> LotSaltTime_GetByVendorWorkerId(Nullable<int> vendorWorkerId)
        {
            var vendorWorkerIdParameter = vendorWorkerId.HasValue ?
                new ObjectParameter("VendorWorkerId", vendorWorkerId) :
                new ObjectParameter("VendorWorkerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LotSaltTime_GetByVendorWorkerId_Result>("LotSaltTime_GetByVendorWorkerId", vendorWorkerIdParameter);
        }
    
        public virtual ObjectResult<LotSaltTime_GetByWorkEventId_Result> LotSaltTime_GetByWorkEventId(Nullable<long> workEventId)
        {
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LotSaltTime_GetByWorkEventId_Result>("LotSaltTime_GetByWorkEventId", workEventIdParameter);
        }
    
        public virtual int LotSaltTime_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LotSaltTime_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int LotSaltTime_Insert(ObjectParameter lotSaltTimeId, Nullable<long> workEventId, Nullable<int> vendorPropertyId, Nullable<int> vendorWorkerId, Nullable<int> propertyFlatRateId, Nullable<int> equipmentId, Nullable<bool> isHourlyRate, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<double> tonnage, string comments, Nullable<bool> isInvoiced, Nullable<System.DateTime> invoicedDate, Nullable<bool> isCheckRun, Nullable<System.DateTime> checkRunDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var vendorWorkerIdParameter = vendorWorkerId.HasValue ?
                new ObjectParameter("VendorWorkerId", vendorWorkerId) :
                new ObjectParameter("VendorWorkerId", typeof(int));
    
            var propertyFlatRateIdParameter = propertyFlatRateId.HasValue ?
                new ObjectParameter("PropertyFlatRateId", propertyFlatRateId) :
                new ObjectParameter("PropertyFlatRateId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var isHourlyRateParameter = isHourlyRate.HasValue ?
                new ObjectParameter("IsHourlyRate", isHourlyRate) :
                new ObjectParameter("IsHourlyRate", typeof(bool));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var tonnageParameter = tonnage.HasValue ?
                new ObjectParameter("Tonnage", tonnage) :
                new ObjectParameter("Tonnage", typeof(double));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var isInvoicedParameter = isInvoiced.HasValue ?
                new ObjectParameter("IsInvoiced", isInvoiced) :
                new ObjectParameter("IsInvoiced", typeof(bool));
    
            var invoicedDateParameter = invoicedDate.HasValue ?
                new ObjectParameter("InvoicedDate", invoicedDate) :
                new ObjectParameter("InvoicedDate", typeof(System.DateTime));
    
            var isCheckRunParameter = isCheckRun.HasValue ?
                new ObjectParameter("IsCheckRun", isCheckRun) :
                new ObjectParameter("IsCheckRun", typeof(bool));
    
            var checkRunDateParameter = checkRunDate.HasValue ?
                new ObjectParameter("CheckRunDate", checkRunDate) :
                new ObjectParameter("CheckRunDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LotSaltTime_Insert", lotSaltTimeId, workEventIdParameter, vendorPropertyIdParameter, vendorWorkerIdParameter, propertyFlatRateIdParameter, equipmentIdParameter, isHourlyRateParameter, startTimeParameter, endTimeParameter, tonnageParameter, commentsParameter, isInvoicedParameter, invoicedDateParameter, isCheckRunParameter, checkRunDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int LotSaltTime_Update(Nullable<long> lotSaltTimeId, Nullable<long> workEventId, Nullable<int> vendorPropertyId, Nullable<int> vendorWorkerId, Nullable<int> propertyFlatRateId, Nullable<int> equipmentId, Nullable<bool> isHourlyRate, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<double> tonnage, string comments, Nullable<bool> isInvoiced, Nullable<System.DateTime> invoicedDate, Nullable<bool> isCheckRun, Nullable<System.DateTime> checkRunDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var lotSaltTimeIdParameter = lotSaltTimeId.HasValue ?
                new ObjectParameter("LotSaltTimeId", lotSaltTimeId) :
                new ObjectParameter("LotSaltTimeId", typeof(long));
    
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var vendorWorkerIdParameter = vendorWorkerId.HasValue ?
                new ObjectParameter("VendorWorkerId", vendorWorkerId) :
                new ObjectParameter("VendorWorkerId", typeof(int));
    
            var propertyFlatRateIdParameter = propertyFlatRateId.HasValue ?
                new ObjectParameter("PropertyFlatRateId", propertyFlatRateId) :
                new ObjectParameter("PropertyFlatRateId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var isHourlyRateParameter = isHourlyRate.HasValue ?
                new ObjectParameter("IsHourlyRate", isHourlyRate) :
                new ObjectParameter("IsHourlyRate", typeof(bool));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var tonnageParameter = tonnage.HasValue ?
                new ObjectParameter("Tonnage", tonnage) :
                new ObjectParameter("Tonnage", typeof(double));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var isInvoicedParameter = isInvoiced.HasValue ?
                new ObjectParameter("IsInvoiced", isInvoiced) :
                new ObjectParameter("IsInvoiced", typeof(bool));
    
            var invoicedDateParameter = invoicedDate.HasValue ?
                new ObjectParameter("InvoicedDate", invoicedDate) :
                new ObjectParameter("InvoicedDate", typeof(System.DateTime));
    
            var isCheckRunParameter = isCheckRun.HasValue ?
                new ObjectParameter("IsCheckRun", isCheckRun) :
                new ObjectParameter("IsCheckRun", typeof(bool));
    
            var checkRunDateParameter = checkRunDate.HasValue ?
                new ObjectParameter("CheckRunDate", checkRunDate) :
                new ObjectParameter("CheckRunDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LotSaltTime_Update", lotSaltTimeIdParameter, workEventIdParameter, vendorPropertyIdParameter, vendorWorkerIdParameter, propertyFlatRateIdParameter, equipmentIdParameter, isHourlyRateParameter, startTimeParameter, endTimeParameter, tonnageParameter, commentsParameter, isInvoicedParameter, invoicedDateParameter, isCheckRunParameter, checkRunDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Notification_Delete(Nullable<int> notificationId)
        {
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Notification_Delete", notificationIdParameter);
        }
    
        public virtual ObjectResult<Notification_Find_Result> Notification_Find(Nullable<bool> searchUsinGOR, Nullable<int> notificationId, Nullable<int> notificationTypeId, string subject, string location, string description, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(int));
    
            var notificationTypeIdParameter = notificationTypeId.HasValue ?
                new ObjectParameter("NotificationTypeId", notificationTypeId) :
                new ObjectParameter("NotificationTypeId", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Notification_Find_Result>("Notification_Find", searchUsinGORParameter, notificationIdParameter, notificationTypeIdParameter, subjectParameter, locationParameter, descriptionParameter, startDateParameter, endDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<Notification_Get_List_Result> Notification_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Notification_Get_List_Result>("Notification_Get_List");
        }
    
        public virtual ObjectResult<Notification_GetByNotificationId_Result> Notification_GetByNotificationId(Nullable<int> notificationId)
        {
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Notification_GetByNotificationId_Result>("Notification_GetByNotificationId", notificationIdParameter);
        }
    
        public virtual ObjectResult<Notification_GetByNotificationTypeId_Result> Notification_GetByNotificationTypeId(Nullable<int> notificationTypeId)
        {
            var notificationTypeIdParameter = notificationTypeId.HasValue ?
                new ObjectParameter("NotificationTypeId", notificationTypeId) :
                new ObjectParameter("NotificationTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Notification_GetByNotificationTypeId_Result>("Notification_GetByNotificationTypeId", notificationTypeIdParameter);
        }
    
        public virtual int Notification_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Notification_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int Notification_Insert(ObjectParameter notificationId, Nullable<int> notificationTypeId, string subject, string location, string description, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var notificationTypeIdParameter = notificationTypeId.HasValue ?
                new ObjectParameter("NotificationTypeId", notificationTypeId) :
                new ObjectParameter("NotificationTypeId", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Notification_Insert", notificationId, notificationTypeIdParameter, subjectParameter, locationParameter, descriptionParameter, startDateParameter, endDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Notification_Update(Nullable<int> notificationId, Nullable<int> notificationTypeId, string subject, string location, string description, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(int));
    
            var notificationTypeIdParameter = notificationTypeId.HasValue ?
                new ObjectParameter("NotificationTypeId", notificationTypeId) :
                new ObjectParameter("NotificationTypeId", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Notification_Update", notificationIdParameter, notificationTypeIdParameter, subjectParameter, locationParameter, descriptionParameter, startDateParameter, endDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int NotificationType_Delete(Nullable<int> notificationTypeId)
        {
            var notificationTypeIdParameter = notificationTypeId.HasValue ?
                new ObjectParameter("NotificationTypeId", notificationTypeId) :
                new ObjectParameter("NotificationTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NotificationType_Delete", notificationTypeIdParameter);
        }
    
        public virtual ObjectResult<NotificationType_Find_Result> NotificationType_Find(Nullable<bool> searchUsinGOR, Nullable<int> notificationTypeId, string name, string description, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var notificationTypeIdParameter = notificationTypeId.HasValue ?
                new ObjectParameter("NotificationTypeId", notificationTypeId) :
                new ObjectParameter("NotificationTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotificationType_Find_Result>("NotificationType_Find", searchUsinGORParameter, notificationTypeIdParameter, nameParameter, descriptionParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<NotificationType_Get_List_Result> NotificationType_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotificationType_Get_List_Result>("NotificationType_Get_List");
        }
    
        public virtual ObjectResult<NotificationType_GetByName_Result> NotificationType_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotificationType_GetByName_Result>("NotificationType_GetByName", nameParameter);
        }
    
        public virtual ObjectResult<NotificationType_GetByNotificationTypeId_Result> NotificationType_GetByNotificationTypeId(Nullable<int> notificationTypeId)
        {
            var notificationTypeIdParameter = notificationTypeId.HasValue ?
                new ObjectParameter("NotificationTypeId", notificationTypeId) :
                new ObjectParameter("NotificationTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotificationType_GetByNotificationTypeId_Result>("NotificationType_GetByNotificationTypeId", notificationTypeIdParameter);
        }
    
        public virtual int NotificationType_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NotificationType_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int NotificationType_Insert(ObjectParameter notificationTypeId, string name, string description, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NotificationType_Insert", notificationTypeId, nameParameter, descriptionParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int NotificationType_Update(Nullable<int> notificationTypeId, string name, string description, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var notificationTypeIdParameter = notificationTypeId.HasValue ?
                new ObjectParameter("NotificationTypeId", notificationTypeId) :
                new ObjectParameter("NotificationTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NotificationType_Update", notificationTypeIdParameter, nameParameter, descriptionParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int NotificationVendor_Delete(Nullable<int> notificationVendorId)
        {
            var notificationVendorIdParameter = notificationVendorId.HasValue ?
                new ObjectParameter("NotificationVendorId", notificationVendorId) :
                new ObjectParameter("NotificationVendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NotificationVendor_Delete", notificationVendorIdParameter);
        }
    
        public virtual ObjectResult<NotificationVendor_Find_Result> NotificationVendor_Find(Nullable<bool> searchUsinGOR, Nullable<int> notificationVendorId, Nullable<int> notificationId, Nullable<int> vendorId, Nullable<bool> isAcknowledged, string acknowledgedBy, Nullable<System.DateTime> acknowledgedOn, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var notificationVendorIdParameter = notificationVendorId.HasValue ?
                new ObjectParameter("NotificationVendorId", notificationVendorId) :
                new ObjectParameter("NotificationVendorId", typeof(int));
    
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var isAcknowledgedParameter = isAcknowledged.HasValue ?
                new ObjectParameter("IsAcknowledged", isAcknowledged) :
                new ObjectParameter("IsAcknowledged", typeof(bool));
    
            var acknowledgedByParameter = acknowledgedBy != null ?
                new ObjectParameter("AcknowledgedBy", acknowledgedBy) :
                new ObjectParameter("AcknowledgedBy", typeof(string));
    
            var acknowledgedOnParameter = acknowledgedOn.HasValue ?
                new ObjectParameter("AcknowledgedOn", acknowledgedOn) :
                new ObjectParameter("AcknowledgedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotificationVendor_Find_Result>("NotificationVendor_Find", searchUsinGORParameter, notificationVendorIdParameter, notificationIdParameter, vendorIdParameter, isAcknowledgedParameter, acknowledgedByParameter, acknowledgedOnParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<NotificationVendor_Get_List_Result> NotificationVendor_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotificationVendor_Get_List_Result>("NotificationVendor_Get_List");
        }
    
        public virtual ObjectResult<NotificationVendor_GetByNotificationId_Result> NotificationVendor_GetByNotificationId(Nullable<int> notificationId)
        {
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotificationVendor_GetByNotificationId_Result>("NotificationVendor_GetByNotificationId", notificationIdParameter);
        }
    
        public virtual ObjectResult<NotificationVendor_GetByNotificationVendorId_Result> NotificationVendor_GetByNotificationVendorId(Nullable<int> notificationVendorId)
        {
            var notificationVendorIdParameter = notificationVendorId.HasValue ?
                new ObjectParameter("NotificationVendorId", notificationVendorId) :
                new ObjectParameter("NotificationVendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotificationVendor_GetByNotificationVendorId_Result>("NotificationVendor_GetByNotificationVendorId", notificationVendorIdParameter);
        }
    
        public virtual ObjectResult<NotificationVendor_GetByVendorId_Result> NotificationVendor_GetByVendorId(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotificationVendor_GetByVendorId_Result>("NotificationVendor_GetByVendorId", vendorIdParameter);
        }
    
        public virtual int NotificationVendor_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NotificationVendor_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int NotificationVendor_Insert(ObjectParameter notificationVendorId, Nullable<int> notificationId, Nullable<int> vendorId, Nullable<bool> isAcknowledged, string acknowledgedBy, Nullable<System.DateTime> acknowledgedOn, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var isAcknowledgedParameter = isAcknowledged.HasValue ?
                new ObjectParameter("IsAcknowledged", isAcknowledged) :
                new ObjectParameter("IsAcknowledged", typeof(bool));
    
            var acknowledgedByParameter = acknowledgedBy != null ?
                new ObjectParameter("AcknowledgedBy", acknowledgedBy) :
                new ObjectParameter("AcknowledgedBy", typeof(string));
    
            var acknowledgedOnParameter = acknowledgedOn.HasValue ?
                new ObjectParameter("AcknowledgedOn", acknowledgedOn) :
                new ObjectParameter("AcknowledgedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NotificationVendor_Insert", notificationVendorId, notificationIdParameter, vendorIdParameter, isAcknowledgedParameter, acknowledgedByParameter, acknowledgedOnParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int NotificationVendor_Update(Nullable<int> notificationVendorId, Nullable<int> notificationId, Nullable<int> vendorId, Nullable<bool> isAcknowledged, string acknowledgedBy, Nullable<System.DateTime> acknowledgedOn, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var notificationVendorIdParameter = notificationVendorId.HasValue ?
                new ObjectParameter("NotificationVendorId", notificationVendorId) :
                new ObjectParameter("NotificationVendorId", typeof(int));
    
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var isAcknowledgedParameter = isAcknowledged.HasValue ?
                new ObjectParameter("IsAcknowledged", isAcknowledged) :
                new ObjectParameter("IsAcknowledged", typeof(bool));
    
            var acknowledgedByParameter = acknowledgedBy != null ?
                new ObjectParameter("AcknowledgedBy", acknowledgedBy) :
                new ObjectParameter("AcknowledgedBy", typeof(string));
    
            var acknowledgedOnParameter = acknowledgedOn.HasValue ?
                new ObjectParameter("AcknowledgedOn", acknowledgedOn) :
                new ObjectParameter("AcknowledgedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NotificationVendor_Update", notificationVendorIdParameter, notificationIdParameter, vendorIdParameter, isAcknowledgedParameter, acknowledgedByParameter, acknowledgedOnParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int PaymentTerm_Delete(Nullable<int> paymentTermId)
        {
            var paymentTermIdParameter = paymentTermId.HasValue ?
                new ObjectParameter("PaymentTermId", paymentTermId) :
                new ObjectParameter("PaymentTermId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PaymentTerm_Delete", paymentTermIdParameter);
        }
    
        public virtual ObjectResult<PaymentTerm_Find_Result> PaymentTerm_Find(Nullable<bool> searchUsinGOR, Nullable<int> paymentTermId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var paymentTermIdParameter = paymentTermId.HasValue ?
                new ObjectParameter("PaymentTermId", paymentTermId) :
                new ObjectParameter("PaymentTermId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PaymentTerm_Find_Result>("PaymentTerm_Find", searchUsinGORParameter, paymentTermIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<PaymentTerm_Get_List_Result> PaymentTerm_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PaymentTerm_Get_List_Result>("PaymentTerm_Get_List");
        }
    
        public virtual ObjectResult<PaymentTerm_GetByName_Result> PaymentTerm_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PaymentTerm_GetByName_Result>("PaymentTerm_GetByName", nameParameter);
        }
    
        public virtual ObjectResult<PaymentTerm_GetByPaymentTermId_Result> PaymentTerm_GetByPaymentTermId(Nullable<int> paymentTermId)
        {
            var paymentTermIdParameter = paymentTermId.HasValue ?
                new ObjectParameter("PaymentTermId", paymentTermId) :
                new ObjectParameter("PaymentTermId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PaymentTerm_GetByPaymentTermId_Result>("PaymentTerm_GetByPaymentTermId", paymentTermIdParameter);
        }
    
        public virtual int PaymentTerm_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PaymentTerm_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int PaymentTerm_Insert(ObjectParameter paymentTermId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PaymentTerm_Insert", paymentTermId, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int PaymentTerm_Update(Nullable<int> paymentTermId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var paymentTermIdParameter = paymentTermId.HasValue ?
                new ObjectParameter("PaymentTermId", paymentTermId) :
                new ObjectParameter("PaymentTermId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PaymentTerm_Update", paymentTermIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int PrecipitationType_Delete(Nullable<int> precipitationTypeId)
        {
            var precipitationTypeIdParameter = precipitationTypeId.HasValue ?
                new ObjectParameter("PrecipitationTypeId", precipitationTypeId) :
                new ObjectParameter("PrecipitationTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PrecipitationType_Delete", precipitationTypeIdParameter);
        }
    
        public virtual ObjectResult<PrecipitationType_Find_Result> PrecipitationType_Find(Nullable<bool> searchUsinGOR, Nullable<int> precipitationTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var precipitationTypeIdParameter = precipitationTypeId.HasValue ?
                new ObjectParameter("PrecipitationTypeId", precipitationTypeId) :
                new ObjectParameter("PrecipitationTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PrecipitationType_Find_Result>("PrecipitationType_Find", searchUsinGORParameter, precipitationTypeIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<PrecipitationType_Get_List_Result> PrecipitationType_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PrecipitationType_Get_List_Result>("PrecipitationType_Get_List");
        }
    
        public virtual ObjectResult<PrecipitationType_GetByName_Result> PrecipitationType_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PrecipitationType_GetByName_Result>("PrecipitationType_GetByName", nameParameter);
        }
    
        public virtual ObjectResult<PrecipitationType_GetByPrecipitationTypeId_Result> PrecipitationType_GetByPrecipitationTypeId(Nullable<int> precipitationTypeId)
        {
            var precipitationTypeIdParameter = precipitationTypeId.HasValue ?
                new ObjectParameter("PrecipitationTypeId", precipitationTypeId) :
                new ObjectParameter("PrecipitationTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PrecipitationType_GetByPrecipitationTypeId_Result>("PrecipitationType_GetByPrecipitationTypeId", precipitationTypeIdParameter);
        }
    
        public virtual int PrecipitationType_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PrecipitationType_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int PrecipitationType_Insert(ObjectParameter precipitationTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PrecipitationType_Insert", precipitationTypeId, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int PrecipitationType_Update(Nullable<int> precipitationTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var precipitationTypeIdParameter = precipitationTypeId.HasValue ?
                new ObjectParameter("PrecipitationTypeId", precipitationTypeId) :
                new ObjectParameter("PrecipitationTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PrecipitationType_Update", precipitationTypeIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Property_Delete(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Property_Delete", propertyIdParameter);
        }
    
        public virtual ObjectResult<Property_Find_Result> Property_Find(Nullable<bool> searchUsinGOR, Nullable<int> propertyId, string propertyName, string landmark, string onsiteManager, string onsitePhone, Nullable<int> territoryId, Nullable<double> lotSizeAcres, Nullable<double> sidewalkInHours, Nullable<int> sidewalkSqFt, Nullable<double> plowtimeInHours, Nullable<double> icemeltBags, string salesRep, string billingEmailAddress, string qbJob, string qbReference, string comments, Nullable<bool> isActiveContract, Nullable<bool> isSyncNeeded, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, string hoursOfOperation, string sitefotosUrl, Nullable<bool> open24Hours)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var landmarkParameter = landmark != null ?
                new ObjectParameter("Landmark", landmark) :
                new ObjectParameter("Landmark", typeof(string));
    
            var onsiteManagerParameter = onsiteManager != null ?
                new ObjectParameter("OnsiteManager", onsiteManager) :
                new ObjectParameter("OnsiteManager", typeof(string));
    
            var onsitePhoneParameter = onsitePhone != null ?
                new ObjectParameter("OnsitePhone", onsitePhone) :
                new ObjectParameter("OnsitePhone", typeof(string));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            var lotSizeAcresParameter = lotSizeAcres.HasValue ?
                new ObjectParameter("LotSizeAcres", lotSizeAcres) :
                new ObjectParameter("LotSizeAcres", typeof(double));
    
            var sidewalkInHoursParameter = sidewalkInHours.HasValue ?
                new ObjectParameter("SidewalkInHours", sidewalkInHours) :
                new ObjectParameter("SidewalkInHours", typeof(double));
    
            var sidewalkSqFtParameter = sidewalkSqFt.HasValue ?
                new ObjectParameter("SidewalkSqFt", sidewalkSqFt) :
                new ObjectParameter("SidewalkSqFt", typeof(int));
    
            var plowtimeInHoursParameter = plowtimeInHours.HasValue ?
                new ObjectParameter("PlowtimeInHours", plowtimeInHours) :
                new ObjectParameter("PlowtimeInHours", typeof(double));
    
            var icemeltBagsParameter = icemeltBags.HasValue ?
                new ObjectParameter("IcemeltBags", icemeltBags) :
                new ObjectParameter("IcemeltBags", typeof(double));
    
            var salesRepParameter = salesRep != null ?
                new ObjectParameter("SalesRep", salesRep) :
                new ObjectParameter("SalesRep", typeof(string));
    
            var billingEmailAddressParameter = billingEmailAddress != null ?
                new ObjectParameter("BillingEmailAddress", billingEmailAddress) :
                new ObjectParameter("BillingEmailAddress", typeof(string));
    
            var qbJobParameter = qbJob != null ?
                new ObjectParameter("QbJob", qbJob) :
                new ObjectParameter("QbJob", typeof(string));
    
            var qbReferenceParameter = qbReference != null ?
                new ObjectParameter("QbReference", qbReference) :
                new ObjectParameter("QbReference", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var isActiveContractParameter = isActiveContract.HasValue ?
                new ObjectParameter("IsActiveContract", isActiveContract) :
                new ObjectParameter("IsActiveContract", typeof(bool));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var hoursOfOperationParameter = hoursOfOperation != null ?
                new ObjectParameter("HoursOfOperation", hoursOfOperation) :
                new ObjectParameter("HoursOfOperation", typeof(string));
    
            var sitefotosUrlParameter = sitefotosUrl != null ?
                new ObjectParameter("SitefotosUrl", sitefotosUrl) :
                new ObjectParameter("SitefotosUrl", typeof(string));
    
            var open24HoursParameter = open24Hours.HasValue ?
                new ObjectParameter("Open24Hours", open24Hours) :
                new ObjectParameter("Open24Hours", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Property_Find_Result>("Property_Find", searchUsinGORParameter, propertyIdParameter, propertyNameParameter, landmarkParameter, onsiteManagerParameter, onsitePhoneParameter, territoryIdParameter, lotSizeAcresParameter, sidewalkInHoursParameter, sidewalkSqFtParameter, plowtimeInHoursParameter, icemeltBagsParameter, salesRepParameter, billingEmailAddressParameter, qbJobParameter, qbReferenceParameter, commentsParameter, isActiveContractParameter, isSyncNeededParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, hoursOfOperationParameter, sitefotosUrlParameter, open24HoursParameter);
        }
    
        public virtual ObjectResult<Property_Get_List_Result> Property_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Property_Get_List_Result>("Property_Get_List");
        }
    
        public virtual ObjectResult<Property_GetByPropertyId_Result> Property_GetByPropertyId(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Property_GetByPropertyId_Result>("Property_GetByPropertyId", propertyIdParameter);
        }
    
        public virtual ObjectResult<Property_GetByTerritoryId_Result> Property_GetByTerritoryId(Nullable<int> territoryId)
        {
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Property_GetByTerritoryId_Result>("Property_GetByTerritoryId", territoryIdParameter);
        }
    
        public virtual int Property_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Property_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int Property_Insert(ObjectParameter propertyId, string propertyName, string landmark, string onsiteManager, string onsitePhone, Nullable<int> territoryId, Nullable<double> lotSizeAcres, Nullable<double> sidewalkInHours, Nullable<int> sidewalkSqFt, Nullable<double> plowtimeInHours, Nullable<double> icemeltBags, string salesRep, string billingEmailAddress, string qbJob, string qbReference, string comments, Nullable<bool> isActiveContract, Nullable<bool> isSyncNeeded, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, string hoursOfOperation, string sitefotosUrl, Nullable<bool> open24Hours)
        {
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var landmarkParameter = landmark != null ?
                new ObjectParameter("Landmark", landmark) :
                new ObjectParameter("Landmark", typeof(string));
    
            var onsiteManagerParameter = onsiteManager != null ?
                new ObjectParameter("OnsiteManager", onsiteManager) :
                new ObjectParameter("OnsiteManager", typeof(string));
    
            var onsitePhoneParameter = onsitePhone != null ?
                new ObjectParameter("OnsitePhone", onsitePhone) :
                new ObjectParameter("OnsitePhone", typeof(string));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            var lotSizeAcresParameter = lotSizeAcres.HasValue ?
                new ObjectParameter("LotSizeAcres", lotSizeAcres) :
                new ObjectParameter("LotSizeAcres", typeof(double));
    
            var sidewalkInHoursParameter = sidewalkInHours.HasValue ?
                new ObjectParameter("SidewalkInHours", sidewalkInHours) :
                new ObjectParameter("SidewalkInHours", typeof(double));
    
            var sidewalkSqFtParameter = sidewalkSqFt.HasValue ?
                new ObjectParameter("SidewalkSqFt", sidewalkSqFt) :
                new ObjectParameter("SidewalkSqFt", typeof(int));
    
            var plowtimeInHoursParameter = plowtimeInHours.HasValue ?
                new ObjectParameter("PlowtimeInHours", plowtimeInHours) :
                new ObjectParameter("PlowtimeInHours", typeof(double));
    
            var icemeltBagsParameter = icemeltBags.HasValue ?
                new ObjectParameter("IcemeltBags", icemeltBags) :
                new ObjectParameter("IcemeltBags", typeof(double));
    
            var salesRepParameter = salesRep != null ?
                new ObjectParameter("SalesRep", salesRep) :
                new ObjectParameter("SalesRep", typeof(string));
    
            var billingEmailAddressParameter = billingEmailAddress != null ?
                new ObjectParameter("BillingEmailAddress", billingEmailAddress) :
                new ObjectParameter("BillingEmailAddress", typeof(string));
    
            var qbJobParameter = qbJob != null ?
                new ObjectParameter("QbJob", qbJob) :
                new ObjectParameter("QbJob", typeof(string));
    
            var qbReferenceParameter = qbReference != null ?
                new ObjectParameter("QbReference", qbReference) :
                new ObjectParameter("QbReference", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var isActiveContractParameter = isActiveContract.HasValue ?
                new ObjectParameter("IsActiveContract", isActiveContract) :
                new ObjectParameter("IsActiveContract", typeof(bool));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var hoursOfOperationParameter = hoursOfOperation != null ?
                new ObjectParameter("HoursOfOperation", hoursOfOperation) :
                new ObjectParameter("HoursOfOperation", typeof(string));
    
            var sitefotosUrlParameter = sitefotosUrl != null ?
                new ObjectParameter("SitefotosUrl", sitefotosUrl) :
                new ObjectParameter("SitefotosUrl", typeof(string));
    
            var open24HoursParameter = open24Hours.HasValue ?
                new ObjectParameter("Open24Hours", open24Hours) :
                new ObjectParameter("Open24Hours", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Property_Insert", propertyId, propertyNameParameter, landmarkParameter, onsiteManagerParameter, onsitePhoneParameter, territoryIdParameter, lotSizeAcresParameter, sidewalkInHoursParameter, sidewalkSqFtParameter, plowtimeInHoursParameter, icemeltBagsParameter, salesRepParameter, billingEmailAddressParameter, qbJobParameter, qbReferenceParameter, commentsParameter, isActiveContractParameter, isSyncNeededParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, hoursOfOperationParameter, sitefotosUrlParameter, open24HoursParameter);
        }
    
        public virtual int Property_Update(Nullable<int> propertyId, string propertyName, string landmark, string onsiteManager, string onsitePhone, Nullable<int> territoryId, Nullable<double> lotSizeAcres, Nullable<double> sidewalkInHours, Nullable<int> sidewalkSqFt, Nullable<double> plowtimeInHours, Nullable<double> icemeltBags, string salesRep, string billingEmailAddress, string qbJob, string qbReference, string comments, Nullable<bool> isActiveContract, Nullable<bool> isSyncNeeded, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, string hoursOfOperation, string sitefotosUrl, Nullable<bool> open24Hours)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var landmarkParameter = landmark != null ?
                new ObjectParameter("Landmark", landmark) :
                new ObjectParameter("Landmark", typeof(string));
    
            var onsiteManagerParameter = onsiteManager != null ?
                new ObjectParameter("OnsiteManager", onsiteManager) :
                new ObjectParameter("OnsiteManager", typeof(string));
    
            var onsitePhoneParameter = onsitePhone != null ?
                new ObjectParameter("OnsitePhone", onsitePhone) :
                new ObjectParameter("OnsitePhone", typeof(string));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            var lotSizeAcresParameter = lotSizeAcres.HasValue ?
                new ObjectParameter("LotSizeAcres", lotSizeAcres) :
                new ObjectParameter("LotSizeAcres", typeof(double));
    
            var sidewalkInHoursParameter = sidewalkInHours.HasValue ?
                new ObjectParameter("SidewalkInHours", sidewalkInHours) :
                new ObjectParameter("SidewalkInHours", typeof(double));
    
            var sidewalkSqFtParameter = sidewalkSqFt.HasValue ?
                new ObjectParameter("SidewalkSqFt", sidewalkSqFt) :
                new ObjectParameter("SidewalkSqFt", typeof(int));
    
            var plowtimeInHoursParameter = plowtimeInHours.HasValue ?
                new ObjectParameter("PlowtimeInHours", plowtimeInHours) :
                new ObjectParameter("PlowtimeInHours", typeof(double));
    
            var icemeltBagsParameter = icemeltBags.HasValue ?
                new ObjectParameter("IcemeltBags", icemeltBags) :
                new ObjectParameter("IcemeltBags", typeof(double));
    
            var salesRepParameter = salesRep != null ?
                new ObjectParameter("SalesRep", salesRep) :
                new ObjectParameter("SalesRep", typeof(string));
    
            var billingEmailAddressParameter = billingEmailAddress != null ?
                new ObjectParameter("BillingEmailAddress", billingEmailAddress) :
                new ObjectParameter("BillingEmailAddress", typeof(string));
    
            var qbJobParameter = qbJob != null ?
                new ObjectParameter("QbJob", qbJob) :
                new ObjectParameter("QbJob", typeof(string));
    
            var qbReferenceParameter = qbReference != null ?
                new ObjectParameter("QbReference", qbReference) :
                new ObjectParameter("QbReference", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var isActiveContractParameter = isActiveContract.HasValue ?
                new ObjectParameter("IsActiveContract", isActiveContract) :
                new ObjectParameter("IsActiveContract", typeof(bool));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var hoursOfOperationParameter = hoursOfOperation != null ?
                new ObjectParameter("HoursOfOperation", hoursOfOperation) :
                new ObjectParameter("HoursOfOperation", typeof(string));
    
            var sitefotosUrlParameter = sitefotosUrl != null ?
                new ObjectParameter("SitefotosUrl", sitefotosUrl) :
                new ObjectParameter("SitefotosUrl", typeof(string));
    
            var open24HoursParameter = open24Hours.HasValue ?
                new ObjectParameter("Open24Hours", open24Hours) :
                new ObjectParameter("Open24Hours", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Property_Update", propertyIdParameter, propertyNameParameter, landmarkParameter, onsiteManagerParameter, onsitePhoneParameter, territoryIdParameter, lotSizeAcresParameter, sidewalkInHoursParameter, sidewalkSqFtParameter, plowtimeInHoursParameter, icemeltBagsParameter, salesRepParameter, billingEmailAddressParameter, qbJobParameter, qbReferenceParameter, commentsParameter, isActiveContractParameter, isSyncNeededParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, hoursOfOperationParameter, sitefotosUrlParameter, open24HoursParameter);
        }
    
        public virtual int PropertyAddress_Delete(Nullable<int> propertyAddressId)
        {
            var propertyAddressIdParameter = propertyAddressId.HasValue ?
                new ObjectParameter("PropertyAddressId", propertyAddressId) :
                new ObjectParameter("PropertyAddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyAddress_Delete", propertyAddressIdParameter);
        }
    
        public virtual ObjectResult<PropertyAddress_Find_Result> PropertyAddress_Find(Nullable<bool> searchUsinGOR, Nullable<int> propertyAddressId, Nullable<int> propertyId, Nullable<int> addressTypeId, string street1, string street2, string city, Nullable<int> stateId, string zipCode, string attention, Nullable<bool> isSyncNeeded, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, Nullable<double> gpsLatitude, Nullable<double> gpsLongitude, Nullable<double> gpsRadius)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var propertyAddressIdParameter = propertyAddressId.HasValue ?
                new ObjectParameter("PropertyAddressId", propertyAddressId) :
                new ObjectParameter("PropertyAddressId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var addressTypeIdParameter = addressTypeId.HasValue ?
                new ObjectParameter("AddressTypeId", addressTypeId) :
                new ObjectParameter("AddressTypeId", typeof(int));
    
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            var street2Parameter = street2 != null ?
                new ObjectParameter("Street2", street2) :
                new ObjectParameter("Street2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var attentionParameter = attention != null ?
                new ObjectParameter("Attention", attention) :
                new ObjectParameter("Attention", typeof(string));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var gpsLatitudeParameter = gpsLatitude.HasValue ?
                new ObjectParameter("GpsLatitude", gpsLatitude) :
                new ObjectParameter("GpsLatitude", typeof(double));
    
            var gpsLongitudeParameter = gpsLongitude.HasValue ?
                new ObjectParameter("GpsLongitude", gpsLongitude) :
                new ObjectParameter("GpsLongitude", typeof(double));
    
            var gpsRadiusParameter = gpsRadius.HasValue ?
                new ObjectParameter("GpsRadius", gpsRadius) :
                new ObjectParameter("GpsRadius", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyAddress_Find_Result>("PropertyAddress_Find", searchUsinGORParameter, propertyAddressIdParameter, propertyIdParameter, addressTypeIdParameter, street1Parameter, street2Parameter, cityParameter, stateIdParameter, zipCodeParameter, attentionParameter, isSyncNeededParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, gpsLatitudeParameter, gpsLongitudeParameter, gpsRadiusParameter);
        }
    
        public virtual ObjectResult<PropertyAddress_Get_List_Result> PropertyAddress_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyAddress_Get_List_Result>("PropertyAddress_Get_List");
        }
    
        public virtual ObjectResult<PropertyAddress_GetByAddressTypeId_Result> PropertyAddress_GetByAddressTypeId(Nullable<int> addressTypeId)
        {
            var addressTypeIdParameter = addressTypeId.HasValue ?
                new ObjectParameter("AddressTypeId", addressTypeId) :
                new ObjectParameter("AddressTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyAddress_GetByAddressTypeId_Result>("PropertyAddress_GetByAddressTypeId", addressTypeIdParameter);
        }
    
        public virtual ObjectResult<PropertyAddress_GetByPropertyAddressId_Result> PropertyAddress_GetByPropertyAddressId(Nullable<int> propertyAddressId)
        {
            var propertyAddressIdParameter = propertyAddressId.HasValue ?
                new ObjectParameter("PropertyAddressId", propertyAddressId) :
                new ObjectParameter("PropertyAddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyAddress_GetByPropertyAddressId_Result>("PropertyAddress_GetByPropertyAddressId", propertyAddressIdParameter);
        }
    
        public virtual ObjectResult<PropertyAddress_GetByPropertyId_Result> PropertyAddress_GetByPropertyId(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyAddress_GetByPropertyId_Result>("PropertyAddress_GetByPropertyId", propertyIdParameter);
        }
    
        public virtual ObjectResult<PropertyAddress_GetByPropertyIdAddressTypeId_Result> PropertyAddress_GetByPropertyIdAddressTypeId(Nullable<int> propertyId, Nullable<int> addressTypeId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var addressTypeIdParameter = addressTypeId.HasValue ?
                new ObjectParameter("AddressTypeId", addressTypeId) :
                new ObjectParameter("AddressTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyAddress_GetByPropertyIdAddressTypeId_Result>("PropertyAddress_GetByPropertyIdAddressTypeId", propertyIdParameter, addressTypeIdParameter);
        }
    
        public virtual ObjectResult<PropertyAddress_GetByStateId_Result> PropertyAddress_GetByStateId(Nullable<int> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyAddress_GetByStateId_Result>("PropertyAddress_GetByStateId", stateIdParameter);
        }
    
        public virtual int PropertyAddress_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyAddress_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int PropertyAddress_Insert(ObjectParameter propertyAddressId, Nullable<int> propertyId, Nullable<int> addressTypeId, string street1, string street2, string city, Nullable<int> stateId, string zipCode, string attention, Nullable<bool> isSyncNeeded, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, Nullable<double> gpsLatitude, Nullable<double> gpsLongitude, Nullable<double> gpsRadius)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var addressTypeIdParameter = addressTypeId.HasValue ?
                new ObjectParameter("AddressTypeId", addressTypeId) :
                new ObjectParameter("AddressTypeId", typeof(int));
    
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            var street2Parameter = street2 != null ?
                new ObjectParameter("Street2", street2) :
                new ObjectParameter("Street2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var attentionParameter = attention != null ?
                new ObjectParameter("Attention", attention) :
                new ObjectParameter("Attention", typeof(string));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var gpsLatitudeParameter = gpsLatitude.HasValue ?
                new ObjectParameter("GpsLatitude", gpsLatitude) :
                new ObjectParameter("GpsLatitude", typeof(double));
    
            var gpsLongitudeParameter = gpsLongitude.HasValue ?
                new ObjectParameter("GpsLongitude", gpsLongitude) :
                new ObjectParameter("GpsLongitude", typeof(double));
    
            var gpsRadiusParameter = gpsRadius.HasValue ?
                new ObjectParameter("GpsRadius", gpsRadius) :
                new ObjectParameter("GpsRadius", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyAddress_Insert", propertyAddressId, propertyIdParameter, addressTypeIdParameter, street1Parameter, street2Parameter, cityParameter, stateIdParameter, zipCodeParameter, attentionParameter, isSyncNeededParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, gpsLatitudeParameter, gpsLongitudeParameter, gpsRadiusParameter);
        }
    
        public virtual int PropertyAddress_Update(Nullable<int> propertyAddressId, Nullable<int> propertyId, Nullable<int> addressTypeId, string street1, string street2, string city, Nullable<int> stateId, string zipCode, string attention, Nullable<bool> isSyncNeeded, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, Nullable<double> gpsLatitude, Nullable<double> gpsLongitude, Nullable<double> gpsRadius)
        {
            var propertyAddressIdParameter = propertyAddressId.HasValue ?
                new ObjectParameter("PropertyAddressId", propertyAddressId) :
                new ObjectParameter("PropertyAddressId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var addressTypeIdParameter = addressTypeId.HasValue ?
                new ObjectParameter("AddressTypeId", addressTypeId) :
                new ObjectParameter("AddressTypeId", typeof(int));
    
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            var street2Parameter = street2 != null ?
                new ObjectParameter("Street2", street2) :
                new ObjectParameter("Street2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var attentionParameter = attention != null ?
                new ObjectParameter("Attention", attention) :
                new ObjectParameter("Attention", typeof(string));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var gpsLatitudeParameter = gpsLatitude.HasValue ?
                new ObjectParameter("GpsLatitude", gpsLatitude) :
                new ObjectParameter("GpsLatitude", typeof(double));
    
            var gpsLongitudeParameter = gpsLongitude.HasValue ?
                new ObjectParameter("GpsLongitude", gpsLongitude) :
                new ObjectParameter("GpsLongitude", typeof(double));
    
            var gpsRadiusParameter = gpsRadius.HasValue ?
                new ObjectParameter("GpsRadius", gpsRadius) :
                new ObjectParameter("GpsRadius", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyAddress_Update", propertyAddressIdParameter, propertyIdParameter, addressTypeIdParameter, street1Parameter, street2Parameter, cityParameter, stateIdParameter, zipCodeParameter, attentionParameter, isSyncNeededParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, gpsLatitudeParameter, gpsLongitudeParameter, gpsRadiusParameter);
        }
    
        public virtual int PropertyContact_Delete(Nullable<int> propertyContactId)
        {
            var propertyContactIdParameter = propertyContactId.HasValue ?
                new ObjectParameter("PropertyContactId", propertyContactId) :
                new ObjectParameter("PropertyContactId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyContact_Delete", propertyContactIdParameter);
        }
    
        public virtual ObjectResult<PropertyContact_Find_Result> PropertyContact_Find(Nullable<bool> searchUsinGOR, Nullable<int> propertyContactId, Nullable<int> propertyId, Nullable<int> contactTypeId, string name, string title, string workPhoneNumber, Nullable<int> workPhoneNumberExtention, string mobilePhoneNumber, string faxNumber, string emailAddress, Nullable<bool> isSyncNeeded, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var propertyContactIdParameter = propertyContactId.HasValue ?
                new ObjectParameter("PropertyContactId", propertyContactId) :
                new ObjectParameter("PropertyContactId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var contactTypeIdParameter = contactTypeId.HasValue ?
                new ObjectParameter("ContactTypeId", contactTypeId) :
                new ObjectParameter("ContactTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var workPhoneNumberParameter = workPhoneNumber != null ?
                new ObjectParameter("WorkPhoneNumber", workPhoneNumber) :
                new ObjectParameter("WorkPhoneNumber", typeof(string));
    
            var workPhoneNumberExtentionParameter = workPhoneNumberExtention.HasValue ?
                new ObjectParameter("WorkPhoneNumberExtention", workPhoneNumberExtention) :
                new ObjectParameter("WorkPhoneNumberExtention", typeof(int));
    
            var mobilePhoneNumberParameter = mobilePhoneNumber != null ?
                new ObjectParameter("MobilePhoneNumber", mobilePhoneNumber) :
                new ObjectParameter("MobilePhoneNumber", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyContact_Find_Result>("PropertyContact_Find", searchUsinGORParameter, propertyContactIdParameter, propertyIdParameter, contactTypeIdParameter, nameParameter, titleParameter, workPhoneNumberParameter, workPhoneNumberExtentionParameter, mobilePhoneNumberParameter, faxNumberParameter, emailAddressParameter, isSyncNeededParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<PropertyContact_Get_List_Result> PropertyContact_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyContact_Get_List_Result>("PropertyContact_Get_List");
        }
    
        public virtual ObjectResult<PropertyContact_GetByContactTypeId_Result> PropertyContact_GetByContactTypeId(Nullable<int> contactTypeId)
        {
            var contactTypeIdParameter = contactTypeId.HasValue ?
                new ObjectParameter("ContactTypeId", contactTypeId) :
                new ObjectParameter("ContactTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyContact_GetByContactTypeId_Result>("PropertyContact_GetByContactTypeId", contactTypeIdParameter);
        }
    
        public virtual ObjectResult<PropertyContact_GetByPropertyContactId_Result> PropertyContact_GetByPropertyContactId(Nullable<int> propertyContactId)
        {
            var propertyContactIdParameter = propertyContactId.HasValue ?
                new ObjectParameter("PropertyContactId", propertyContactId) :
                new ObjectParameter("PropertyContactId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyContact_GetByPropertyContactId_Result>("PropertyContact_GetByPropertyContactId", propertyContactIdParameter);
        }
    
        public virtual ObjectResult<PropertyContact_GetByPropertyId_Result> PropertyContact_GetByPropertyId(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyContact_GetByPropertyId_Result>("PropertyContact_GetByPropertyId", propertyIdParameter);
        }
    
        public virtual int PropertyContact_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyContact_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int PropertyContact_Insert(ObjectParameter propertyContactId, Nullable<int> propertyId, Nullable<int> contactTypeId, string name, string title, string workPhoneNumber, Nullable<int> workPhoneNumberExtention, string mobilePhoneNumber, string faxNumber, string emailAddress, Nullable<bool> isSyncNeeded, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var contactTypeIdParameter = contactTypeId.HasValue ?
                new ObjectParameter("ContactTypeId", contactTypeId) :
                new ObjectParameter("ContactTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var workPhoneNumberParameter = workPhoneNumber != null ?
                new ObjectParameter("WorkPhoneNumber", workPhoneNumber) :
                new ObjectParameter("WorkPhoneNumber", typeof(string));
    
            var workPhoneNumberExtentionParameter = workPhoneNumberExtention.HasValue ?
                new ObjectParameter("WorkPhoneNumberExtention", workPhoneNumberExtention) :
                new ObjectParameter("WorkPhoneNumberExtention", typeof(int));
    
            var mobilePhoneNumberParameter = mobilePhoneNumber != null ?
                new ObjectParameter("MobilePhoneNumber", mobilePhoneNumber) :
                new ObjectParameter("MobilePhoneNumber", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyContact_Insert", propertyContactId, propertyIdParameter, contactTypeIdParameter, nameParameter, titleParameter, workPhoneNumberParameter, workPhoneNumberExtentionParameter, mobilePhoneNumberParameter, faxNumberParameter, emailAddressParameter, isSyncNeededParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int PropertyContact_Update(Nullable<int> propertyContactId, Nullable<int> propertyId, Nullable<int> contactTypeId, string name, string title, string workPhoneNumber, Nullable<int> workPhoneNumberExtention, string mobilePhoneNumber, string faxNumber, string emailAddress, Nullable<bool> isSyncNeeded, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var propertyContactIdParameter = propertyContactId.HasValue ?
                new ObjectParameter("PropertyContactId", propertyContactId) :
                new ObjectParameter("PropertyContactId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var contactTypeIdParameter = contactTypeId.HasValue ?
                new ObjectParameter("ContactTypeId", contactTypeId) :
                new ObjectParameter("ContactTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var workPhoneNumberParameter = workPhoneNumber != null ?
                new ObjectParameter("WorkPhoneNumber", workPhoneNumber) :
                new ObjectParameter("WorkPhoneNumber", typeof(string));
    
            var workPhoneNumberExtentionParameter = workPhoneNumberExtention.HasValue ?
                new ObjectParameter("WorkPhoneNumberExtention", workPhoneNumberExtention) :
                new ObjectParameter("WorkPhoneNumberExtention", typeof(int));
    
            var mobilePhoneNumberParameter = mobilePhoneNumber != null ?
                new ObjectParameter("MobilePhoneNumber", mobilePhoneNumber) :
                new ObjectParameter("MobilePhoneNumber", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyContact_Update", propertyContactIdParameter, propertyIdParameter, contactTypeIdParameter, nameParameter, titleParameter, workPhoneNumberParameter, workPhoneNumberExtentionParameter, mobilePhoneNumberParameter, faxNumberParameter, emailAddressParameter, isSyncNeededParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int PropertyContract_Delete(Nullable<int> propertyContractId)
        {
            var propertyContractIdParameter = propertyContractId.HasValue ?
                new ObjectParameter("PropertyContractId", propertyContractId) :
                new ObjectParameter("PropertyContractId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyContract_Delete", propertyContractIdParameter);
        }
    
        public virtual ObjectResult<PropertyContract_Find_Result> PropertyContract_Find(Nullable<bool> searchUsinGOR, Nullable<int> propertyContractId, Nullable<int> propertyId, Nullable<bool> isSignatureRequired, Nullable<bool> isFuelSurcharge, Nullable<bool> isFinanceCharge, Nullable<bool> isCreditCardFee, Nullable<bool> isThirdParty, Nullable<int> paymentTermId, string poNumber, Nullable<bool> isProposal, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, Nullable<bool> isVerbal)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var propertyContractIdParameter = propertyContractId.HasValue ?
                new ObjectParameter("PropertyContractId", propertyContractId) :
                new ObjectParameter("PropertyContractId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var isSignatureRequiredParameter = isSignatureRequired.HasValue ?
                new ObjectParameter("IsSignatureRequired", isSignatureRequired) :
                new ObjectParameter("IsSignatureRequired", typeof(bool));
    
            var isFuelSurchargeParameter = isFuelSurcharge.HasValue ?
                new ObjectParameter("IsFuelSurcharge", isFuelSurcharge) :
                new ObjectParameter("IsFuelSurcharge", typeof(bool));
    
            var isFinanceChargeParameter = isFinanceCharge.HasValue ?
                new ObjectParameter("IsFinanceCharge", isFinanceCharge) :
                new ObjectParameter("IsFinanceCharge", typeof(bool));
    
            var isCreditCardFeeParameter = isCreditCardFee.HasValue ?
                new ObjectParameter("IsCreditCardFee", isCreditCardFee) :
                new ObjectParameter("IsCreditCardFee", typeof(bool));
    
            var isThirdPartyParameter = isThirdParty.HasValue ?
                new ObjectParameter("IsThirdParty", isThirdParty) :
                new ObjectParameter("IsThirdParty", typeof(bool));
    
            var paymentTermIdParameter = paymentTermId.HasValue ?
                new ObjectParameter("PaymentTermId", paymentTermId) :
                new ObjectParameter("PaymentTermId", typeof(int));
    
            var poNumberParameter = poNumber != null ?
                new ObjectParameter("PoNumber", poNumber) :
                new ObjectParameter("PoNumber", typeof(string));
    
            var isProposalParameter = isProposal.HasValue ?
                new ObjectParameter("IsProposal", isProposal) :
                new ObjectParameter("IsProposal", typeof(bool));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var isVerbalParameter = isVerbal.HasValue ?
                new ObjectParameter("IsVerbal", isVerbal) :
                new ObjectParameter("IsVerbal", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyContract_Find_Result>("PropertyContract_Find", searchUsinGORParameter, propertyContractIdParameter, propertyIdParameter, isSignatureRequiredParameter, isFuelSurchargeParameter, isFinanceChargeParameter, isCreditCardFeeParameter, isThirdPartyParameter, paymentTermIdParameter, poNumberParameter, isProposalParameter, effectiveDateParameter, expirationDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, isVerbalParameter);
        }
    
        public virtual ObjectResult<PropertyContract_Get_List_Result> PropertyContract_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyContract_Get_List_Result>("PropertyContract_Get_List");
        }
    
        public virtual ObjectResult<PropertyContract_GetByPaymentTermId_Result> PropertyContract_GetByPaymentTermId(Nullable<int> paymentTermId)
        {
            var paymentTermIdParameter = paymentTermId.HasValue ?
                new ObjectParameter("PaymentTermId", paymentTermId) :
                new ObjectParameter("PaymentTermId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyContract_GetByPaymentTermId_Result>("PropertyContract_GetByPaymentTermId", paymentTermIdParameter);
        }
    
        public virtual ObjectResult<PropertyContract_GetByPropertyContractId_Result> PropertyContract_GetByPropertyContractId(Nullable<int> propertyContractId)
        {
            var propertyContractIdParameter = propertyContractId.HasValue ?
                new ObjectParameter("PropertyContractId", propertyContractId) :
                new ObjectParameter("PropertyContractId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyContract_GetByPropertyContractId_Result>("PropertyContract_GetByPropertyContractId", propertyContractIdParameter);
        }
    
        public virtual ObjectResult<PropertyContract_GetByPropertyId_Result> PropertyContract_GetByPropertyId(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyContract_GetByPropertyId_Result>("PropertyContract_GetByPropertyId", propertyIdParameter);
        }
    
        public virtual int PropertyContract_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyContract_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int PropertyContract_Insert(ObjectParameter propertyContractId, Nullable<int> propertyId, Nullable<bool> isSignatureRequired, Nullable<bool> isFuelSurcharge, Nullable<bool> isFinanceCharge, Nullable<bool> isCreditCardFee, Nullable<bool> isThirdParty, Nullable<int> paymentTermId, string poNumber, Nullable<bool> isProposal, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, Nullable<bool> isVerbal)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var isSignatureRequiredParameter = isSignatureRequired.HasValue ?
                new ObjectParameter("IsSignatureRequired", isSignatureRequired) :
                new ObjectParameter("IsSignatureRequired", typeof(bool));
    
            var isFuelSurchargeParameter = isFuelSurcharge.HasValue ?
                new ObjectParameter("IsFuelSurcharge", isFuelSurcharge) :
                new ObjectParameter("IsFuelSurcharge", typeof(bool));
    
            var isFinanceChargeParameter = isFinanceCharge.HasValue ?
                new ObjectParameter("IsFinanceCharge", isFinanceCharge) :
                new ObjectParameter("IsFinanceCharge", typeof(bool));
    
            var isCreditCardFeeParameter = isCreditCardFee.HasValue ?
                new ObjectParameter("IsCreditCardFee", isCreditCardFee) :
                new ObjectParameter("IsCreditCardFee", typeof(bool));
    
            var isThirdPartyParameter = isThirdParty.HasValue ?
                new ObjectParameter("IsThirdParty", isThirdParty) :
                new ObjectParameter("IsThirdParty", typeof(bool));
    
            var paymentTermIdParameter = paymentTermId.HasValue ?
                new ObjectParameter("PaymentTermId", paymentTermId) :
                new ObjectParameter("PaymentTermId", typeof(int));
    
            var poNumberParameter = poNumber != null ?
                new ObjectParameter("PoNumber", poNumber) :
                new ObjectParameter("PoNumber", typeof(string));
    
            var isProposalParameter = isProposal.HasValue ?
                new ObjectParameter("IsProposal", isProposal) :
                new ObjectParameter("IsProposal", typeof(bool));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var isVerbalParameter = isVerbal.HasValue ?
                new ObjectParameter("IsVerbal", isVerbal) :
                new ObjectParameter("IsVerbal", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyContract_Insert", propertyContractId, propertyIdParameter, isSignatureRequiredParameter, isFuelSurchargeParameter, isFinanceChargeParameter, isCreditCardFeeParameter, isThirdPartyParameter, paymentTermIdParameter, poNumberParameter, isProposalParameter, effectiveDateParameter, expirationDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, isVerbalParameter);
        }
    
        public virtual int PropertyContract_Update(Nullable<int> propertyContractId, Nullable<int> propertyId, Nullable<bool> isSignatureRequired, Nullable<bool> isFuelSurcharge, Nullable<bool> isFinanceCharge, Nullable<bool> isCreditCardFee, Nullable<bool> isThirdParty, Nullable<int> paymentTermId, string poNumber, Nullable<bool> isProposal, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, Nullable<bool> isVerbal)
        {
            var propertyContractIdParameter = propertyContractId.HasValue ?
                new ObjectParameter("PropertyContractId", propertyContractId) :
                new ObjectParameter("PropertyContractId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var isSignatureRequiredParameter = isSignatureRequired.HasValue ?
                new ObjectParameter("IsSignatureRequired", isSignatureRequired) :
                new ObjectParameter("IsSignatureRequired", typeof(bool));
    
            var isFuelSurchargeParameter = isFuelSurcharge.HasValue ?
                new ObjectParameter("IsFuelSurcharge", isFuelSurcharge) :
                new ObjectParameter("IsFuelSurcharge", typeof(bool));
    
            var isFinanceChargeParameter = isFinanceCharge.HasValue ?
                new ObjectParameter("IsFinanceCharge", isFinanceCharge) :
                new ObjectParameter("IsFinanceCharge", typeof(bool));
    
            var isCreditCardFeeParameter = isCreditCardFee.HasValue ?
                new ObjectParameter("IsCreditCardFee", isCreditCardFee) :
                new ObjectParameter("IsCreditCardFee", typeof(bool));
    
            var isThirdPartyParameter = isThirdParty.HasValue ?
                new ObjectParameter("IsThirdParty", isThirdParty) :
                new ObjectParameter("IsThirdParty", typeof(bool));
    
            var paymentTermIdParameter = paymentTermId.HasValue ?
                new ObjectParameter("PaymentTermId", paymentTermId) :
                new ObjectParameter("PaymentTermId", typeof(int));
    
            var poNumberParameter = poNumber != null ?
                new ObjectParameter("PoNumber", poNumber) :
                new ObjectParameter("PoNumber", typeof(string));
    
            var isProposalParameter = isProposal.HasValue ?
                new ObjectParameter("IsProposal", isProposal) :
                new ObjectParameter("IsProposal", typeof(bool));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var isVerbalParameter = isVerbal.HasValue ?
                new ObjectParameter("IsVerbal", isVerbal) :
                new ObjectParameter("IsVerbal", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyContract_Update", propertyContractIdParameter, propertyIdParameter, isSignatureRequiredParameter, isFuelSurchargeParameter, isFinanceChargeParameter, isCreditCardFeeParameter, isThirdPartyParameter, paymentTermIdParameter, poNumberParameter, isProposalParameter, effectiveDateParameter, expirationDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, isVerbalParameter);
        }
    
        public virtual int PropertyDocument_Delete(Nullable<int> propertyDocumentId)
        {
            var propertyDocumentIdParameter = propertyDocumentId.HasValue ?
                new ObjectParameter("PropertyDocumentId", propertyDocumentId) :
                new ObjectParameter("PropertyDocumentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyDocument_Delete", propertyDocumentIdParameter);
        }
    
        public virtual ObjectResult<PropertyDocument_Find_Result> PropertyDocument_Find(Nullable<bool> searchUsinGOR, Nullable<int> propertyDocumentId, Nullable<int> propertyId, string documentName, byte[] documentFile, string comment, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var propertyDocumentIdParameter = propertyDocumentId.HasValue ?
                new ObjectParameter("PropertyDocumentId", propertyDocumentId) :
                new ObjectParameter("PropertyDocumentId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var documentFileParameter = documentFile != null ?
                new ObjectParameter("DocumentFile", documentFile) :
                new ObjectParameter("DocumentFile", typeof(byte[]));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyDocument_Find_Result>("PropertyDocument_Find", searchUsinGORParameter, propertyDocumentIdParameter, propertyIdParameter, documentNameParameter, documentFileParameter, commentParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<PropertyDocument_Get_List_Result> PropertyDocument_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyDocument_Get_List_Result>("PropertyDocument_Get_List");
        }
    
        public virtual ObjectResult<PropertyDocument_GetByPropertyDocumentId_Result> PropertyDocument_GetByPropertyDocumentId(Nullable<int> propertyDocumentId)
        {
            var propertyDocumentIdParameter = propertyDocumentId.HasValue ?
                new ObjectParameter("PropertyDocumentId", propertyDocumentId) :
                new ObjectParameter("PropertyDocumentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyDocument_GetByPropertyDocumentId_Result>("PropertyDocument_GetByPropertyDocumentId", propertyDocumentIdParameter);
        }
    
        public virtual ObjectResult<PropertyDocument_GetByPropertyId_Result> PropertyDocument_GetByPropertyId(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyDocument_GetByPropertyId_Result>("PropertyDocument_GetByPropertyId", propertyIdParameter);
        }
    
        public virtual int PropertyDocument_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyDocument_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int PropertyDocument_Insert(ObjectParameter propertyDocumentId, Nullable<int> propertyId, string documentName, byte[] documentFile, string comment, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var documentFileParameter = documentFile != null ?
                new ObjectParameter("DocumentFile", documentFile) :
                new ObjectParameter("DocumentFile", typeof(byte[]));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyDocument_Insert", propertyDocumentId, propertyIdParameter, documentNameParameter, documentFileParameter, commentParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int PropertyDocument_Update(Nullable<int> propertyDocumentId, Nullable<int> propertyId, string documentName, byte[] documentFile, string comment, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var propertyDocumentIdParameter = propertyDocumentId.HasValue ?
                new ObjectParameter("PropertyDocumentId", propertyDocumentId) :
                new ObjectParameter("PropertyDocumentId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var documentFileParameter = documentFile != null ?
                new ObjectParameter("DocumentFile", documentFile) :
                new ObjectParameter("DocumentFile", typeof(byte[]));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyDocument_Update", propertyDocumentIdParameter, propertyIdParameter, documentNameParameter, documentFileParameter, commentParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int PropertyFeeRate_Delete(Nullable<int> propertyFeeRateId)
        {
            var propertyFeeRateIdParameter = propertyFeeRateId.HasValue ?
                new ObjectParameter("PropertyFeeRateId", propertyFeeRateId) :
                new ObjectParameter("PropertyFeeRateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyFeeRate_Delete", propertyFeeRateIdParameter);
        }
    
        public virtual ObjectResult<PropertyFeeRate_Find_Result> PropertyFeeRate_Find(Nullable<bool> searchUsinGOR, Nullable<int> propertyFeeRateId, Nullable<int> propertyContractId, Nullable<int> equipmentId, Nullable<double> rate, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var propertyFeeRateIdParameter = propertyFeeRateId.HasValue ?
                new ObjectParameter("PropertyFeeRateId", propertyFeeRateId) :
                new ObjectParameter("PropertyFeeRateId", typeof(int));
    
            var propertyContractIdParameter = propertyContractId.HasValue ?
                new ObjectParameter("PropertyContractId", propertyContractId) :
                new ObjectParameter("PropertyContractId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyFeeRate_Find_Result>("PropertyFeeRate_Find", searchUsinGORParameter, propertyFeeRateIdParameter, propertyContractIdParameter, equipmentIdParameter, rateParameter, effectiveDateParameter, expirationDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<PropertyFeeRate_Get_List_Result> PropertyFeeRate_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyFeeRate_Get_List_Result>("PropertyFeeRate_Get_List");
        }
    
        public virtual ObjectResult<PropertyFeeRate_GetByEquipmentId_Result> PropertyFeeRate_GetByEquipmentId(Nullable<int> equipmentId)
        {
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyFeeRate_GetByEquipmentId_Result>("PropertyFeeRate_GetByEquipmentId", equipmentIdParameter);
        }
    
        public virtual ObjectResult<PropertyFeeRate_GetByPropertyContractId_Result> PropertyFeeRate_GetByPropertyContractId(Nullable<int> propertyContractId)
        {
            var propertyContractIdParameter = propertyContractId.HasValue ?
                new ObjectParameter("PropertyContractId", propertyContractId) :
                new ObjectParameter("PropertyContractId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyFeeRate_GetByPropertyContractId_Result>("PropertyFeeRate_GetByPropertyContractId", propertyContractIdParameter);
        }
    
        public virtual ObjectResult<PropertyFeeRate_GetByPropertyContractIdEquipmentId_Result> PropertyFeeRate_GetByPropertyContractIdEquipmentId(Nullable<int> propertyContractId, Nullable<int> equipmentId)
        {
            var propertyContractIdParameter = propertyContractId.HasValue ?
                new ObjectParameter("PropertyContractId", propertyContractId) :
                new ObjectParameter("PropertyContractId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyFeeRate_GetByPropertyContractIdEquipmentId_Result>("PropertyFeeRate_GetByPropertyContractIdEquipmentId", propertyContractIdParameter, equipmentIdParameter);
        }
    
        public virtual ObjectResult<PropertyFeeRate_GetByPropertyFeeRateId_Result> PropertyFeeRate_GetByPropertyFeeRateId(Nullable<int> propertyFeeRateId)
        {
            var propertyFeeRateIdParameter = propertyFeeRateId.HasValue ?
                new ObjectParameter("PropertyFeeRateId", propertyFeeRateId) :
                new ObjectParameter("PropertyFeeRateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyFeeRate_GetByPropertyFeeRateId_Result>("PropertyFeeRate_GetByPropertyFeeRateId", propertyFeeRateIdParameter);
        }
    
        public virtual int PropertyFeeRate_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyFeeRate_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int PropertyFeeRate_Insert(ObjectParameter propertyFeeRateId, Nullable<int> propertyContractId, Nullable<int> equipmentId, Nullable<double> rate, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var propertyContractIdParameter = propertyContractId.HasValue ?
                new ObjectParameter("PropertyContractId", propertyContractId) :
                new ObjectParameter("PropertyContractId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyFeeRate_Insert", propertyFeeRateId, propertyContractIdParameter, equipmentIdParameter, rateParameter, effectiveDateParameter, expirationDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int PropertyFeeRate_Update(Nullable<int> propertyFeeRateId, Nullable<int> propertyContractId, Nullable<int> equipmentId, Nullable<double> rate, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var propertyFeeRateIdParameter = propertyFeeRateId.HasValue ?
                new ObjectParameter("PropertyFeeRateId", propertyFeeRateId) :
                new ObjectParameter("PropertyFeeRateId", typeof(int));
    
            var propertyContractIdParameter = propertyContractId.HasValue ?
                new ObjectParameter("PropertyContractId", propertyContractId) :
                new ObjectParameter("PropertyContractId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyFeeRate_Update", propertyFeeRateIdParameter, propertyContractIdParameter, equipmentIdParameter, rateParameter, effectiveDateParameter, expirationDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int PropertyFlatRate_Delete(Nullable<int> propertyFlatRateId)
        {
            var propertyFlatRateIdParameter = propertyFlatRateId.HasValue ?
                new ObjectParameter("PropertyFlatRateId", propertyFlatRateId) :
                new ObjectParameter("PropertyFlatRateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyFlatRate_Delete", propertyFlatRateIdParameter);
        }
    
        public virtual ObjectResult<PropertyFlatRate_Find_Result> PropertyFlatRate_Find(Nullable<bool> searchUsinGOR, Nullable<int> propertyFlatRateId, Nullable<int> propertyContractId, Nullable<int> workTypeId, string description, Nullable<double> minValue, Nullable<double> maxValue, Nullable<double> rate, Nullable<double> vendorFee, Nullable<bool> isTonnage, Nullable<bool> isDefault, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, string shortName)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var propertyFlatRateIdParameter = propertyFlatRateId.HasValue ?
                new ObjectParameter("PropertyFlatRateId", propertyFlatRateId) :
                new ObjectParameter("PropertyFlatRateId", typeof(int));
    
            var propertyContractIdParameter = propertyContractId.HasValue ?
                new ObjectParameter("PropertyContractId", propertyContractId) :
                new ObjectParameter("PropertyContractId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var minValueParameter = minValue.HasValue ?
                new ObjectParameter("MinValue", minValue) :
                new ObjectParameter("MinValue", typeof(double));
    
            var maxValueParameter = maxValue.HasValue ?
                new ObjectParameter("MaxValue", maxValue) :
                new ObjectParameter("MaxValue", typeof(double));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var vendorFeeParameter = vendorFee.HasValue ?
                new ObjectParameter("VendorFee", vendorFee) :
                new ObjectParameter("VendorFee", typeof(double));
    
            var isTonnageParameter = isTonnage.HasValue ?
                new ObjectParameter("IsTonnage", isTonnage) :
                new ObjectParameter("IsTonnage", typeof(bool));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("ShortName", shortName) :
                new ObjectParameter("ShortName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyFlatRate_Find_Result>("PropertyFlatRate_Find", searchUsinGORParameter, propertyFlatRateIdParameter, propertyContractIdParameter, workTypeIdParameter, descriptionParameter, minValueParameter, maxValueParameter, rateParameter, vendorFeeParameter, isTonnageParameter, isDefaultParameter, effectiveDateParameter, expirationDateParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, shortNameParameter);
        }
    
        public virtual ObjectResult<PropertyFlatRate_Get_List_Result> PropertyFlatRate_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyFlatRate_Get_List_Result>("PropertyFlatRate_Get_List");
        }
    
        public virtual ObjectResult<PropertyFlatRate_GetByPropertyContractId_Result> PropertyFlatRate_GetByPropertyContractId(Nullable<int> propertyContractId)
        {
            var propertyContractIdParameter = propertyContractId.HasValue ?
                new ObjectParameter("PropertyContractId", propertyContractId) :
                new ObjectParameter("PropertyContractId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyFlatRate_GetByPropertyContractId_Result>("PropertyFlatRate_GetByPropertyContractId", propertyContractIdParameter);
        }
    
        public virtual ObjectResult<PropertyFlatRate_GetByPropertyFlatRateId_Result> PropertyFlatRate_GetByPropertyFlatRateId(Nullable<int> propertyFlatRateId)
        {
            var propertyFlatRateIdParameter = propertyFlatRateId.HasValue ?
                new ObjectParameter("PropertyFlatRateId", propertyFlatRateId) :
                new ObjectParameter("PropertyFlatRateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyFlatRate_GetByPropertyFlatRateId_Result>("PropertyFlatRate_GetByPropertyFlatRateId", propertyFlatRateIdParameter);
        }
    
        public virtual ObjectResult<PropertyFlatRate_GetByWorkTypeId_Result> PropertyFlatRate_GetByWorkTypeId(Nullable<int> workTypeId)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyFlatRate_GetByWorkTypeId_Result>("PropertyFlatRate_GetByWorkTypeId", workTypeIdParameter);
        }
    
        public virtual int PropertyFlatRate_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyFlatRate_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int PropertyFlatRate_Insert(ObjectParameter propertyFlatRateId, Nullable<int> propertyContractId, Nullable<int> workTypeId, string description, Nullable<double> minValue, Nullable<double> maxValue, Nullable<double> rate, Nullable<double> vendorFee, Nullable<bool> isTonnage, Nullable<bool> isDefault, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, string shortName)
        {
            var propertyContractIdParameter = propertyContractId.HasValue ?
                new ObjectParameter("PropertyContractId", propertyContractId) :
                new ObjectParameter("PropertyContractId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var minValueParameter = minValue.HasValue ?
                new ObjectParameter("MinValue", minValue) :
                new ObjectParameter("MinValue", typeof(double));
    
            var maxValueParameter = maxValue.HasValue ?
                new ObjectParameter("MaxValue", maxValue) :
                new ObjectParameter("MaxValue", typeof(double));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var vendorFeeParameter = vendorFee.HasValue ?
                new ObjectParameter("VendorFee", vendorFee) :
                new ObjectParameter("VendorFee", typeof(double));
    
            var isTonnageParameter = isTonnage.HasValue ?
                new ObjectParameter("IsTonnage", isTonnage) :
                new ObjectParameter("IsTonnage", typeof(bool));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("ShortName", shortName) :
                new ObjectParameter("ShortName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyFlatRate_Insert", propertyFlatRateId, propertyContractIdParameter, workTypeIdParameter, descriptionParameter, minValueParameter, maxValueParameter, rateParameter, vendorFeeParameter, isTonnageParameter, isDefaultParameter, effectiveDateParameter, expirationDateParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, shortNameParameter);
        }
    
        public virtual int PropertyFlatRate_Update(Nullable<int> propertyFlatRateId, Nullable<int> propertyContractId, Nullable<int> workTypeId, string description, Nullable<double> minValue, Nullable<double> maxValue, Nullable<double> rate, Nullable<double> vendorFee, Nullable<bool> isTonnage, Nullable<bool> isDefault, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, string shortName)
        {
            var propertyFlatRateIdParameter = propertyFlatRateId.HasValue ?
                new ObjectParameter("PropertyFlatRateId", propertyFlatRateId) :
                new ObjectParameter("PropertyFlatRateId", typeof(int));
    
            var propertyContractIdParameter = propertyContractId.HasValue ?
                new ObjectParameter("PropertyContractId", propertyContractId) :
                new ObjectParameter("PropertyContractId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var minValueParameter = minValue.HasValue ?
                new ObjectParameter("MinValue", minValue) :
                new ObjectParameter("MinValue", typeof(double));
    
            var maxValueParameter = maxValue.HasValue ?
                new ObjectParameter("MaxValue", maxValue) :
                new ObjectParameter("MaxValue", typeof(double));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var vendorFeeParameter = vendorFee.HasValue ?
                new ObjectParameter("VendorFee", vendorFee) :
                new ObjectParameter("VendorFee", typeof(double));
    
            var isTonnageParameter = isTonnage.HasValue ?
                new ObjectParameter("IsTonnage", isTonnage) :
                new ObjectParameter("IsTonnage", typeof(bool));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("ShortName", shortName) :
                new ObjectParameter("ShortName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyFlatRate_Update", propertyFlatRateIdParameter, propertyContractIdParameter, workTypeIdParameter, descriptionParameter, minValueParameter, maxValueParameter, rateParameter, vendorFeeParameter, isTonnageParameter, isDefaultParameter, effectiveDateParameter, expirationDateParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, shortNameParameter);
        }
    
        public virtual int PropertyInvoiceDelivery_Delete(Nullable<int> propertyInvoiceDeliveryId)
        {
            var propertyInvoiceDeliveryIdParameter = propertyInvoiceDeliveryId.HasValue ?
                new ObjectParameter("PropertyInvoiceDeliveryId", propertyInvoiceDeliveryId) :
                new ObjectParameter("PropertyInvoiceDeliveryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyInvoiceDelivery_Delete", propertyInvoiceDeliveryIdParameter);
        }
    
        public virtual ObjectResult<PropertyInvoiceDelivery_Find_Result> PropertyInvoiceDelivery_Find(Nullable<bool> searchUsinGOR, Nullable<int> propertyInvoiceDeliveryId, Nullable<int> propertyId, Nullable<int> invoiceDeliveryTypeId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var propertyInvoiceDeliveryIdParameter = propertyInvoiceDeliveryId.HasValue ?
                new ObjectParameter("PropertyInvoiceDeliveryId", propertyInvoiceDeliveryId) :
                new ObjectParameter("PropertyInvoiceDeliveryId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var invoiceDeliveryTypeIdParameter = invoiceDeliveryTypeId.HasValue ?
                new ObjectParameter("InvoiceDeliveryTypeId", invoiceDeliveryTypeId) :
                new ObjectParameter("InvoiceDeliveryTypeId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyInvoiceDelivery_Find_Result>("PropertyInvoiceDelivery_Find", searchUsinGORParameter, propertyInvoiceDeliveryIdParameter, propertyIdParameter, invoiceDeliveryTypeIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<PropertyInvoiceDelivery_Get_List_Result> PropertyInvoiceDelivery_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyInvoiceDelivery_Get_List_Result>("PropertyInvoiceDelivery_Get_List");
        }
    
        public virtual ObjectResult<PropertyInvoiceDelivery_GetByInvoiceDeliveryTypeId_Result> PropertyInvoiceDelivery_GetByInvoiceDeliveryTypeId(Nullable<int> invoiceDeliveryTypeId)
        {
            var invoiceDeliveryTypeIdParameter = invoiceDeliveryTypeId.HasValue ?
                new ObjectParameter("InvoiceDeliveryTypeId", invoiceDeliveryTypeId) :
                new ObjectParameter("InvoiceDeliveryTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyInvoiceDelivery_GetByInvoiceDeliveryTypeId_Result>("PropertyInvoiceDelivery_GetByInvoiceDeliveryTypeId", invoiceDeliveryTypeIdParameter);
        }
    
        public virtual ObjectResult<PropertyInvoiceDelivery_GetByPropertyId_Result> PropertyInvoiceDelivery_GetByPropertyId(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyInvoiceDelivery_GetByPropertyId_Result>("PropertyInvoiceDelivery_GetByPropertyId", propertyIdParameter);
        }
    
        public virtual ObjectResult<PropertyInvoiceDelivery_GetByPropertyInvoiceDeliveryId_Result> PropertyInvoiceDelivery_GetByPropertyInvoiceDeliveryId(Nullable<int> propertyInvoiceDeliveryId)
        {
            var propertyInvoiceDeliveryIdParameter = propertyInvoiceDeliveryId.HasValue ?
                new ObjectParameter("PropertyInvoiceDeliveryId", propertyInvoiceDeliveryId) :
                new ObjectParameter("PropertyInvoiceDeliveryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyInvoiceDelivery_GetByPropertyInvoiceDeliveryId_Result>("PropertyInvoiceDelivery_GetByPropertyInvoiceDeliveryId", propertyInvoiceDeliveryIdParameter);
        }
    
        public virtual int PropertyInvoiceDelivery_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyInvoiceDelivery_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int PropertyInvoiceDelivery_Insert(ObjectParameter propertyInvoiceDeliveryId, Nullable<int> propertyId, Nullable<int> invoiceDeliveryTypeId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var invoiceDeliveryTypeIdParameter = invoiceDeliveryTypeId.HasValue ?
                new ObjectParameter("InvoiceDeliveryTypeId", invoiceDeliveryTypeId) :
                new ObjectParameter("InvoiceDeliveryTypeId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyInvoiceDelivery_Insert", propertyInvoiceDeliveryId, propertyIdParameter, invoiceDeliveryTypeIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int PropertyInvoiceDelivery_Update(Nullable<int> propertyInvoiceDeliveryId, Nullable<int> propertyId, Nullable<int> invoiceDeliveryTypeId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var propertyInvoiceDeliveryIdParameter = propertyInvoiceDeliveryId.HasValue ?
                new ObjectParameter("PropertyInvoiceDeliveryId", propertyInvoiceDeliveryId) :
                new ObjectParameter("PropertyInvoiceDeliveryId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var invoiceDeliveryTypeIdParameter = invoiceDeliveryTypeId.HasValue ?
                new ObjectParameter("InvoiceDeliveryTypeId", invoiceDeliveryTypeId) :
                new ObjectParameter("InvoiceDeliveryTypeId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyInvoiceDelivery_Update", propertyInvoiceDeliveryIdParameter, propertyIdParameter, invoiceDeliveryTypeIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int PropertyWorkType_Delete(Nullable<int> propertyWorkTypeId)
        {
            var propertyWorkTypeIdParameter = propertyWorkTypeId.HasValue ?
                new ObjectParameter("PropertyWorkTypeId", propertyWorkTypeId) :
                new ObjectParameter("PropertyWorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyWorkType_Delete", propertyWorkTypeIdParameter);
        }
    
        public virtual ObjectResult<PropertyWorkType_Find_Result> PropertyWorkType_Find(Nullable<bool> searchUsinGOR, Nullable<int> propertyWorkTypeId, Nullable<int> propertyId, Nullable<int> workTypeId, string notes, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var propertyWorkTypeIdParameter = propertyWorkTypeId.HasValue ?
                new ObjectParameter("PropertyWorkTypeId", propertyWorkTypeId) :
                new ObjectParameter("PropertyWorkTypeId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyWorkType_Find_Result>("PropertyWorkType_Find", searchUsinGORParameter, propertyWorkTypeIdParameter, propertyIdParameter, workTypeIdParameter, notesParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<PropertyWorkType_Get_List_Result> PropertyWorkType_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyWorkType_Get_List_Result>("PropertyWorkType_Get_List");
        }
    
        public virtual ObjectResult<PropertyWorkType_GetByPropertyId_Result> PropertyWorkType_GetByPropertyId(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyWorkType_GetByPropertyId_Result>("PropertyWorkType_GetByPropertyId", propertyIdParameter);
        }
    
        public virtual ObjectResult<PropertyWorkType_GetByPropertyIdWorkTypeId_Result> PropertyWorkType_GetByPropertyIdWorkTypeId(Nullable<int> propertyId, Nullable<int> workTypeId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyWorkType_GetByPropertyIdWorkTypeId_Result>("PropertyWorkType_GetByPropertyIdWorkTypeId", propertyIdParameter, workTypeIdParameter);
        }
    
        public virtual ObjectResult<PropertyWorkType_GetByPropertyWorkTypeId_Result> PropertyWorkType_GetByPropertyWorkTypeId(Nullable<int> propertyWorkTypeId)
        {
            var propertyWorkTypeIdParameter = propertyWorkTypeId.HasValue ?
                new ObjectParameter("PropertyWorkTypeId", propertyWorkTypeId) :
                new ObjectParameter("PropertyWorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyWorkType_GetByPropertyWorkTypeId_Result>("PropertyWorkType_GetByPropertyWorkTypeId", propertyWorkTypeIdParameter);
        }
    
        public virtual ObjectResult<PropertyWorkType_GetByWorkTypeId_Result> PropertyWorkType_GetByWorkTypeId(Nullable<int> workTypeId)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PropertyWorkType_GetByWorkTypeId_Result>("PropertyWorkType_GetByWorkTypeId", workTypeIdParameter);
        }
    
        public virtual int PropertyWorkType_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyWorkType_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int PropertyWorkType_Insert(ObjectParameter propertyWorkTypeId, Nullable<int> propertyId, Nullable<int> workTypeId, string notes, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyWorkType_Insert", propertyWorkTypeId, propertyIdParameter, workTypeIdParameter, notesParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int PropertyWorkType_Update(Nullable<int> propertyWorkTypeId, Nullable<int> propertyId, Nullable<int> workTypeId, string notes, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var propertyWorkTypeIdParameter = propertyWorkTypeId.HasValue ?
                new ObjectParameter("PropertyWorkTypeId", propertyWorkTypeId) :
                new ObjectParameter("PropertyWorkTypeId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PropertyWorkType_Update", propertyWorkTypeIdParameter, propertyIdParameter, workTypeIdParameter, notesParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Proposal_Delete(Nullable<int> proposalId)
        {
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proposal_Delete", proposalIdParameter);
        }
    
        public virtual ObjectResult<Proposal_Find_Result> Proposal_Find(Nullable<bool> searchUsinGOR, Nullable<int> proposalId, Nullable<int> proposalStatusId, Nullable<int> propertyId, string propertyName, string landmark, Nullable<int> territoryId, Nullable<int> managerCompanyId, string managerName, Nullable<int> ownerCompanyId, string ownerName, Nullable<double> lotSizeAcres, Nullable<double> sidewalkInHours, Nullable<int> sidewalkSqFt, Nullable<double> plowtimeInHours, Nullable<double> icemeltBags, string salesRep, string billingEmailAddress, Nullable<bool> isFuelSurcharge, Nullable<bool> isFinanceCharge, Nullable<int> paymentTermId, string poNumber, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var proposalStatusIdParameter = proposalStatusId.HasValue ?
                new ObjectParameter("ProposalStatusId", proposalStatusId) :
                new ObjectParameter("ProposalStatusId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var landmarkParameter = landmark != null ?
                new ObjectParameter("Landmark", landmark) :
                new ObjectParameter("Landmark", typeof(string));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            var managerCompanyIdParameter = managerCompanyId.HasValue ?
                new ObjectParameter("ManagerCompanyId", managerCompanyId) :
                new ObjectParameter("ManagerCompanyId", typeof(int));
    
            var managerNameParameter = managerName != null ?
                new ObjectParameter("ManagerName", managerName) :
                new ObjectParameter("ManagerName", typeof(string));
    
            var ownerCompanyIdParameter = ownerCompanyId.HasValue ?
                new ObjectParameter("OwnerCompanyId", ownerCompanyId) :
                new ObjectParameter("OwnerCompanyId", typeof(int));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var lotSizeAcresParameter = lotSizeAcres.HasValue ?
                new ObjectParameter("LotSizeAcres", lotSizeAcres) :
                new ObjectParameter("LotSizeAcres", typeof(double));
    
            var sidewalkInHoursParameter = sidewalkInHours.HasValue ?
                new ObjectParameter("SidewalkInHours", sidewalkInHours) :
                new ObjectParameter("SidewalkInHours", typeof(double));
    
            var sidewalkSqFtParameter = sidewalkSqFt.HasValue ?
                new ObjectParameter("SidewalkSqFt", sidewalkSqFt) :
                new ObjectParameter("SidewalkSqFt", typeof(int));
    
            var plowtimeInHoursParameter = plowtimeInHours.HasValue ?
                new ObjectParameter("PlowtimeInHours", plowtimeInHours) :
                new ObjectParameter("PlowtimeInHours", typeof(double));
    
            var icemeltBagsParameter = icemeltBags.HasValue ?
                new ObjectParameter("IcemeltBags", icemeltBags) :
                new ObjectParameter("IcemeltBags", typeof(double));
    
            var salesRepParameter = salesRep != null ?
                new ObjectParameter("SalesRep", salesRep) :
                new ObjectParameter("SalesRep", typeof(string));
    
            var billingEmailAddressParameter = billingEmailAddress != null ?
                new ObjectParameter("BillingEmailAddress", billingEmailAddress) :
                new ObjectParameter("BillingEmailAddress", typeof(string));
    
            var isFuelSurchargeParameter = isFuelSurcharge.HasValue ?
                new ObjectParameter("IsFuelSurcharge", isFuelSurcharge) :
                new ObjectParameter("IsFuelSurcharge", typeof(bool));
    
            var isFinanceChargeParameter = isFinanceCharge.HasValue ?
                new ObjectParameter("IsFinanceCharge", isFinanceCharge) :
                new ObjectParameter("IsFinanceCharge", typeof(bool));
    
            var paymentTermIdParameter = paymentTermId.HasValue ?
                new ObjectParameter("PaymentTermId", paymentTermId) :
                new ObjectParameter("PaymentTermId", typeof(int));
    
            var poNumberParameter = poNumber != null ?
                new ObjectParameter("PoNumber", poNumber) :
                new ObjectParameter("PoNumber", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proposal_Find_Result>("Proposal_Find", searchUsinGORParameter, proposalIdParameter, proposalStatusIdParameter, propertyIdParameter, propertyNameParameter, landmarkParameter, territoryIdParameter, managerCompanyIdParameter, managerNameParameter, ownerCompanyIdParameter, ownerNameParameter, lotSizeAcresParameter, sidewalkInHoursParameter, sidewalkSqFtParameter, plowtimeInHoursParameter, icemeltBagsParameter, salesRepParameter, billingEmailAddressParameter, isFuelSurchargeParameter, isFinanceChargeParameter, paymentTermIdParameter, poNumberParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<Proposal_Get_List_Result> Proposal_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proposal_Get_List_Result>("Proposal_Get_List");
        }
    
        public virtual ObjectResult<Proposal_GetByManagerCompanyId_Result> Proposal_GetByManagerCompanyId(Nullable<int> managerCompanyId)
        {
            var managerCompanyIdParameter = managerCompanyId.HasValue ?
                new ObjectParameter("ManagerCompanyId", managerCompanyId) :
                new ObjectParameter("ManagerCompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proposal_GetByManagerCompanyId_Result>("Proposal_GetByManagerCompanyId", managerCompanyIdParameter);
        }
    
        public virtual ObjectResult<Proposal_GetByOwnerCompanyId_Result> Proposal_GetByOwnerCompanyId(Nullable<int> ownerCompanyId)
        {
            var ownerCompanyIdParameter = ownerCompanyId.HasValue ?
                new ObjectParameter("OwnerCompanyId", ownerCompanyId) :
                new ObjectParameter("OwnerCompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proposal_GetByOwnerCompanyId_Result>("Proposal_GetByOwnerCompanyId", ownerCompanyIdParameter);
        }
    
        public virtual ObjectResult<Proposal_GetByPaymentTermId_Result> Proposal_GetByPaymentTermId(Nullable<int> paymentTermId)
        {
            var paymentTermIdParameter = paymentTermId.HasValue ?
                new ObjectParameter("PaymentTermId", paymentTermId) :
                new ObjectParameter("PaymentTermId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proposal_GetByPaymentTermId_Result>("Proposal_GetByPaymentTermId", paymentTermIdParameter);
        }
    
        public virtual ObjectResult<Proposal_GetByPropertyId_Result> Proposal_GetByPropertyId(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proposal_GetByPropertyId_Result>("Proposal_GetByPropertyId", propertyIdParameter);
        }
    
        public virtual ObjectResult<Proposal_GetByProposalId_Result> Proposal_GetByProposalId(Nullable<int> proposalId)
        {
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proposal_GetByProposalId_Result>("Proposal_GetByProposalId", proposalIdParameter);
        }
    
        public virtual ObjectResult<Proposal_GetByProposalStatusId_Result> Proposal_GetByProposalStatusId(Nullable<int> proposalStatusId)
        {
            var proposalStatusIdParameter = proposalStatusId.HasValue ?
                new ObjectParameter("ProposalStatusId", proposalStatusId) :
                new ObjectParameter("ProposalStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proposal_GetByProposalStatusId_Result>("Proposal_GetByProposalStatusId", proposalStatusIdParameter);
        }
    
        public virtual ObjectResult<Proposal_GetByTerritoryId_Result> Proposal_GetByTerritoryId(Nullable<int> territoryId)
        {
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proposal_GetByTerritoryId_Result>("Proposal_GetByTerritoryId", territoryIdParameter);
        }
    
        public virtual int Proposal_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proposal_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int Proposal_Insert(ObjectParameter proposalId, Nullable<int> proposalStatusId, Nullable<int> propertyId, string propertyName, string landmark, Nullable<int> territoryId, Nullable<int> managerCompanyId, string managerName, Nullable<int> ownerCompanyId, string ownerName, Nullable<double> lotSizeAcres, Nullable<double> sidewalkInHours, Nullable<int> sidewalkSqFt, Nullable<double> plowtimeInHours, Nullable<double> icemeltBags, string salesRep, string billingEmailAddress, Nullable<bool> isFuelSurcharge, Nullable<bool> isFinanceCharge, Nullable<int> paymentTermId, string poNumber, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var proposalStatusIdParameter = proposalStatusId.HasValue ?
                new ObjectParameter("ProposalStatusId", proposalStatusId) :
                new ObjectParameter("ProposalStatusId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var landmarkParameter = landmark != null ?
                new ObjectParameter("Landmark", landmark) :
                new ObjectParameter("Landmark", typeof(string));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            var managerCompanyIdParameter = managerCompanyId.HasValue ?
                new ObjectParameter("ManagerCompanyId", managerCompanyId) :
                new ObjectParameter("ManagerCompanyId", typeof(int));
    
            var managerNameParameter = managerName != null ?
                new ObjectParameter("ManagerName", managerName) :
                new ObjectParameter("ManagerName", typeof(string));
    
            var ownerCompanyIdParameter = ownerCompanyId.HasValue ?
                new ObjectParameter("OwnerCompanyId", ownerCompanyId) :
                new ObjectParameter("OwnerCompanyId", typeof(int));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var lotSizeAcresParameter = lotSizeAcres.HasValue ?
                new ObjectParameter("LotSizeAcres", lotSizeAcres) :
                new ObjectParameter("LotSizeAcres", typeof(double));
    
            var sidewalkInHoursParameter = sidewalkInHours.HasValue ?
                new ObjectParameter("SidewalkInHours", sidewalkInHours) :
                new ObjectParameter("SidewalkInHours", typeof(double));
    
            var sidewalkSqFtParameter = sidewalkSqFt.HasValue ?
                new ObjectParameter("SidewalkSqFt", sidewalkSqFt) :
                new ObjectParameter("SidewalkSqFt", typeof(int));
    
            var plowtimeInHoursParameter = plowtimeInHours.HasValue ?
                new ObjectParameter("PlowtimeInHours", plowtimeInHours) :
                new ObjectParameter("PlowtimeInHours", typeof(double));
    
            var icemeltBagsParameter = icemeltBags.HasValue ?
                new ObjectParameter("IcemeltBags", icemeltBags) :
                new ObjectParameter("IcemeltBags", typeof(double));
    
            var salesRepParameter = salesRep != null ?
                new ObjectParameter("SalesRep", salesRep) :
                new ObjectParameter("SalesRep", typeof(string));
    
            var billingEmailAddressParameter = billingEmailAddress != null ?
                new ObjectParameter("BillingEmailAddress", billingEmailAddress) :
                new ObjectParameter("BillingEmailAddress", typeof(string));
    
            var isFuelSurchargeParameter = isFuelSurcharge.HasValue ?
                new ObjectParameter("IsFuelSurcharge", isFuelSurcharge) :
                new ObjectParameter("IsFuelSurcharge", typeof(bool));
    
            var isFinanceChargeParameter = isFinanceCharge.HasValue ?
                new ObjectParameter("IsFinanceCharge", isFinanceCharge) :
                new ObjectParameter("IsFinanceCharge", typeof(bool));
    
            var paymentTermIdParameter = paymentTermId.HasValue ?
                new ObjectParameter("PaymentTermId", paymentTermId) :
                new ObjectParameter("PaymentTermId", typeof(int));
    
            var poNumberParameter = poNumber != null ?
                new ObjectParameter("PoNumber", poNumber) :
                new ObjectParameter("PoNumber", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proposal_Insert", proposalId, proposalStatusIdParameter, propertyIdParameter, propertyNameParameter, landmarkParameter, territoryIdParameter, managerCompanyIdParameter, managerNameParameter, ownerCompanyIdParameter, ownerNameParameter, lotSizeAcresParameter, sidewalkInHoursParameter, sidewalkSqFtParameter, plowtimeInHoursParameter, icemeltBagsParameter, salesRepParameter, billingEmailAddressParameter, isFuelSurchargeParameter, isFinanceChargeParameter, paymentTermIdParameter, poNumberParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Proposal_Update(Nullable<int> proposalId, Nullable<int> proposalStatusId, Nullable<int> propertyId, string propertyName, string landmark, Nullable<int> territoryId, Nullable<int> managerCompanyId, string managerName, Nullable<int> ownerCompanyId, string ownerName, Nullable<double> lotSizeAcres, Nullable<double> sidewalkInHours, Nullable<int> sidewalkSqFt, Nullable<double> plowtimeInHours, Nullable<double> icemeltBags, string salesRep, string billingEmailAddress, Nullable<bool> isFuelSurcharge, Nullable<bool> isFinanceCharge, Nullable<int> paymentTermId, string poNumber, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var proposalStatusIdParameter = proposalStatusId.HasValue ?
                new ObjectParameter("ProposalStatusId", proposalStatusId) :
                new ObjectParameter("ProposalStatusId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var landmarkParameter = landmark != null ?
                new ObjectParameter("Landmark", landmark) :
                new ObjectParameter("Landmark", typeof(string));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            var managerCompanyIdParameter = managerCompanyId.HasValue ?
                new ObjectParameter("ManagerCompanyId", managerCompanyId) :
                new ObjectParameter("ManagerCompanyId", typeof(int));
    
            var managerNameParameter = managerName != null ?
                new ObjectParameter("ManagerName", managerName) :
                new ObjectParameter("ManagerName", typeof(string));
    
            var ownerCompanyIdParameter = ownerCompanyId.HasValue ?
                new ObjectParameter("OwnerCompanyId", ownerCompanyId) :
                new ObjectParameter("OwnerCompanyId", typeof(int));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var lotSizeAcresParameter = lotSizeAcres.HasValue ?
                new ObjectParameter("LotSizeAcres", lotSizeAcres) :
                new ObjectParameter("LotSizeAcres", typeof(double));
    
            var sidewalkInHoursParameter = sidewalkInHours.HasValue ?
                new ObjectParameter("SidewalkInHours", sidewalkInHours) :
                new ObjectParameter("SidewalkInHours", typeof(double));
    
            var sidewalkSqFtParameter = sidewalkSqFt.HasValue ?
                new ObjectParameter("SidewalkSqFt", sidewalkSqFt) :
                new ObjectParameter("SidewalkSqFt", typeof(int));
    
            var plowtimeInHoursParameter = plowtimeInHours.HasValue ?
                new ObjectParameter("PlowtimeInHours", plowtimeInHours) :
                new ObjectParameter("PlowtimeInHours", typeof(double));
    
            var icemeltBagsParameter = icemeltBags.HasValue ?
                new ObjectParameter("IcemeltBags", icemeltBags) :
                new ObjectParameter("IcemeltBags", typeof(double));
    
            var salesRepParameter = salesRep != null ?
                new ObjectParameter("SalesRep", salesRep) :
                new ObjectParameter("SalesRep", typeof(string));
    
            var billingEmailAddressParameter = billingEmailAddress != null ?
                new ObjectParameter("BillingEmailAddress", billingEmailAddress) :
                new ObjectParameter("BillingEmailAddress", typeof(string));
    
            var isFuelSurchargeParameter = isFuelSurcharge.HasValue ?
                new ObjectParameter("IsFuelSurcharge", isFuelSurcharge) :
                new ObjectParameter("IsFuelSurcharge", typeof(bool));
    
            var isFinanceChargeParameter = isFinanceCharge.HasValue ?
                new ObjectParameter("IsFinanceCharge", isFinanceCharge) :
                new ObjectParameter("IsFinanceCharge", typeof(bool));
    
            var paymentTermIdParameter = paymentTermId.HasValue ?
                new ObjectParameter("PaymentTermId", paymentTermId) :
                new ObjectParameter("PaymentTermId", typeof(int));
    
            var poNumberParameter = poNumber != null ?
                new ObjectParameter("PoNumber", poNumber) :
                new ObjectParameter("PoNumber", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proposal_Update", proposalIdParameter, proposalStatusIdParameter, propertyIdParameter, propertyNameParameter, landmarkParameter, territoryIdParameter, managerCompanyIdParameter, managerNameParameter, ownerCompanyIdParameter, ownerNameParameter, lotSizeAcresParameter, sidewalkInHoursParameter, sidewalkSqFtParameter, plowtimeInHoursParameter, icemeltBagsParameter, salesRepParameter, billingEmailAddressParameter, isFuelSurchargeParameter, isFinanceChargeParameter, paymentTermIdParameter, poNumberParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ProposalAddress_Delete(Nullable<int> proposalAddressId)
        {
            var proposalAddressIdParameter = proposalAddressId.HasValue ?
                new ObjectParameter("ProposalAddressId", proposalAddressId) :
                new ObjectParameter("ProposalAddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalAddress_Delete", proposalAddressIdParameter);
        }
    
        public virtual ObjectResult<ProposalAddress_Find_Result> ProposalAddress_Find(Nullable<bool> searchUsinGOR, Nullable<int> proposalAddressId, Nullable<int> proposalId, Nullable<int> proposalAddressTypeId, Nullable<int> companyAddressId, Nullable<int> propertyAddressId, string street1, string street2, string city, Nullable<int> stateId, string zipCode, string attention, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var proposalAddressIdParameter = proposalAddressId.HasValue ?
                new ObjectParameter("ProposalAddressId", proposalAddressId) :
                new ObjectParameter("ProposalAddressId", typeof(int));
    
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var proposalAddressTypeIdParameter = proposalAddressTypeId.HasValue ?
                new ObjectParameter("ProposalAddressTypeId", proposalAddressTypeId) :
                new ObjectParameter("ProposalAddressTypeId", typeof(int));
    
            var companyAddressIdParameter = companyAddressId.HasValue ?
                new ObjectParameter("CompanyAddressId", companyAddressId) :
                new ObjectParameter("CompanyAddressId", typeof(int));
    
            var propertyAddressIdParameter = propertyAddressId.HasValue ?
                new ObjectParameter("PropertyAddressId", propertyAddressId) :
                new ObjectParameter("PropertyAddressId", typeof(int));
    
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            var street2Parameter = street2 != null ?
                new ObjectParameter("Street2", street2) :
                new ObjectParameter("Street2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var attentionParameter = attention != null ?
                new ObjectParameter("Attention", attention) :
                new ObjectParameter("Attention", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalAddress_Find_Result>("ProposalAddress_Find", searchUsinGORParameter, proposalAddressIdParameter, proposalIdParameter, proposalAddressTypeIdParameter, companyAddressIdParameter, propertyAddressIdParameter, street1Parameter, street2Parameter, cityParameter, stateIdParameter, zipCodeParameter, attentionParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<ProposalAddress_Get_List_Result> ProposalAddress_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalAddress_Get_List_Result>("ProposalAddress_Get_List");
        }
    
        public virtual ObjectResult<ProposalAddress_GetByCompanyAddressId_Result> ProposalAddress_GetByCompanyAddressId(Nullable<int> companyAddressId)
        {
            var companyAddressIdParameter = companyAddressId.HasValue ?
                new ObjectParameter("CompanyAddressId", companyAddressId) :
                new ObjectParameter("CompanyAddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalAddress_GetByCompanyAddressId_Result>("ProposalAddress_GetByCompanyAddressId", companyAddressIdParameter);
        }
    
        public virtual ObjectResult<ProposalAddress_GetByPropertyAddressId_Result> ProposalAddress_GetByPropertyAddressId(Nullable<int> propertyAddressId)
        {
            var propertyAddressIdParameter = propertyAddressId.HasValue ?
                new ObjectParameter("PropertyAddressId", propertyAddressId) :
                new ObjectParameter("PropertyAddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalAddress_GetByPropertyAddressId_Result>("ProposalAddress_GetByPropertyAddressId", propertyAddressIdParameter);
        }
    
        public virtual ObjectResult<ProposalAddress_GetByProposalAddressId_Result> ProposalAddress_GetByProposalAddressId(Nullable<int> proposalAddressId)
        {
            var proposalAddressIdParameter = proposalAddressId.HasValue ?
                new ObjectParameter("ProposalAddressId", proposalAddressId) :
                new ObjectParameter("ProposalAddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalAddress_GetByProposalAddressId_Result>("ProposalAddress_GetByProposalAddressId", proposalAddressIdParameter);
        }
    
        public virtual ObjectResult<ProposalAddress_GetByProposalAddressTypeId_Result> ProposalAddress_GetByProposalAddressTypeId(Nullable<int> proposalAddressTypeId)
        {
            var proposalAddressTypeIdParameter = proposalAddressTypeId.HasValue ?
                new ObjectParameter("ProposalAddressTypeId", proposalAddressTypeId) :
                new ObjectParameter("ProposalAddressTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalAddress_GetByProposalAddressTypeId_Result>("ProposalAddress_GetByProposalAddressTypeId", proposalAddressTypeIdParameter);
        }
    
        public virtual ObjectResult<ProposalAddress_GetByProposalId_Result> ProposalAddress_GetByProposalId(Nullable<int> proposalId)
        {
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalAddress_GetByProposalId_Result>("ProposalAddress_GetByProposalId", proposalIdParameter);
        }
    
        public virtual ObjectResult<ProposalAddress_GetByStateId_Result> ProposalAddress_GetByStateId(Nullable<int> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalAddress_GetByStateId_Result>("ProposalAddress_GetByStateId", stateIdParameter);
        }
    
        public virtual int ProposalAddress_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalAddress_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int ProposalAddress_Insert(ObjectParameter proposalAddressId, Nullable<int> proposalId, Nullable<int> proposalAddressTypeId, Nullable<int> companyAddressId, Nullable<int> propertyAddressId, string street1, string street2, string city, Nullable<int> stateId, string zipCode, string attention, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var proposalAddressTypeIdParameter = proposalAddressTypeId.HasValue ?
                new ObjectParameter("ProposalAddressTypeId", proposalAddressTypeId) :
                new ObjectParameter("ProposalAddressTypeId", typeof(int));
    
            var companyAddressIdParameter = companyAddressId.HasValue ?
                new ObjectParameter("CompanyAddressId", companyAddressId) :
                new ObjectParameter("CompanyAddressId", typeof(int));
    
            var propertyAddressIdParameter = propertyAddressId.HasValue ?
                new ObjectParameter("PropertyAddressId", propertyAddressId) :
                new ObjectParameter("PropertyAddressId", typeof(int));
    
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            var street2Parameter = street2 != null ?
                new ObjectParameter("Street2", street2) :
                new ObjectParameter("Street2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var attentionParameter = attention != null ?
                new ObjectParameter("Attention", attention) :
                new ObjectParameter("Attention", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalAddress_Insert", proposalAddressId, proposalIdParameter, proposalAddressTypeIdParameter, companyAddressIdParameter, propertyAddressIdParameter, street1Parameter, street2Parameter, cityParameter, stateIdParameter, zipCodeParameter, attentionParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ProposalAddress_Update(Nullable<int> proposalAddressId, Nullable<int> proposalId, Nullable<int> proposalAddressTypeId, Nullable<int> companyAddressId, Nullable<int> propertyAddressId, string street1, string street2, string city, Nullable<int> stateId, string zipCode, string attention, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var proposalAddressIdParameter = proposalAddressId.HasValue ?
                new ObjectParameter("ProposalAddressId", proposalAddressId) :
                new ObjectParameter("ProposalAddressId", typeof(int));
    
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var proposalAddressTypeIdParameter = proposalAddressTypeId.HasValue ?
                new ObjectParameter("ProposalAddressTypeId", proposalAddressTypeId) :
                new ObjectParameter("ProposalAddressTypeId", typeof(int));
    
            var companyAddressIdParameter = companyAddressId.HasValue ?
                new ObjectParameter("CompanyAddressId", companyAddressId) :
                new ObjectParameter("CompanyAddressId", typeof(int));
    
            var propertyAddressIdParameter = propertyAddressId.HasValue ?
                new ObjectParameter("PropertyAddressId", propertyAddressId) :
                new ObjectParameter("PropertyAddressId", typeof(int));
    
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            var street2Parameter = street2 != null ?
                new ObjectParameter("Street2", street2) :
                new ObjectParameter("Street2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var attentionParameter = attention != null ?
                new ObjectParameter("Attention", attention) :
                new ObjectParameter("Attention", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalAddress_Update", proposalAddressIdParameter, proposalIdParameter, proposalAddressTypeIdParameter, companyAddressIdParameter, propertyAddressIdParameter, street1Parameter, street2Parameter, cityParameter, stateIdParameter, zipCodeParameter, attentionParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ProposalAddressType_Delete(Nullable<int> proposalAddressTypeId)
        {
            var proposalAddressTypeIdParameter = proposalAddressTypeId.HasValue ?
                new ObjectParameter("ProposalAddressTypeId", proposalAddressTypeId) :
                new ObjectParameter("ProposalAddressTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalAddressType_Delete", proposalAddressTypeIdParameter);
        }
    
        public virtual ObjectResult<ProposalAddressType_Find_Result> ProposalAddressType_Find(Nullable<bool> searchUsinGOR, Nullable<int> proposalAddressTypeId, string name, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var proposalAddressTypeIdParameter = proposalAddressTypeId.HasValue ?
                new ObjectParameter("ProposalAddressTypeId", proposalAddressTypeId) :
                new ObjectParameter("ProposalAddressTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalAddressType_Find_Result>("ProposalAddressType_Find", searchUsinGORParameter, proposalAddressTypeIdParameter, nameParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<ProposalAddressType_Get_List_Result> ProposalAddressType_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalAddressType_Get_List_Result>("ProposalAddressType_Get_List");
        }
    
        public virtual ObjectResult<ProposalAddressType_GetByName_Result> ProposalAddressType_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalAddressType_GetByName_Result>("ProposalAddressType_GetByName", nameParameter);
        }
    
        public virtual ObjectResult<ProposalAddressType_GetByProposalAddressTypeId_Result> ProposalAddressType_GetByProposalAddressTypeId(Nullable<int> proposalAddressTypeId)
        {
            var proposalAddressTypeIdParameter = proposalAddressTypeId.HasValue ?
                new ObjectParameter("ProposalAddressTypeId", proposalAddressTypeId) :
                new ObjectParameter("ProposalAddressTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalAddressType_GetByProposalAddressTypeId_Result>("ProposalAddressType_GetByProposalAddressTypeId", proposalAddressTypeIdParameter);
        }
    
        public virtual int ProposalAddressType_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalAddressType_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int ProposalAddressType_Insert(Nullable<int> proposalAddressTypeId, string name, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var proposalAddressTypeIdParameter = proposalAddressTypeId.HasValue ?
                new ObjectParameter("ProposalAddressTypeId", proposalAddressTypeId) :
                new ObjectParameter("ProposalAddressTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalAddressType_Insert", proposalAddressTypeIdParameter, nameParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ProposalAddressType_Update(Nullable<int> proposalAddressTypeId, Nullable<int> originalProposalAddressTypeId, string name, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var proposalAddressTypeIdParameter = proposalAddressTypeId.HasValue ?
                new ObjectParameter("ProposalAddressTypeId", proposalAddressTypeId) :
                new ObjectParameter("ProposalAddressTypeId", typeof(int));
    
            var originalProposalAddressTypeIdParameter = originalProposalAddressTypeId.HasValue ?
                new ObjectParameter("OriginalProposalAddressTypeId", originalProposalAddressTypeId) :
                new ObjectParameter("OriginalProposalAddressTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalAddressType_Update", proposalAddressTypeIdParameter, originalProposalAddressTypeIdParameter, nameParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ProposalContact_Delete(Nullable<int> proposalContactId)
        {
            var proposalContactIdParameter = proposalContactId.HasValue ?
                new ObjectParameter("ProposalContactId", proposalContactId) :
                new ObjectParameter("ProposalContactId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalContact_Delete", proposalContactIdParameter);
        }
    
        public virtual ObjectResult<ProposalContact_Find_Result> ProposalContact_Find(Nullable<bool> searchUsinGOR, Nullable<int> proposalContactId, Nullable<int> proposalId, Nullable<int> propertyContactId, Nullable<int> contactTypeId, string name, string workPhoneNumber, Nullable<int> workPhoneNumberExtension, string mobilePhoneNumber, string faxNumber, string emailAddress, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var proposalContactIdParameter = proposalContactId.HasValue ?
                new ObjectParameter("ProposalContactId", proposalContactId) :
                new ObjectParameter("ProposalContactId", typeof(int));
    
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var propertyContactIdParameter = propertyContactId.HasValue ?
                new ObjectParameter("PropertyContactId", propertyContactId) :
                new ObjectParameter("PropertyContactId", typeof(int));
    
            var contactTypeIdParameter = contactTypeId.HasValue ?
                new ObjectParameter("ContactTypeId", contactTypeId) :
                new ObjectParameter("ContactTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var workPhoneNumberParameter = workPhoneNumber != null ?
                new ObjectParameter("WorkPhoneNumber", workPhoneNumber) :
                new ObjectParameter("WorkPhoneNumber", typeof(string));
    
            var workPhoneNumberExtensionParameter = workPhoneNumberExtension.HasValue ?
                new ObjectParameter("WorkPhoneNumberExtension", workPhoneNumberExtension) :
                new ObjectParameter("WorkPhoneNumberExtension", typeof(int));
    
            var mobilePhoneNumberParameter = mobilePhoneNumber != null ?
                new ObjectParameter("MobilePhoneNumber", mobilePhoneNumber) :
                new ObjectParameter("MobilePhoneNumber", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalContact_Find_Result>("ProposalContact_Find", searchUsinGORParameter, proposalContactIdParameter, proposalIdParameter, propertyContactIdParameter, contactTypeIdParameter, nameParameter, workPhoneNumberParameter, workPhoneNumberExtensionParameter, mobilePhoneNumberParameter, faxNumberParameter, emailAddressParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<ProposalContact_Get_List_Result> ProposalContact_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalContact_Get_List_Result>("ProposalContact_Get_List");
        }
    
        public virtual ObjectResult<ProposalContact_GetByContactTypeId_Result> ProposalContact_GetByContactTypeId(Nullable<int> contactTypeId)
        {
            var contactTypeIdParameter = contactTypeId.HasValue ?
                new ObjectParameter("ContactTypeId", contactTypeId) :
                new ObjectParameter("ContactTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalContact_GetByContactTypeId_Result>("ProposalContact_GetByContactTypeId", contactTypeIdParameter);
        }
    
        public virtual ObjectResult<ProposalContact_GetByPropertyContactId_Result> ProposalContact_GetByPropertyContactId(Nullable<int> propertyContactId)
        {
            var propertyContactIdParameter = propertyContactId.HasValue ?
                new ObjectParameter("PropertyContactId", propertyContactId) :
                new ObjectParameter("PropertyContactId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalContact_GetByPropertyContactId_Result>("ProposalContact_GetByPropertyContactId", propertyContactIdParameter);
        }
    
        public virtual ObjectResult<ProposalContact_GetByProposalContactId_Result> ProposalContact_GetByProposalContactId(Nullable<int> proposalContactId)
        {
            var proposalContactIdParameter = proposalContactId.HasValue ?
                new ObjectParameter("ProposalContactId", proposalContactId) :
                new ObjectParameter("ProposalContactId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalContact_GetByProposalContactId_Result>("ProposalContact_GetByProposalContactId", proposalContactIdParameter);
        }
    
        public virtual ObjectResult<ProposalContact_GetByProposalId_Result> ProposalContact_GetByProposalId(Nullable<int> proposalId)
        {
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalContact_GetByProposalId_Result>("ProposalContact_GetByProposalId", proposalIdParameter);
        }
    
        public virtual int ProposalContact_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalContact_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int ProposalContact_Insert(ObjectParameter proposalContactId, Nullable<int> proposalId, Nullable<int> propertyContactId, Nullable<int> contactTypeId, string name, string workPhoneNumber, Nullable<int> workPhoneNumberExtension, string mobilePhoneNumber, string faxNumber, string emailAddress, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var propertyContactIdParameter = propertyContactId.HasValue ?
                new ObjectParameter("PropertyContactId", propertyContactId) :
                new ObjectParameter("PropertyContactId", typeof(int));
    
            var contactTypeIdParameter = contactTypeId.HasValue ?
                new ObjectParameter("ContactTypeId", contactTypeId) :
                new ObjectParameter("ContactTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var workPhoneNumberParameter = workPhoneNumber != null ?
                new ObjectParameter("WorkPhoneNumber", workPhoneNumber) :
                new ObjectParameter("WorkPhoneNumber", typeof(string));
    
            var workPhoneNumberExtensionParameter = workPhoneNumberExtension.HasValue ?
                new ObjectParameter("WorkPhoneNumberExtension", workPhoneNumberExtension) :
                new ObjectParameter("WorkPhoneNumberExtension", typeof(int));
    
            var mobilePhoneNumberParameter = mobilePhoneNumber != null ?
                new ObjectParameter("MobilePhoneNumber", mobilePhoneNumber) :
                new ObjectParameter("MobilePhoneNumber", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalContact_Insert", proposalContactId, proposalIdParameter, propertyContactIdParameter, contactTypeIdParameter, nameParameter, workPhoneNumberParameter, workPhoneNumberExtensionParameter, mobilePhoneNumberParameter, faxNumberParameter, emailAddressParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ProposalContact_Update(Nullable<int> proposalContactId, Nullable<int> proposalId, Nullable<int> propertyContactId, Nullable<int> contactTypeId, string name, string workPhoneNumber, Nullable<int> workPhoneNumberExtension, string mobilePhoneNumber, string faxNumber, string emailAddress, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var proposalContactIdParameter = proposalContactId.HasValue ?
                new ObjectParameter("ProposalContactId", proposalContactId) :
                new ObjectParameter("ProposalContactId", typeof(int));
    
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var propertyContactIdParameter = propertyContactId.HasValue ?
                new ObjectParameter("PropertyContactId", propertyContactId) :
                new ObjectParameter("PropertyContactId", typeof(int));
    
            var contactTypeIdParameter = contactTypeId.HasValue ?
                new ObjectParameter("ContactTypeId", contactTypeId) :
                new ObjectParameter("ContactTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var workPhoneNumberParameter = workPhoneNumber != null ?
                new ObjectParameter("WorkPhoneNumber", workPhoneNumber) :
                new ObjectParameter("WorkPhoneNumber", typeof(string));
    
            var workPhoneNumberExtensionParameter = workPhoneNumberExtension.HasValue ?
                new ObjectParameter("WorkPhoneNumberExtension", workPhoneNumberExtension) :
                new ObjectParameter("WorkPhoneNumberExtension", typeof(int));
    
            var mobilePhoneNumberParameter = mobilePhoneNumber != null ?
                new ObjectParameter("MobilePhoneNumber", mobilePhoneNumber) :
                new ObjectParameter("MobilePhoneNumber", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalContact_Update", proposalContactIdParameter, proposalIdParameter, propertyContactIdParameter, contactTypeIdParameter, nameParameter, workPhoneNumberParameter, workPhoneNumberExtensionParameter, mobilePhoneNumberParameter, faxNumberParameter, emailAddressParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ProposalFeeRate_Delete(Nullable<int> proposalFeeRateId)
        {
            var proposalFeeRateIdParameter = proposalFeeRateId.HasValue ?
                new ObjectParameter("ProposalFeeRateId", proposalFeeRateId) :
                new ObjectParameter("ProposalFeeRateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalFeeRate_Delete", proposalFeeRateIdParameter);
        }
    
        public virtual ObjectResult<ProposalFeeRate_Find_Result> ProposalFeeRate_Find(Nullable<bool> searchUsinGOR, Nullable<int> proposalFeeRateId, Nullable<int> proposalId, Nullable<int> equipmentId, Nullable<double> rate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var proposalFeeRateIdParameter = proposalFeeRateId.HasValue ?
                new ObjectParameter("ProposalFeeRateId", proposalFeeRateId) :
                new ObjectParameter("ProposalFeeRateId", typeof(int));
    
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalFeeRate_Find_Result>("ProposalFeeRate_Find", searchUsinGORParameter, proposalFeeRateIdParameter, proposalIdParameter, equipmentIdParameter, rateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<ProposalFeeRate_Get_List_Result> ProposalFeeRate_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalFeeRate_Get_List_Result>("ProposalFeeRate_Get_List");
        }
    
        public virtual ObjectResult<ProposalFeeRate_GetByEquipmentId_Result> ProposalFeeRate_GetByEquipmentId(Nullable<int> equipmentId)
        {
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalFeeRate_GetByEquipmentId_Result>("ProposalFeeRate_GetByEquipmentId", equipmentIdParameter);
        }
    
        public virtual ObjectResult<ProposalFeeRate_GetByProposalFeeRateId_Result> ProposalFeeRate_GetByProposalFeeRateId(Nullable<int> proposalFeeRateId)
        {
            var proposalFeeRateIdParameter = proposalFeeRateId.HasValue ?
                new ObjectParameter("ProposalFeeRateId", proposalFeeRateId) :
                new ObjectParameter("ProposalFeeRateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalFeeRate_GetByProposalFeeRateId_Result>("ProposalFeeRate_GetByProposalFeeRateId", proposalFeeRateIdParameter);
        }
    
        public virtual ObjectResult<ProposalFeeRate_GetByProposalId_Result> ProposalFeeRate_GetByProposalId(Nullable<int> proposalId)
        {
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalFeeRate_GetByProposalId_Result>("ProposalFeeRate_GetByProposalId", proposalIdParameter);
        }
    
        public virtual int ProposalFeeRate_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalFeeRate_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int ProposalFeeRate_Insert(ObjectParameter proposalFeeRateId, Nullable<int> proposalId, Nullable<int> equipmentId, Nullable<double> rate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalFeeRate_Insert", proposalFeeRateId, proposalIdParameter, equipmentIdParameter, rateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ProposalFeeRate_Update(Nullable<int> proposalFeeRateId, Nullable<int> proposalId, Nullable<int> equipmentId, Nullable<double> rate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var proposalFeeRateIdParameter = proposalFeeRateId.HasValue ?
                new ObjectParameter("ProposalFeeRateId", proposalFeeRateId) :
                new ObjectParameter("ProposalFeeRateId", typeof(int));
    
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalFeeRate_Update", proposalFeeRateIdParameter, proposalIdParameter, equipmentIdParameter, rateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ProposalFlatRate_Delete(Nullable<int> proposalFlatRateId)
        {
            var proposalFlatRateIdParameter = proposalFlatRateId.HasValue ?
                new ObjectParameter("ProposalFlatRateId", proposalFlatRateId) :
                new ObjectParameter("ProposalFlatRateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalFlatRate_Delete", proposalFlatRateIdParameter);
        }
    
        public virtual ObjectResult<ProposalFlatRate_Find_Result> ProposalFlatRate_Find(Nullable<bool> searchUsinGOR, Nullable<int> proposalFlatRateId, Nullable<int> proposalId, Nullable<int> workTypeId, string description, Nullable<double> minValue, Nullable<double> maxValue, Nullable<double> rate, Nullable<double> vendorFee, Nullable<bool> isTonnage, Nullable<bool> isDefault, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var proposalFlatRateIdParameter = proposalFlatRateId.HasValue ?
                new ObjectParameter("ProposalFlatRateId", proposalFlatRateId) :
                new ObjectParameter("ProposalFlatRateId", typeof(int));
    
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var minValueParameter = minValue.HasValue ?
                new ObjectParameter("MinValue", minValue) :
                new ObjectParameter("MinValue", typeof(double));
    
            var maxValueParameter = maxValue.HasValue ?
                new ObjectParameter("MaxValue", maxValue) :
                new ObjectParameter("MaxValue", typeof(double));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var vendorFeeParameter = vendorFee.HasValue ?
                new ObjectParameter("VendorFee", vendorFee) :
                new ObjectParameter("VendorFee", typeof(double));
    
            var isTonnageParameter = isTonnage.HasValue ?
                new ObjectParameter("IsTonnage", isTonnage) :
                new ObjectParameter("IsTonnage", typeof(bool));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalFlatRate_Find_Result>("ProposalFlatRate_Find", searchUsinGORParameter, proposalFlatRateIdParameter, proposalIdParameter, workTypeIdParameter, descriptionParameter, minValueParameter, maxValueParameter, rateParameter, vendorFeeParameter, isTonnageParameter, isDefaultParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<ProposalFlatRate_Get_List_Result> ProposalFlatRate_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalFlatRate_Get_List_Result>("ProposalFlatRate_Get_List");
        }
    
        public virtual ObjectResult<ProposalFlatRate_GetByProposalFlatRateId_Result> ProposalFlatRate_GetByProposalFlatRateId(Nullable<int> proposalFlatRateId)
        {
            var proposalFlatRateIdParameter = proposalFlatRateId.HasValue ?
                new ObjectParameter("ProposalFlatRateId", proposalFlatRateId) :
                new ObjectParameter("ProposalFlatRateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalFlatRate_GetByProposalFlatRateId_Result>("ProposalFlatRate_GetByProposalFlatRateId", proposalFlatRateIdParameter);
        }
    
        public virtual ObjectResult<ProposalFlatRate_GetByProposalId_Result> ProposalFlatRate_GetByProposalId(Nullable<int> proposalId)
        {
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalFlatRate_GetByProposalId_Result>("ProposalFlatRate_GetByProposalId", proposalIdParameter);
        }
    
        public virtual ObjectResult<ProposalFlatRate_GetByWorkTypeId_Result> ProposalFlatRate_GetByWorkTypeId(Nullable<int> workTypeId)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalFlatRate_GetByWorkTypeId_Result>("ProposalFlatRate_GetByWorkTypeId", workTypeIdParameter);
        }
    
        public virtual int ProposalFlatRate_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalFlatRate_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int ProposalFlatRate_Insert(ObjectParameter proposalFlatRateId, Nullable<int> proposalId, Nullable<int> workTypeId, string description, Nullable<double> minValue, Nullable<double> maxValue, Nullable<double> rate, Nullable<double> vendorFee, Nullable<bool> isTonnage, Nullable<bool> isDefault, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var minValueParameter = minValue.HasValue ?
                new ObjectParameter("MinValue", minValue) :
                new ObjectParameter("MinValue", typeof(double));
    
            var maxValueParameter = maxValue.HasValue ?
                new ObjectParameter("MaxValue", maxValue) :
                new ObjectParameter("MaxValue", typeof(double));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var vendorFeeParameter = vendorFee.HasValue ?
                new ObjectParameter("VendorFee", vendorFee) :
                new ObjectParameter("VendorFee", typeof(double));
    
            var isTonnageParameter = isTonnage.HasValue ?
                new ObjectParameter("IsTonnage", isTonnage) :
                new ObjectParameter("IsTonnage", typeof(bool));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalFlatRate_Insert", proposalFlatRateId, proposalIdParameter, workTypeIdParameter, descriptionParameter, minValueParameter, maxValueParameter, rateParameter, vendorFeeParameter, isTonnageParameter, isDefaultParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ProposalFlatRate_Update(Nullable<int> proposalFlatRateId, Nullable<int> proposalId, Nullable<int> workTypeId, string description, Nullable<double> minValue, Nullable<double> maxValue, Nullable<double> rate, Nullable<double> vendorFee, Nullable<bool> isTonnage, Nullable<bool> isDefault, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var proposalFlatRateIdParameter = proposalFlatRateId.HasValue ?
                new ObjectParameter("ProposalFlatRateId", proposalFlatRateId) :
                new ObjectParameter("ProposalFlatRateId", typeof(int));
    
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var minValueParameter = minValue.HasValue ?
                new ObjectParameter("MinValue", minValue) :
                new ObjectParameter("MinValue", typeof(double));
    
            var maxValueParameter = maxValue.HasValue ?
                new ObjectParameter("MaxValue", maxValue) :
                new ObjectParameter("MaxValue", typeof(double));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var vendorFeeParameter = vendorFee.HasValue ?
                new ObjectParameter("VendorFee", vendorFee) :
                new ObjectParameter("VendorFee", typeof(double));
    
            var isTonnageParameter = isTonnage.HasValue ?
                new ObjectParameter("IsTonnage", isTonnage) :
                new ObjectParameter("IsTonnage", typeof(bool));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalFlatRate_Update", proposalFlatRateIdParameter, proposalIdParameter, workTypeIdParameter, descriptionParameter, minValueParameter, maxValueParameter, rateParameter, vendorFeeParameter, isTonnageParameter, isDefaultParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ProposalInvoiceDelivery_Delete(Nullable<int> proposalInvoiceDeliveryId)
        {
            var proposalInvoiceDeliveryIdParameter = proposalInvoiceDeliveryId.HasValue ?
                new ObjectParameter("ProposalInvoiceDeliveryId", proposalInvoiceDeliveryId) :
                new ObjectParameter("ProposalInvoiceDeliveryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalInvoiceDelivery_Delete", proposalInvoiceDeliveryIdParameter);
        }
    
        public virtual ObjectResult<ProposalInvoiceDelivery_Find_Result> ProposalInvoiceDelivery_Find(Nullable<bool> searchUsinGOR, Nullable<int> proposalInvoiceDeliveryId, Nullable<int> proposalId, Nullable<int> invoiceDeliveryTypeId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var proposalInvoiceDeliveryIdParameter = proposalInvoiceDeliveryId.HasValue ?
                new ObjectParameter("ProposalInvoiceDeliveryId", proposalInvoiceDeliveryId) :
                new ObjectParameter("ProposalInvoiceDeliveryId", typeof(int));
    
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var invoiceDeliveryTypeIdParameter = invoiceDeliveryTypeId.HasValue ?
                new ObjectParameter("InvoiceDeliveryTypeId", invoiceDeliveryTypeId) :
                new ObjectParameter("InvoiceDeliveryTypeId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalInvoiceDelivery_Find_Result>("ProposalInvoiceDelivery_Find", searchUsinGORParameter, proposalInvoiceDeliveryIdParameter, proposalIdParameter, invoiceDeliveryTypeIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<ProposalInvoiceDelivery_Get_List_Result> ProposalInvoiceDelivery_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalInvoiceDelivery_Get_List_Result>("ProposalInvoiceDelivery_Get_List");
        }
    
        public virtual ObjectResult<ProposalInvoiceDelivery_GetByInvoiceDeliveryTypeId_Result> ProposalInvoiceDelivery_GetByInvoiceDeliveryTypeId(Nullable<int> invoiceDeliveryTypeId)
        {
            var invoiceDeliveryTypeIdParameter = invoiceDeliveryTypeId.HasValue ?
                new ObjectParameter("InvoiceDeliveryTypeId", invoiceDeliveryTypeId) :
                new ObjectParameter("InvoiceDeliveryTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalInvoiceDelivery_GetByInvoiceDeliveryTypeId_Result>("ProposalInvoiceDelivery_GetByInvoiceDeliveryTypeId", invoiceDeliveryTypeIdParameter);
        }
    
        public virtual ObjectResult<ProposalInvoiceDelivery_GetByProposalId_Result> ProposalInvoiceDelivery_GetByProposalId(Nullable<int> proposalId)
        {
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalInvoiceDelivery_GetByProposalId_Result>("ProposalInvoiceDelivery_GetByProposalId", proposalIdParameter);
        }
    
        public virtual ObjectResult<ProposalInvoiceDelivery_GetByProposalInvoiceDeliveryId_Result> ProposalInvoiceDelivery_GetByProposalInvoiceDeliveryId(Nullable<int> proposalInvoiceDeliveryId)
        {
            var proposalInvoiceDeliveryIdParameter = proposalInvoiceDeliveryId.HasValue ?
                new ObjectParameter("ProposalInvoiceDeliveryId", proposalInvoiceDeliveryId) :
                new ObjectParameter("ProposalInvoiceDeliveryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalInvoiceDelivery_GetByProposalInvoiceDeliveryId_Result>("ProposalInvoiceDelivery_GetByProposalInvoiceDeliveryId", proposalInvoiceDeliveryIdParameter);
        }
    
        public virtual int ProposalInvoiceDelivery_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalInvoiceDelivery_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int ProposalInvoiceDelivery_Insert(ObjectParameter proposalInvoiceDeliveryId, Nullable<int> proposalId, Nullable<int> invoiceDeliveryTypeId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var invoiceDeliveryTypeIdParameter = invoiceDeliveryTypeId.HasValue ?
                new ObjectParameter("InvoiceDeliveryTypeId", invoiceDeliveryTypeId) :
                new ObjectParameter("InvoiceDeliveryTypeId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalInvoiceDelivery_Insert", proposalInvoiceDeliveryId, proposalIdParameter, invoiceDeliveryTypeIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ProposalInvoiceDelivery_Update(Nullable<int> proposalInvoiceDeliveryId, Nullable<int> proposalId, Nullable<int> invoiceDeliveryTypeId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var proposalInvoiceDeliveryIdParameter = proposalInvoiceDeliveryId.HasValue ?
                new ObjectParameter("ProposalInvoiceDeliveryId", proposalInvoiceDeliveryId) :
                new ObjectParameter("ProposalInvoiceDeliveryId", typeof(int));
    
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var invoiceDeliveryTypeIdParameter = invoiceDeliveryTypeId.HasValue ?
                new ObjectParameter("InvoiceDeliveryTypeId", invoiceDeliveryTypeId) :
                new ObjectParameter("InvoiceDeliveryTypeId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalInvoiceDelivery_Update", proposalInvoiceDeliveryIdParameter, proposalIdParameter, invoiceDeliveryTypeIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ProposalStatus_Delete(Nullable<int> proposalStatusId)
        {
            var proposalStatusIdParameter = proposalStatusId.HasValue ?
                new ObjectParameter("ProposalStatusId", proposalStatusId) :
                new ObjectParameter("ProposalStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalStatus_Delete", proposalStatusIdParameter);
        }
    
        public virtual ObjectResult<ProposalStatus_Find_Result> ProposalStatus_Find(Nullable<bool> searchUsinGOR, Nullable<int> proposalStatusId, string name, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var proposalStatusIdParameter = proposalStatusId.HasValue ?
                new ObjectParameter("ProposalStatusId", proposalStatusId) :
                new ObjectParameter("ProposalStatusId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalStatus_Find_Result>("ProposalStatus_Find", searchUsinGORParameter, proposalStatusIdParameter, nameParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<ProposalStatus_Get_List_Result> ProposalStatus_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalStatus_Get_List_Result>("ProposalStatus_Get_List");
        }
    
        public virtual ObjectResult<ProposalStatus_GetByName_Result> ProposalStatus_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalStatus_GetByName_Result>("ProposalStatus_GetByName", nameParameter);
        }
    
        public virtual ObjectResult<ProposalStatus_GetByProposalStatusId_Result> ProposalStatus_GetByProposalStatusId(Nullable<int> proposalStatusId)
        {
            var proposalStatusIdParameter = proposalStatusId.HasValue ?
                new ObjectParameter("ProposalStatusId", proposalStatusId) :
                new ObjectParameter("ProposalStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalStatus_GetByProposalStatusId_Result>("ProposalStatus_GetByProposalStatusId", proposalStatusIdParameter);
        }
    
        public virtual int ProposalStatus_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalStatus_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int ProposalStatus_Insert(ObjectParameter proposalStatusId, string name, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalStatus_Insert", proposalStatusId, nameParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ProposalStatus_Update(Nullable<int> proposalStatusId, string name, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var proposalStatusIdParameter = proposalStatusId.HasValue ?
                new ObjectParameter("ProposalStatusId", proposalStatusId) :
                new ObjectParameter("ProposalStatusId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalStatus_Update", proposalStatusIdParameter, nameParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ProposalWorkType_Delete(Nullable<int> proposalWorkTypeId)
        {
            var proposalWorkTypeIdParameter = proposalWorkTypeId.HasValue ?
                new ObjectParameter("ProposalWorkTypeId", proposalWorkTypeId) :
                new ObjectParameter("ProposalWorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalWorkType_Delete", proposalWorkTypeIdParameter);
        }
    
        public virtual ObjectResult<ProposalWorkType_Find_Result> ProposalWorkType_Find(Nullable<bool> searchUsinGOR, Nullable<int> proposalWorkTypeId, Nullable<int> proposalId, Nullable<int> workTypeId, Nullable<int> frequencyTypeId, string notes, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var proposalWorkTypeIdParameter = proposalWorkTypeId.HasValue ?
                new ObjectParameter("ProposalWorkTypeId", proposalWorkTypeId) :
                new ObjectParameter("ProposalWorkTypeId", typeof(int));
    
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var frequencyTypeIdParameter = frequencyTypeId.HasValue ?
                new ObjectParameter("FrequencyTypeId", frequencyTypeId) :
                new ObjectParameter("FrequencyTypeId", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalWorkType_Find_Result>("ProposalWorkType_Find", searchUsinGORParameter, proposalWorkTypeIdParameter, proposalIdParameter, workTypeIdParameter, frequencyTypeIdParameter, notesParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<ProposalWorkType_Get_List_Result> ProposalWorkType_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalWorkType_Get_List_Result>("ProposalWorkType_Get_List");
        }
    
        public virtual ObjectResult<ProposalWorkType_GetByFrequencyTypeId_Result> ProposalWorkType_GetByFrequencyTypeId(Nullable<int> frequencyTypeId)
        {
            var frequencyTypeIdParameter = frequencyTypeId.HasValue ?
                new ObjectParameter("FrequencyTypeId", frequencyTypeId) :
                new ObjectParameter("FrequencyTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalWorkType_GetByFrequencyTypeId_Result>("ProposalWorkType_GetByFrequencyTypeId", frequencyTypeIdParameter);
        }
    
        public virtual ObjectResult<ProposalWorkType_GetByProposalId_Result> ProposalWorkType_GetByProposalId(Nullable<int> proposalId)
        {
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalWorkType_GetByProposalId_Result>("ProposalWorkType_GetByProposalId", proposalIdParameter);
        }
    
        public virtual ObjectResult<ProposalWorkType_GetByProposalIdWorkTypeId_Result> ProposalWorkType_GetByProposalIdWorkTypeId(Nullable<int> proposalId, Nullable<int> workTypeId)
        {
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalWorkType_GetByProposalIdWorkTypeId_Result>("ProposalWorkType_GetByProposalIdWorkTypeId", proposalIdParameter, workTypeIdParameter);
        }
    
        public virtual ObjectResult<ProposalWorkType_GetByProposalWorkTypeId_Result> ProposalWorkType_GetByProposalWorkTypeId(Nullable<int> proposalWorkTypeId)
        {
            var proposalWorkTypeIdParameter = proposalWorkTypeId.HasValue ?
                new ObjectParameter("ProposalWorkTypeId", proposalWorkTypeId) :
                new ObjectParameter("ProposalWorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalWorkType_GetByProposalWorkTypeId_Result>("ProposalWorkType_GetByProposalWorkTypeId", proposalWorkTypeIdParameter);
        }
    
        public virtual ObjectResult<ProposalWorkType_GetByWorkTypeId_Result> ProposalWorkType_GetByWorkTypeId(Nullable<int> workTypeId)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProposalWorkType_GetByWorkTypeId_Result>("ProposalWorkType_GetByWorkTypeId", workTypeIdParameter);
        }
    
        public virtual int ProposalWorkType_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalWorkType_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int ProposalWorkType_Insert(ObjectParameter proposalWorkTypeId, Nullable<int> proposalId, Nullable<int> workTypeId, Nullable<int> frequencyTypeId, string notes, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var frequencyTypeIdParameter = frequencyTypeId.HasValue ?
                new ObjectParameter("FrequencyTypeId", frequencyTypeId) :
                new ObjectParameter("FrequencyTypeId", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalWorkType_Insert", proposalWorkTypeId, proposalIdParameter, workTypeIdParameter, frequencyTypeIdParameter, notesParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int ProposalWorkType_Update(Nullable<int> proposalWorkTypeId, Nullable<int> proposalId, Nullable<int> workTypeId, Nullable<int> frequencyTypeId, string notes, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var proposalWorkTypeIdParameter = proposalWorkTypeId.HasValue ?
                new ObjectParameter("ProposalWorkTypeId", proposalWorkTypeId) :
                new ObjectParameter("ProposalWorkTypeId", typeof(int));
    
            var proposalIdParameter = proposalId.HasValue ?
                new ObjectParameter("ProposalId", proposalId) :
                new ObjectParameter("ProposalId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var frequencyTypeIdParameter = frequencyTypeId.HasValue ?
                new ObjectParameter("FrequencyTypeId", frequencyTypeId) :
                new ObjectParameter("FrequencyTypeId", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProposalWorkType_Update", proposalWorkTypeIdParameter, proposalIdParameter, workTypeIdParameter, frequencyTypeIdParameter, notesParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int PushTimeTicket_Delete(Nullable<long> pushTimeTicketId)
        {
            var pushTimeTicketIdParameter = pushTimeTicketId.HasValue ?
                new ObjectParameter("PushTimeTicketId", pushTimeTicketId) :
                new ObjectParameter("PushTimeTicketId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PushTimeTicket_Delete", pushTimeTicketIdParameter);
        }
    
        public virtual ObjectResult<PushTimeTicket_Find_Result> PushTimeTicket_Find(Nullable<bool> searchUsinGOR, Nullable<long> pushTimeTicketId, Nullable<long> workEventId, Nullable<int> timeTicketId, Nullable<int> vendorId, Nullable<int> equipmentId, string referenceNumber, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var pushTimeTicketIdParameter = pushTimeTicketId.HasValue ?
                new ObjectParameter("PushTimeTicketId", pushTimeTicketId) :
                new ObjectParameter("PushTimeTicketId", typeof(long));
    
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            var timeTicketIdParameter = timeTicketId.HasValue ?
                new ObjectParameter("TimeTicketId", timeTicketId) :
                new ObjectParameter("TimeTicketId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PushTimeTicket_Find_Result>("PushTimeTicket_Find", searchUsinGORParameter, pushTimeTicketIdParameter, workEventIdParameter, timeTicketIdParameter, vendorIdParameter, equipmentIdParameter, referenceNumberParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<PushTimeTicket_Get_List_Result> PushTimeTicket_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PushTimeTicket_Get_List_Result>("PushTimeTicket_Get_List");
        }
    
        public virtual ObjectResult<PushTimeTicket_GetByEquipmentId_Result> PushTimeTicket_GetByEquipmentId(Nullable<int> equipmentId)
        {
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PushTimeTicket_GetByEquipmentId_Result>("PushTimeTicket_GetByEquipmentId", equipmentIdParameter);
        }
    
        public virtual ObjectResult<PushTimeTicket_GetByPushTimeTicketId_Result> PushTimeTicket_GetByPushTimeTicketId(Nullable<long> pushTimeTicketId)
        {
            var pushTimeTicketIdParameter = pushTimeTicketId.HasValue ?
                new ObjectParameter("PushTimeTicketId", pushTimeTicketId) :
                new ObjectParameter("PushTimeTicketId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PushTimeTicket_GetByPushTimeTicketId_Result>("PushTimeTicket_GetByPushTimeTicketId", pushTimeTicketIdParameter);
        }
    
        public virtual ObjectResult<PushTimeTicket_GetByTimeTicketId_Result> PushTimeTicket_GetByTimeTicketId(Nullable<int> timeTicketId)
        {
            var timeTicketIdParameter = timeTicketId.HasValue ?
                new ObjectParameter("TimeTicketId", timeTicketId) :
                new ObjectParameter("TimeTicketId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PushTimeTicket_GetByTimeTicketId_Result>("PushTimeTicket_GetByTimeTicketId", timeTicketIdParameter);
        }
    
        public virtual ObjectResult<PushTimeTicket_GetByVendorId_Result> PushTimeTicket_GetByVendorId(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PushTimeTicket_GetByVendorId_Result>("PushTimeTicket_GetByVendorId", vendorIdParameter);
        }
    
        public virtual ObjectResult<PushTimeTicket_GetByWorkEventId_Result> PushTimeTicket_GetByWorkEventId(Nullable<long> workEventId)
        {
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PushTimeTicket_GetByWorkEventId_Result>("PushTimeTicket_GetByWorkEventId", workEventIdParameter);
        }
    
        public virtual int PushTimeTicket_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PushTimeTicket_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int PushTimeTicket_Insert(ObjectParameter pushTimeTicketId, Nullable<long> workEventId, Nullable<int> timeTicketId, Nullable<int> vendorId, Nullable<int> equipmentId, string referenceNumber, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            var timeTicketIdParameter = timeTicketId.HasValue ?
                new ObjectParameter("TimeTicketId", timeTicketId) :
                new ObjectParameter("TimeTicketId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PushTimeTicket_Insert", pushTimeTicketId, workEventIdParameter, timeTicketIdParameter, vendorIdParameter, equipmentIdParameter, referenceNumberParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int PushTimeTicket_Update(Nullable<long> pushTimeTicketId, Nullable<long> workEventId, Nullable<int> timeTicketId, Nullable<int> vendorId, Nullable<int> equipmentId, string referenceNumber, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var pushTimeTicketIdParameter = pushTimeTicketId.HasValue ?
                new ObjectParameter("PushTimeTicketId", pushTimeTicketId) :
                new ObjectParameter("PushTimeTicketId", typeof(long));
    
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            var timeTicketIdParameter = timeTicketId.HasValue ?
                new ObjectParameter("TimeTicketId", timeTicketId) :
                new ObjectParameter("TimeTicketId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PushTimeTicket_Update", pushTimeTicketIdParameter, workEventIdParameter, timeTicketIdParameter, vendorIdParameter, equipmentIdParameter, referenceNumberParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int PushTimeTicketProperty_Delete(Nullable<long> pushTimeTicketPropertyId)
        {
            var pushTimeTicketPropertyIdParameter = pushTimeTicketPropertyId.HasValue ?
                new ObjectParameter("PushTimeTicketPropertyId", pushTimeTicketPropertyId) :
                new ObjectParameter("PushTimeTicketPropertyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PushTimeTicketProperty_Delete", pushTimeTicketPropertyIdParameter);
        }
    
        public virtual ObjectResult<PushTimeTicketProperty_Find_Result> PushTimeTicketProperty_Find(Nullable<bool> searchUsinGOR, Nullable<long> pushTimeTicketPropertyId, Nullable<long> pushTimeTicketId, Nullable<int> vendorPropertyId, Nullable<int> timeTicketPropertyId, Nullable<System.DateTime> startTime1, Nullable<System.DateTime> endTime1, Nullable<System.DateTime> startTime2, Nullable<System.DateTime> endTime2, Nullable<bool> isInvoiced, Nullable<System.DateTime> invoicedDate, Nullable<bool> isCheckRun, Nullable<System.DateTime> checkRunDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var pushTimeTicketPropertyIdParameter = pushTimeTicketPropertyId.HasValue ?
                new ObjectParameter("PushTimeTicketPropertyId", pushTimeTicketPropertyId) :
                new ObjectParameter("PushTimeTicketPropertyId", typeof(long));
    
            var pushTimeTicketIdParameter = pushTimeTicketId.HasValue ?
                new ObjectParameter("PushTimeTicketId", pushTimeTicketId) :
                new ObjectParameter("PushTimeTicketId", typeof(long));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var timeTicketPropertyIdParameter = timeTicketPropertyId.HasValue ?
                new ObjectParameter("TimeTicketPropertyId", timeTicketPropertyId) :
                new ObjectParameter("TimeTicketPropertyId", typeof(int));
    
            var startTime1Parameter = startTime1.HasValue ?
                new ObjectParameter("StartTime1", startTime1) :
                new ObjectParameter("StartTime1", typeof(System.DateTime));
    
            var endTime1Parameter = endTime1.HasValue ?
                new ObjectParameter("EndTime1", endTime1) :
                new ObjectParameter("EndTime1", typeof(System.DateTime));
    
            var startTime2Parameter = startTime2.HasValue ?
                new ObjectParameter("StartTime2", startTime2) :
                new ObjectParameter("StartTime2", typeof(System.DateTime));
    
            var endTime2Parameter = endTime2.HasValue ?
                new ObjectParameter("EndTime2", endTime2) :
                new ObjectParameter("EndTime2", typeof(System.DateTime));
    
            var isInvoicedParameter = isInvoiced.HasValue ?
                new ObjectParameter("IsInvoiced", isInvoiced) :
                new ObjectParameter("IsInvoiced", typeof(bool));
    
            var invoicedDateParameter = invoicedDate.HasValue ?
                new ObjectParameter("InvoicedDate", invoicedDate) :
                new ObjectParameter("InvoicedDate", typeof(System.DateTime));
    
            var isCheckRunParameter = isCheckRun.HasValue ?
                new ObjectParameter("IsCheckRun", isCheckRun) :
                new ObjectParameter("IsCheckRun", typeof(bool));
    
            var checkRunDateParameter = checkRunDate.HasValue ?
                new ObjectParameter("CheckRunDate", checkRunDate) :
                new ObjectParameter("CheckRunDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PushTimeTicketProperty_Find_Result>("PushTimeTicketProperty_Find", searchUsinGORParameter, pushTimeTicketPropertyIdParameter, pushTimeTicketIdParameter, vendorPropertyIdParameter, timeTicketPropertyIdParameter, startTime1Parameter, endTime1Parameter, startTime2Parameter, endTime2Parameter, isInvoicedParameter, invoicedDateParameter, isCheckRunParameter, checkRunDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<PushTimeTicketProperty_Get_List_Result> PushTimeTicketProperty_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PushTimeTicketProperty_Get_List_Result>("PushTimeTicketProperty_Get_List");
        }
    
        public virtual ObjectResult<PushTimeTicketProperty_GetByPushTimeTicketId_Result> PushTimeTicketProperty_GetByPushTimeTicketId(Nullable<long> pushTimeTicketId)
        {
            var pushTimeTicketIdParameter = pushTimeTicketId.HasValue ?
                new ObjectParameter("PushTimeTicketId", pushTimeTicketId) :
                new ObjectParameter("PushTimeTicketId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PushTimeTicketProperty_GetByPushTimeTicketId_Result>("PushTimeTicketProperty_GetByPushTimeTicketId", pushTimeTicketIdParameter);
        }
    
        public virtual ObjectResult<PushTimeTicketProperty_GetByPushTimeTicketPropertyId_Result> PushTimeTicketProperty_GetByPushTimeTicketPropertyId(Nullable<long> pushTimeTicketPropertyId)
        {
            var pushTimeTicketPropertyIdParameter = pushTimeTicketPropertyId.HasValue ?
                new ObjectParameter("PushTimeTicketPropertyId", pushTimeTicketPropertyId) :
                new ObjectParameter("PushTimeTicketPropertyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PushTimeTicketProperty_GetByPushTimeTicketPropertyId_Result>("PushTimeTicketProperty_GetByPushTimeTicketPropertyId", pushTimeTicketPropertyIdParameter);
        }
    
        public virtual ObjectResult<PushTimeTicketProperty_GetByTimeTicketPropertyId_Result> PushTimeTicketProperty_GetByTimeTicketPropertyId(Nullable<int> timeTicketPropertyId)
        {
            var timeTicketPropertyIdParameter = timeTicketPropertyId.HasValue ?
                new ObjectParameter("TimeTicketPropertyId", timeTicketPropertyId) :
                new ObjectParameter("TimeTicketPropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PushTimeTicketProperty_GetByTimeTicketPropertyId_Result>("PushTimeTicketProperty_GetByTimeTicketPropertyId", timeTicketPropertyIdParameter);
        }
    
        public virtual ObjectResult<PushTimeTicketProperty_GetByVendorPropertyId_Result> PushTimeTicketProperty_GetByVendorPropertyId(Nullable<int> vendorPropertyId)
        {
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PushTimeTicketProperty_GetByVendorPropertyId_Result>("PushTimeTicketProperty_GetByVendorPropertyId", vendorPropertyIdParameter);
        }
    
        public virtual int PushTimeTicketProperty_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PushTimeTicketProperty_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int PushTimeTicketProperty_Insert(ObjectParameter pushTimeTicketPropertyId, Nullable<long> pushTimeTicketId, Nullable<int> vendorPropertyId, Nullable<int> timeTicketPropertyId, Nullable<System.DateTime> startTime1, Nullable<System.DateTime> endTime1, Nullable<System.DateTime> startTime2, Nullable<System.DateTime> endTime2, Nullable<bool> isInvoiced, Nullable<System.DateTime> invoicedDate, Nullable<bool> isCheckRun, Nullable<System.DateTime> checkRunDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var pushTimeTicketIdParameter = pushTimeTicketId.HasValue ?
                new ObjectParameter("PushTimeTicketId", pushTimeTicketId) :
                new ObjectParameter("PushTimeTicketId", typeof(long));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var timeTicketPropertyIdParameter = timeTicketPropertyId.HasValue ?
                new ObjectParameter("TimeTicketPropertyId", timeTicketPropertyId) :
                new ObjectParameter("TimeTicketPropertyId", typeof(int));
    
            var startTime1Parameter = startTime1.HasValue ?
                new ObjectParameter("StartTime1", startTime1) :
                new ObjectParameter("StartTime1", typeof(System.DateTime));
    
            var endTime1Parameter = endTime1.HasValue ?
                new ObjectParameter("EndTime1", endTime1) :
                new ObjectParameter("EndTime1", typeof(System.DateTime));
    
            var startTime2Parameter = startTime2.HasValue ?
                new ObjectParameter("StartTime2", startTime2) :
                new ObjectParameter("StartTime2", typeof(System.DateTime));
    
            var endTime2Parameter = endTime2.HasValue ?
                new ObjectParameter("EndTime2", endTime2) :
                new ObjectParameter("EndTime2", typeof(System.DateTime));
    
            var isInvoicedParameter = isInvoiced.HasValue ?
                new ObjectParameter("IsInvoiced", isInvoiced) :
                new ObjectParameter("IsInvoiced", typeof(bool));
    
            var invoicedDateParameter = invoicedDate.HasValue ?
                new ObjectParameter("InvoicedDate", invoicedDate) :
                new ObjectParameter("InvoicedDate", typeof(System.DateTime));
    
            var isCheckRunParameter = isCheckRun.HasValue ?
                new ObjectParameter("IsCheckRun", isCheckRun) :
                new ObjectParameter("IsCheckRun", typeof(bool));
    
            var checkRunDateParameter = checkRunDate.HasValue ?
                new ObjectParameter("CheckRunDate", checkRunDate) :
                new ObjectParameter("CheckRunDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PushTimeTicketProperty_Insert", pushTimeTicketPropertyId, pushTimeTicketIdParameter, vendorPropertyIdParameter, timeTicketPropertyIdParameter, startTime1Parameter, endTime1Parameter, startTime2Parameter, endTime2Parameter, isInvoicedParameter, invoicedDateParameter, isCheckRunParameter, checkRunDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int PushTimeTicketProperty_Update(Nullable<long> pushTimeTicketPropertyId, Nullable<long> pushTimeTicketId, Nullable<int> vendorPropertyId, Nullable<int> timeTicketPropertyId, Nullable<System.DateTime> startTime1, Nullable<System.DateTime> endTime1, Nullable<System.DateTime> startTime2, Nullable<System.DateTime> endTime2, Nullable<bool> isInvoiced, Nullable<System.DateTime> invoicedDate, Nullable<bool> isCheckRun, Nullable<System.DateTime> checkRunDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var pushTimeTicketPropertyIdParameter = pushTimeTicketPropertyId.HasValue ?
                new ObjectParameter("PushTimeTicketPropertyId", pushTimeTicketPropertyId) :
                new ObjectParameter("PushTimeTicketPropertyId", typeof(long));
    
            var pushTimeTicketIdParameter = pushTimeTicketId.HasValue ?
                new ObjectParameter("PushTimeTicketId", pushTimeTicketId) :
                new ObjectParameter("PushTimeTicketId", typeof(long));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var timeTicketPropertyIdParameter = timeTicketPropertyId.HasValue ?
                new ObjectParameter("TimeTicketPropertyId", timeTicketPropertyId) :
                new ObjectParameter("TimeTicketPropertyId", typeof(int));
    
            var startTime1Parameter = startTime1.HasValue ?
                new ObjectParameter("StartTime1", startTime1) :
                new ObjectParameter("StartTime1", typeof(System.DateTime));
    
            var endTime1Parameter = endTime1.HasValue ?
                new ObjectParameter("EndTime1", endTime1) :
                new ObjectParameter("EndTime1", typeof(System.DateTime));
    
            var startTime2Parameter = startTime2.HasValue ?
                new ObjectParameter("StartTime2", startTime2) :
                new ObjectParameter("StartTime2", typeof(System.DateTime));
    
            var endTime2Parameter = endTime2.HasValue ?
                new ObjectParameter("EndTime2", endTime2) :
                new ObjectParameter("EndTime2", typeof(System.DateTime));
    
            var isInvoicedParameter = isInvoiced.HasValue ?
                new ObjectParameter("IsInvoiced", isInvoiced) :
                new ObjectParameter("IsInvoiced", typeof(bool));
    
            var invoicedDateParameter = invoicedDate.HasValue ?
                new ObjectParameter("InvoicedDate", invoicedDate) :
                new ObjectParameter("InvoicedDate", typeof(System.DateTime));
    
            var isCheckRunParameter = isCheckRun.HasValue ?
                new ObjectParameter("IsCheckRun", isCheckRun) :
                new ObjectParameter("IsCheckRun", typeof(bool));
    
            var checkRunDateParameter = checkRunDate.HasValue ?
                new ObjectParameter("CheckRunDate", checkRunDate) :
                new ObjectParameter("CheckRunDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PushTimeTicketProperty_Update", pushTimeTicketPropertyIdParameter, pushTimeTicketIdParameter, vendorPropertyIdParameter, timeTicketPropertyIdParameter, startTime1Parameter, endTime1Parameter, startTime2Parameter, endTime2Parameter, isInvoicedParameter, invoicedDateParameter, isCheckRunParameter, checkRunDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Role_Delete(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Role_Delete", roleIdParameter);
        }
    
        public virtual ObjectResult<Role_Find_Result> Role_Find(Nullable<bool> searchUsinGOR, Nullable<int> roleId, string name, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Role_Find_Result>("Role_Find", searchUsinGORParameter, roleIdParameter, nameParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<Role_Get_List_Result> Role_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Role_Get_List_Result>("Role_Get_List");
        }
    
        public virtual ObjectResult<Role_GetByName_Result> Role_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Role_GetByName_Result>("Role_GetByName", nameParameter);
        }
    
        public virtual ObjectResult<Role_GetByRoleId_Result> Role_GetByRoleId(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Role_GetByRoleId_Result>("Role_GetByRoleId", roleIdParameter);
        }
    
        public virtual int Role_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Role_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int Role_Insert(ObjectParameter roleId, string name, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Role_Insert", roleId, nameParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Role_Update(Nullable<int> roleId, string name, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Role_Update", roleIdParameter, nameParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Season_Delete(Nullable<int> seasonId)
        {
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("SeasonId", seasonId) :
                new ObjectParameter("SeasonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Season_Delete", seasonIdParameter);
        }
    
        public virtual ObjectResult<Season_Find_Result> Season_Find(Nullable<bool> searchUsinGOR, Nullable<int> seasonId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("SeasonId", seasonId) :
                new ObjectParameter("SeasonId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Season_Find_Result>("Season_Find", searchUsinGORParameter, seasonIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<Season_Get_List_Result> Season_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Season_Get_List_Result>("Season_Get_List");
        }
    
        public virtual ObjectResult<Season_GetByName_Result> Season_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Season_GetByName_Result>("Season_GetByName", nameParameter);
        }
    
        public virtual ObjectResult<Season_GetBySeasonId_Result> Season_GetBySeasonId(Nullable<int> seasonId)
        {
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("SeasonId", seasonId) :
                new ObjectParameter("SeasonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Season_GetBySeasonId_Result>("Season_GetBySeasonId", seasonIdParameter);
        }
    
        public virtual int Season_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Season_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int Season_Insert(ObjectParameter seasonId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Season_Insert", seasonId, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Season_Update(Nullable<int> seasonId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("SeasonId", seasonId) :
                new ObjectParameter("SeasonId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Season_Update", seasonIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int SidewalkTime_Delete(Nullable<long> sidewalkTimeId)
        {
            var sidewalkTimeIdParameter = sidewalkTimeId.HasValue ?
                new ObjectParameter("SidewalkTimeId", sidewalkTimeId) :
                new ObjectParameter("SidewalkTimeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SidewalkTime_Delete", sidewalkTimeIdParameter);
        }
    
        public virtual ObjectResult<SidewalkTime_Find_Result> SidewalkTime_Find(Nullable<bool> searchUsinGOR, Nullable<long> sidewalkTimeId, Nullable<long> workEventId, Nullable<int> vendorPropertyId, Nullable<System.DateTime> startTime, Nullable<double> hoursPerPerson, Nullable<int> totalWorkers, Nullable<bool> isCustomerSupplied, string notes, Nullable<bool> isInvoiced, Nullable<System.DateTime> invoicedDate, Nullable<bool> isCheckRun, Nullable<System.DateTime> checkRunDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var sidewalkTimeIdParameter = sidewalkTimeId.HasValue ?
                new ObjectParameter("SidewalkTimeId", sidewalkTimeId) :
                new ObjectParameter("SidewalkTimeId", typeof(long));
    
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var hoursPerPersonParameter = hoursPerPerson.HasValue ?
                new ObjectParameter("HoursPerPerson", hoursPerPerson) :
                new ObjectParameter("HoursPerPerson", typeof(double));
    
            var totalWorkersParameter = totalWorkers.HasValue ?
                new ObjectParameter("TotalWorkers", totalWorkers) :
                new ObjectParameter("TotalWorkers", typeof(int));
    
            var isCustomerSuppliedParameter = isCustomerSupplied.HasValue ?
                new ObjectParameter("IsCustomerSupplied", isCustomerSupplied) :
                new ObjectParameter("IsCustomerSupplied", typeof(bool));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var isInvoicedParameter = isInvoiced.HasValue ?
                new ObjectParameter("IsInvoiced", isInvoiced) :
                new ObjectParameter("IsInvoiced", typeof(bool));
    
            var invoicedDateParameter = invoicedDate.HasValue ?
                new ObjectParameter("InvoicedDate", invoicedDate) :
                new ObjectParameter("InvoicedDate", typeof(System.DateTime));
    
            var isCheckRunParameter = isCheckRun.HasValue ?
                new ObjectParameter("IsCheckRun", isCheckRun) :
                new ObjectParameter("IsCheckRun", typeof(bool));
    
            var checkRunDateParameter = checkRunDate.HasValue ?
                new ObjectParameter("CheckRunDate", checkRunDate) :
                new ObjectParameter("CheckRunDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SidewalkTime_Find_Result>("SidewalkTime_Find", searchUsinGORParameter, sidewalkTimeIdParameter, workEventIdParameter, vendorPropertyIdParameter, startTimeParameter, hoursPerPersonParameter, totalWorkersParameter, isCustomerSuppliedParameter, notesParameter, isInvoicedParameter, invoicedDateParameter, isCheckRunParameter, checkRunDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<SidewalkTime_Get_List_Result> SidewalkTime_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SidewalkTime_Get_List_Result>("SidewalkTime_Get_List");
        }
    
        public virtual ObjectResult<SidewalkTime_GetBySidewalkTimeId_Result> SidewalkTime_GetBySidewalkTimeId(Nullable<long> sidewalkTimeId)
        {
            var sidewalkTimeIdParameter = sidewalkTimeId.HasValue ?
                new ObjectParameter("SidewalkTimeId", sidewalkTimeId) :
                new ObjectParameter("SidewalkTimeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SidewalkTime_GetBySidewalkTimeId_Result>("SidewalkTime_GetBySidewalkTimeId", sidewalkTimeIdParameter);
        }
    
        public virtual ObjectResult<SidewalkTime_GetByVendorPropertyId_Result> SidewalkTime_GetByVendorPropertyId(Nullable<int> vendorPropertyId)
        {
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SidewalkTime_GetByVendorPropertyId_Result>("SidewalkTime_GetByVendorPropertyId", vendorPropertyIdParameter);
        }
    
        public virtual ObjectResult<SidewalkTime_GetByWorkEventId_Result> SidewalkTime_GetByWorkEventId(Nullable<long> workEventId)
        {
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SidewalkTime_GetByWorkEventId_Result>("SidewalkTime_GetByWorkEventId", workEventIdParameter);
        }
    
        public virtual int SidewalkTime_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SidewalkTime_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int SidewalkTime_Insert(ObjectParameter sidewalkTimeId, Nullable<long> workEventId, Nullable<int> vendorPropertyId, Nullable<System.DateTime> startTime, Nullable<double> hoursPerPerson, Nullable<int> totalWorkers, Nullable<bool> isCustomerSupplied, string notes, Nullable<bool> isInvoiced, Nullable<System.DateTime> invoicedDate, Nullable<bool> isCheckRun, Nullable<System.DateTime> checkRunDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var hoursPerPersonParameter = hoursPerPerson.HasValue ?
                new ObjectParameter("HoursPerPerson", hoursPerPerson) :
                new ObjectParameter("HoursPerPerson", typeof(double));
    
            var totalWorkersParameter = totalWorkers.HasValue ?
                new ObjectParameter("TotalWorkers", totalWorkers) :
                new ObjectParameter("TotalWorkers", typeof(int));
    
            var isCustomerSuppliedParameter = isCustomerSupplied.HasValue ?
                new ObjectParameter("IsCustomerSupplied", isCustomerSupplied) :
                new ObjectParameter("IsCustomerSupplied", typeof(bool));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var isInvoicedParameter = isInvoiced.HasValue ?
                new ObjectParameter("IsInvoiced", isInvoiced) :
                new ObjectParameter("IsInvoiced", typeof(bool));
    
            var invoicedDateParameter = invoicedDate.HasValue ?
                new ObjectParameter("InvoicedDate", invoicedDate) :
                new ObjectParameter("InvoicedDate", typeof(System.DateTime));
    
            var isCheckRunParameter = isCheckRun.HasValue ?
                new ObjectParameter("IsCheckRun", isCheckRun) :
                new ObjectParameter("IsCheckRun", typeof(bool));
    
            var checkRunDateParameter = checkRunDate.HasValue ?
                new ObjectParameter("CheckRunDate", checkRunDate) :
                new ObjectParameter("CheckRunDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SidewalkTime_Insert", sidewalkTimeId, workEventIdParameter, vendorPropertyIdParameter, startTimeParameter, hoursPerPersonParameter, totalWorkersParameter, isCustomerSuppliedParameter, notesParameter, isInvoicedParameter, invoicedDateParameter, isCheckRunParameter, checkRunDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int SidewalkTime_Update(Nullable<long> sidewalkTimeId, Nullable<long> workEventId, Nullable<int> vendorPropertyId, Nullable<System.DateTime> startTime, Nullable<double> hoursPerPerson, Nullable<int> totalWorkers, Nullable<bool> isCustomerSupplied, string notes, Nullable<bool> isInvoiced, Nullable<System.DateTime> invoicedDate, Nullable<bool> isCheckRun, Nullable<System.DateTime> checkRunDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var sidewalkTimeIdParameter = sidewalkTimeId.HasValue ?
                new ObjectParameter("SidewalkTimeId", sidewalkTimeId) :
                new ObjectParameter("SidewalkTimeId", typeof(long));
    
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var hoursPerPersonParameter = hoursPerPerson.HasValue ?
                new ObjectParameter("HoursPerPerson", hoursPerPerson) :
                new ObjectParameter("HoursPerPerson", typeof(double));
    
            var totalWorkersParameter = totalWorkers.HasValue ?
                new ObjectParameter("TotalWorkers", totalWorkers) :
                new ObjectParameter("TotalWorkers", typeof(int));
    
            var isCustomerSuppliedParameter = isCustomerSupplied.HasValue ?
                new ObjectParameter("IsCustomerSupplied", isCustomerSupplied) :
                new ObjectParameter("IsCustomerSupplied", typeof(bool));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var isInvoicedParameter = isInvoiced.HasValue ?
                new ObjectParameter("IsInvoiced", isInvoiced) :
                new ObjectParameter("IsInvoiced", typeof(bool));
    
            var invoicedDateParameter = invoicedDate.HasValue ?
                new ObjectParameter("InvoicedDate", invoicedDate) :
                new ObjectParameter("InvoicedDate", typeof(System.DateTime));
    
            var isCheckRunParameter = isCheckRun.HasValue ?
                new ObjectParameter("IsCheckRun", isCheckRun) :
                new ObjectParameter("IsCheckRun", typeof(bool));
    
            var checkRunDateParameter = checkRunDate.HasValue ?
                new ObjectParameter("CheckRunDate", checkRunDate) :
                new ObjectParameter("CheckRunDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SidewalkTime_Update", sidewalkTimeIdParameter, workEventIdParameter, vendorPropertyIdParameter, startTimeParameter, hoursPerPersonParameter, totalWorkersParameter, isCustomerSuppliedParameter, notesParameter, isInvoicedParameter, invoicedDateParameter, isCheckRunParameter, checkRunDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int SidewalkTimeEquipment_Delete(Nullable<long> sidewalkTimeEquipmentId)
        {
            var sidewalkTimeEquipmentIdParameter = sidewalkTimeEquipmentId.HasValue ?
                new ObjectParameter("SidewalkTimeEquipmentId", sidewalkTimeEquipmentId) :
                new ObjectParameter("SidewalkTimeEquipmentId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SidewalkTimeEquipment_Delete", sidewalkTimeEquipmentIdParameter);
        }
    
        public virtual ObjectResult<SidewalkTimeEquipment_Find_Result> SidewalkTimeEquipment_Find(Nullable<bool> searchUsinGOR, Nullable<long> sidewalkTimeEquipmentId, Nullable<long> sidewalkTimeId, Nullable<int> equipmentId, Nullable<double> quantityUsed, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var sidewalkTimeEquipmentIdParameter = sidewalkTimeEquipmentId.HasValue ?
                new ObjectParameter("SidewalkTimeEquipmentId", sidewalkTimeEquipmentId) :
                new ObjectParameter("SidewalkTimeEquipmentId", typeof(long));
    
            var sidewalkTimeIdParameter = sidewalkTimeId.HasValue ?
                new ObjectParameter("SidewalkTimeId", sidewalkTimeId) :
                new ObjectParameter("SidewalkTimeId", typeof(long));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var quantityUsedParameter = quantityUsed.HasValue ?
                new ObjectParameter("QuantityUsed", quantityUsed) :
                new ObjectParameter("QuantityUsed", typeof(double));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SidewalkTimeEquipment_Find_Result>("SidewalkTimeEquipment_Find", searchUsinGORParameter, sidewalkTimeEquipmentIdParameter, sidewalkTimeIdParameter, equipmentIdParameter, quantityUsedParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<SidewalkTimeEquipment_Get_List_Result> SidewalkTimeEquipment_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SidewalkTimeEquipment_Get_List_Result>("SidewalkTimeEquipment_Get_List");
        }
    
        public virtual ObjectResult<SidewalkTimeEquipment_GetByEquipmentId_Result> SidewalkTimeEquipment_GetByEquipmentId(Nullable<int> equipmentId)
        {
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SidewalkTimeEquipment_GetByEquipmentId_Result>("SidewalkTimeEquipment_GetByEquipmentId", equipmentIdParameter);
        }
    
        public virtual ObjectResult<SidewalkTimeEquipment_GetBySidewalkTimeEquipmentId_Result> SidewalkTimeEquipment_GetBySidewalkTimeEquipmentId(Nullable<long> sidewalkTimeEquipmentId)
        {
            var sidewalkTimeEquipmentIdParameter = sidewalkTimeEquipmentId.HasValue ?
                new ObjectParameter("SidewalkTimeEquipmentId", sidewalkTimeEquipmentId) :
                new ObjectParameter("SidewalkTimeEquipmentId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SidewalkTimeEquipment_GetBySidewalkTimeEquipmentId_Result>("SidewalkTimeEquipment_GetBySidewalkTimeEquipmentId", sidewalkTimeEquipmentIdParameter);
        }
    
        public virtual ObjectResult<SidewalkTimeEquipment_GetBySidewalkTimeId_Result> SidewalkTimeEquipment_GetBySidewalkTimeId(Nullable<long> sidewalkTimeId)
        {
            var sidewalkTimeIdParameter = sidewalkTimeId.HasValue ?
                new ObjectParameter("SidewalkTimeId", sidewalkTimeId) :
                new ObjectParameter("SidewalkTimeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SidewalkTimeEquipment_GetBySidewalkTimeId_Result>("SidewalkTimeEquipment_GetBySidewalkTimeId", sidewalkTimeIdParameter);
        }
    
        public virtual int SidewalkTimeEquipment_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SidewalkTimeEquipment_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int SidewalkTimeEquipment_Insert(ObjectParameter sidewalkTimeEquipmentId, Nullable<long> sidewalkTimeId, Nullable<int> equipmentId, Nullable<double> quantityUsed, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var sidewalkTimeIdParameter = sidewalkTimeId.HasValue ?
                new ObjectParameter("SidewalkTimeId", sidewalkTimeId) :
                new ObjectParameter("SidewalkTimeId", typeof(long));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var quantityUsedParameter = quantityUsed.HasValue ?
                new ObjectParameter("QuantityUsed", quantityUsed) :
                new ObjectParameter("QuantityUsed", typeof(double));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SidewalkTimeEquipment_Insert", sidewalkTimeEquipmentId, sidewalkTimeIdParameter, equipmentIdParameter, quantityUsedParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int SidewalkTimeEquipment_Update(Nullable<long> sidewalkTimeEquipmentId, Nullable<long> sidewalkTimeId, Nullable<int> equipmentId, Nullable<double> quantityUsed, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var sidewalkTimeEquipmentIdParameter = sidewalkTimeEquipmentId.HasValue ?
                new ObjectParameter("SidewalkTimeEquipmentId", sidewalkTimeEquipmentId) :
                new ObjectParameter("SidewalkTimeEquipmentId", typeof(long));
    
            var sidewalkTimeIdParameter = sidewalkTimeId.HasValue ?
                new ObjectParameter("SidewalkTimeId", sidewalkTimeId) :
                new ObjectParameter("SidewalkTimeId", typeof(long));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var quantityUsedParameter = quantityUsed.HasValue ?
                new ObjectParameter("QuantityUsed", quantityUsed) :
                new ObjectParameter("QuantityUsed", typeof(double));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SidewalkTimeEquipment_Update", sidewalkTimeEquipmentIdParameter, sidewalkTimeIdParameter, equipmentIdParameter, quantityUsedParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int State_Delete(Nullable<int> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("State_Delete", stateIdParameter);
        }
    
        public virtual ObjectResult<State_Find_Result> State_Find(Nullable<bool> searchUsinGOR, Nullable<int> stateId, string stateAbbr, string stateName, string fipsStateCode, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var stateAbbrParameter = stateAbbr != null ?
                new ObjectParameter("StateAbbr", stateAbbr) :
                new ObjectParameter("StateAbbr", typeof(string));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var fipsStateCodeParameter = fipsStateCode != null ?
                new ObjectParameter("FipsStateCode", fipsStateCode) :
                new ObjectParameter("FipsStateCode", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<State_Find_Result>("State_Find", searchUsinGORParameter, stateIdParameter, stateAbbrParameter, stateNameParameter, fipsStateCodeParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<State_Get_List_Result> State_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<State_Get_List_Result>("State_Get_List");
        }
    
        public virtual ObjectResult<State_GetByStateId_Result> State_GetByStateId(Nullable<int> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<State_GetByStateId_Result>("State_GetByStateId", stateIdParameter);
        }
    
        public virtual int State_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("State_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int State_Insert(ObjectParameter stateId, string stateAbbr, string stateName, string fipsStateCode, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var stateAbbrParameter = stateAbbr != null ?
                new ObjectParameter("StateAbbr", stateAbbr) :
                new ObjectParameter("StateAbbr", typeof(string));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var fipsStateCodeParameter = fipsStateCode != null ?
                new ObjectParameter("FipsStateCode", fipsStateCode) :
                new ObjectParameter("FipsStateCode", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("State_Insert", stateId, stateAbbrParameter, stateNameParameter, fipsStateCodeParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int State_Update(Nullable<int> stateId, string stateAbbr, string stateName, string fipsStateCode, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var stateAbbrParameter = stateAbbr != null ?
                new ObjectParameter("StateAbbr", stateAbbr) :
                new ObjectParameter("StateAbbr", typeof(string));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var fipsStateCodeParameter = fipsStateCode != null ?
                new ObjectParameter("FipsStateCode", fipsStateCode) :
                new ObjectParameter("FipsStateCode", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("State_Update", stateIdParameter, stateAbbrParameter, stateNameParameter, fipsStateCodeParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int SurfaceType_Delete(Nullable<int> surfaceTypeId)
        {
            var surfaceTypeIdParameter = surfaceTypeId.HasValue ?
                new ObjectParameter("SurfaceTypeId", surfaceTypeId) :
                new ObjectParameter("SurfaceTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SurfaceType_Delete", surfaceTypeIdParameter);
        }
    
        public virtual ObjectResult<SurfaceType_Find_Result> SurfaceType_Find(Nullable<bool> searchUsinGOR, Nullable<int> surfaceTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var surfaceTypeIdParameter = surfaceTypeId.HasValue ?
                new ObjectParameter("SurfaceTypeId", surfaceTypeId) :
                new ObjectParameter("SurfaceTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurfaceType_Find_Result>("SurfaceType_Find", searchUsinGORParameter, surfaceTypeIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<SurfaceType_Get_List_Result> SurfaceType_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurfaceType_Get_List_Result>("SurfaceType_Get_List");
        }
    
        public virtual ObjectResult<SurfaceType_GetByName_Result> SurfaceType_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurfaceType_GetByName_Result>("SurfaceType_GetByName", nameParameter);
        }
    
        public virtual ObjectResult<SurfaceType_GetBySurfaceTypeId_Result> SurfaceType_GetBySurfaceTypeId(Nullable<int> surfaceTypeId)
        {
            var surfaceTypeIdParameter = surfaceTypeId.HasValue ?
                new ObjectParameter("SurfaceTypeId", surfaceTypeId) :
                new ObjectParameter("SurfaceTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurfaceType_GetBySurfaceTypeId_Result>("SurfaceType_GetBySurfaceTypeId", surfaceTypeIdParameter);
        }
    
        public virtual int SurfaceType_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SurfaceType_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int SurfaceType_Insert(ObjectParameter surfaceTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SurfaceType_Insert", surfaceTypeId, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int SurfaceType_Update(Nullable<int> surfaceTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var surfaceTypeIdParameter = surfaceTypeId.HasValue ?
                new ObjectParameter("SurfaceTypeId", surfaceTypeId) :
                new ObjectParameter("SurfaceTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SurfaceType_Update", surfaceTypeIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Territory_Delete(Nullable<int> territoryId)
        {
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Territory_Delete", territoryIdParameter);
        }
    
        public virtual ObjectResult<Territory_Find_Result> Territory_Find(Nullable<bool> searchUsinGOR, Nullable<int> territoryId, string name, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, Nullable<int> pushForemanId, Nullable<bool> isActive)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var pushForemanIdParameter = pushForemanId.HasValue ?
                new ObjectParameter("PushForemanId", pushForemanId) :
                new ObjectParameter("PushForemanId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Territory_Find_Result>("Territory_Find", searchUsinGORParameter, territoryIdParameter, nameParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, pushForemanIdParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Territory_Get_List_Result> Territory_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Territory_Get_List_Result>("Territory_Get_List");
        }
    
        public virtual ObjectResult<Territory_GetByName_Result> Territory_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Territory_GetByName_Result>("Territory_GetByName", nameParameter);
        }
    
        public virtual ObjectResult<Territory_GetByPushForemanId_Result> Territory_GetByPushForemanId(Nullable<int> pushForemanId)
        {
            var pushForemanIdParameter = pushForemanId.HasValue ?
                new ObjectParameter("PushForemanId", pushForemanId) :
                new ObjectParameter("PushForemanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Territory_GetByPushForemanId_Result>("Territory_GetByPushForemanId", pushForemanIdParameter);
        }
    
        public virtual ObjectResult<Territory_GetByTerritoryId_Result> Territory_GetByTerritoryId(Nullable<int> territoryId)
        {
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Territory_GetByTerritoryId_Result>("Territory_GetByTerritoryId", territoryIdParameter);
        }
    
        public virtual int Territory_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Territory_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int Territory_Insert(ObjectParameter territoryId, string name, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, Nullable<int> pushForemanId, Nullable<bool> isActive)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var pushForemanIdParameter = pushForemanId.HasValue ?
                new ObjectParameter("PushForemanId", pushForemanId) :
                new ObjectParameter("PushForemanId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Territory_Insert", territoryId, nameParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, pushForemanIdParameter, isActiveParameter);
        }
    
        public virtual int Territory_Update(Nullable<int> territoryId, string name, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, Nullable<int> pushForemanId, Nullable<bool> isActive)
        {
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var pushForemanIdParameter = pushForemanId.HasValue ?
                new ObjectParameter("PushForemanId", pushForemanId) :
                new ObjectParameter("PushForemanId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Territory_Update", territoryIdParameter, nameParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, pushForemanIdParameter, isActiveParameter);
        }
    
        public virtual int TerritoryArea_Delete(Nullable<int> territoryAreaId)
        {
            var territoryAreaIdParameter = territoryAreaId.HasValue ?
                new ObjectParameter("TerritoryAreaId", territoryAreaId) :
                new ObjectParameter("TerritoryAreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TerritoryArea_Delete", territoryAreaIdParameter);
        }
    
        public virtual ObjectResult<TerritoryArea_Find_Result> TerritoryArea_Find(Nullable<bool> searchUsinGOR, Nullable<int> territoryAreaId, Nullable<int> territoryId, string zipCode, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var territoryAreaIdParameter = territoryAreaId.HasValue ?
                new ObjectParameter("TerritoryAreaId", territoryAreaId) :
                new ObjectParameter("TerritoryAreaId", typeof(int));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TerritoryArea_Find_Result>("TerritoryArea_Find", searchUsinGORParameter, territoryAreaIdParameter, territoryIdParameter, zipCodeParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<TerritoryArea_Get_List_Result> TerritoryArea_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TerritoryArea_Get_List_Result>("TerritoryArea_Get_List");
        }
    
        public virtual ObjectResult<TerritoryArea_GetByTerritoryAreaId_Result> TerritoryArea_GetByTerritoryAreaId(Nullable<int> territoryAreaId)
        {
            var territoryAreaIdParameter = territoryAreaId.HasValue ?
                new ObjectParameter("TerritoryAreaId", territoryAreaId) :
                new ObjectParameter("TerritoryAreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TerritoryArea_GetByTerritoryAreaId_Result>("TerritoryArea_GetByTerritoryAreaId", territoryAreaIdParameter);
        }
    
        public virtual ObjectResult<TerritoryArea_GetByTerritoryId_Result> TerritoryArea_GetByTerritoryId(Nullable<int> territoryId)
        {
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TerritoryArea_GetByTerritoryId_Result>("TerritoryArea_GetByTerritoryId", territoryIdParameter);
        }
    
        public virtual ObjectResult<TerritoryArea_GetByTerritoryIdZipCode_Result> TerritoryArea_GetByTerritoryIdZipCode(Nullable<int> territoryId, string zipCode)
        {
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TerritoryArea_GetByTerritoryIdZipCode_Result>("TerritoryArea_GetByTerritoryIdZipCode", territoryIdParameter, zipCodeParameter);
        }
    
        public virtual int TerritoryArea_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TerritoryArea_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int TerritoryArea_Insert(ObjectParameter territoryAreaId, Nullable<int> territoryId, string zipCode, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TerritoryArea_Insert", territoryAreaId, territoryIdParameter, zipCodeParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int TerritoryArea_Update(Nullable<int> territoryAreaId, Nullable<int> territoryId, string zipCode, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var territoryAreaIdParameter = territoryAreaId.HasValue ?
                new ObjectParameter("TerritoryAreaId", territoryAreaId) :
                new ObjectParameter("TerritoryAreaId", typeof(int));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TerritoryArea_Update", territoryAreaIdParameter, territoryIdParameter, zipCodeParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int TimeTicket_Delete(Nullable<int> timeTicketId)
        {
            var timeTicketIdParameter = timeTicketId.HasValue ?
                new ObjectParameter("TimeTicketId", timeTicketId) :
                new ObjectParameter("TimeTicketId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TimeTicket_Delete", timeTicketIdParameter);
        }
    
        public virtual ObjectResult<TimeTicket_Find_Result> TimeTicket_Find(Nullable<bool> searchUsinGOR, Nullable<int> timeTicketId, Nullable<int> vendorRouteId, Nullable<int> vendorId, Nullable<int> seasonId, Nullable<int> number, string description, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var timeTicketIdParameter = timeTicketId.HasValue ?
                new ObjectParameter("TimeTicketId", timeTicketId) :
                new ObjectParameter("TimeTicketId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("SeasonId", seasonId) :
                new ObjectParameter("SeasonId", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TimeTicket_Find_Result>("TimeTicket_Find", searchUsinGORParameter, timeTicketIdParameter, vendorRouteIdParameter, vendorIdParameter, seasonIdParameter, numberParameter, descriptionParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<TimeTicket_Get_List_Result> TimeTicket_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TimeTicket_Get_List_Result>("TimeTicket_Get_List");
        }
    
        public virtual ObjectResult<TimeTicket_GetBySeasonId_Result> TimeTicket_GetBySeasonId(Nullable<int> seasonId)
        {
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("SeasonId", seasonId) :
                new ObjectParameter("SeasonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TimeTicket_GetBySeasonId_Result>("TimeTicket_GetBySeasonId", seasonIdParameter);
        }
    
        public virtual ObjectResult<TimeTicket_GetBySeasonIdVendorId_Result> TimeTicket_GetBySeasonIdVendorId(Nullable<int> seasonId, Nullable<int> vendorId)
        {
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("SeasonId", seasonId) :
                new ObjectParameter("SeasonId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TimeTicket_GetBySeasonIdVendorId_Result>("TimeTicket_GetBySeasonIdVendorId", seasonIdParameter, vendorIdParameter);
        }
    
        public virtual ObjectResult<TimeTicket_GetByTimeTicketId_Result> TimeTicket_GetByTimeTicketId(Nullable<int> timeTicketId)
        {
            var timeTicketIdParameter = timeTicketId.HasValue ?
                new ObjectParameter("TimeTicketId", timeTicketId) :
                new ObjectParameter("TimeTicketId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TimeTicket_GetByTimeTicketId_Result>("TimeTicket_GetByTimeTicketId", timeTicketIdParameter);
        }
    
        public virtual ObjectResult<TimeTicket_GetByVendorId_Result> TimeTicket_GetByVendorId(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TimeTicket_GetByVendorId_Result>("TimeTicket_GetByVendorId", vendorIdParameter);
        }
    
        public virtual ObjectResult<TimeTicket_GetByVendorRouteId_Result> TimeTicket_GetByVendorRouteId(Nullable<int> vendorRouteId)
        {
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TimeTicket_GetByVendorRouteId_Result>("TimeTicket_GetByVendorRouteId", vendorRouteIdParameter);
        }
    
        public virtual int TimeTicket_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TimeTicket_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int TimeTicket_Insert(ObjectParameter timeTicketId, Nullable<int> vendorRouteId, Nullable<int> vendorId, Nullable<int> seasonId, Nullable<int> number, string description, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("SeasonId", seasonId) :
                new ObjectParameter("SeasonId", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TimeTicket_Insert", timeTicketId, vendorRouteIdParameter, vendorIdParameter, seasonIdParameter, numberParameter, descriptionParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int TimeTicket_Update(Nullable<int> timeTicketId, Nullable<int> vendorRouteId, Nullable<int> vendorId, Nullable<int> seasonId, Nullable<int> number, string description, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var timeTicketIdParameter = timeTicketId.HasValue ?
                new ObjectParameter("TimeTicketId", timeTicketId) :
                new ObjectParameter("TimeTicketId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("SeasonId", seasonId) :
                new ObjectParameter("SeasonId", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TimeTicket_Update", timeTicketIdParameter, vendorRouteIdParameter, vendorIdParameter, seasonIdParameter, numberParameter, descriptionParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int TimeTicketProperty_Delete(Nullable<int> timeTicketPropertyId)
        {
            var timeTicketPropertyIdParameter = timeTicketPropertyId.HasValue ?
                new ObjectParameter("TimeTicketPropertyId", timeTicketPropertyId) :
                new ObjectParameter("TimeTicketPropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TimeTicketProperty_Delete", timeTicketPropertyIdParameter);
        }
    
        public virtual ObjectResult<TimeTicketProperty_Find_Result> TimeTicketProperty_Find(Nullable<bool> searchUsinGOR, Nullable<int> timeTicketPropertyId, Nullable<int> timeTicketId, Nullable<int> vendorPropertyId, Nullable<int> stopOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var timeTicketPropertyIdParameter = timeTicketPropertyId.HasValue ?
                new ObjectParameter("TimeTicketPropertyId", timeTicketPropertyId) :
                new ObjectParameter("TimeTicketPropertyId", typeof(int));
    
            var timeTicketIdParameter = timeTicketId.HasValue ?
                new ObjectParameter("TimeTicketId", timeTicketId) :
                new ObjectParameter("TimeTicketId", typeof(int));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var stopOrderParameter = stopOrder.HasValue ?
                new ObjectParameter("StopOrder", stopOrder) :
                new ObjectParameter("StopOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TimeTicketProperty_Find_Result>("TimeTicketProperty_Find", searchUsinGORParameter, timeTicketPropertyIdParameter, timeTicketIdParameter, vendorPropertyIdParameter, stopOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<TimeTicketProperty_Get_List_Result> TimeTicketProperty_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TimeTicketProperty_Get_List_Result>("TimeTicketProperty_Get_List");
        }
    
        public virtual ObjectResult<TimeTicketProperty_GetByTimeTicketId_Result> TimeTicketProperty_GetByTimeTicketId(Nullable<int> timeTicketId)
        {
            var timeTicketIdParameter = timeTicketId.HasValue ?
                new ObjectParameter("TimeTicketId", timeTicketId) :
                new ObjectParameter("TimeTicketId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TimeTicketProperty_GetByTimeTicketId_Result>("TimeTicketProperty_GetByTimeTicketId", timeTicketIdParameter);
        }
    
        public virtual ObjectResult<TimeTicketProperty_GetByTimeTicketPropertyId_Result> TimeTicketProperty_GetByTimeTicketPropertyId(Nullable<int> timeTicketPropertyId)
        {
            var timeTicketPropertyIdParameter = timeTicketPropertyId.HasValue ?
                new ObjectParameter("TimeTicketPropertyId", timeTicketPropertyId) :
                new ObjectParameter("TimeTicketPropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TimeTicketProperty_GetByTimeTicketPropertyId_Result>("TimeTicketProperty_GetByTimeTicketPropertyId", timeTicketPropertyIdParameter);
        }
    
        public virtual ObjectResult<TimeTicketProperty_GetByVendorPropertyId_Result> TimeTicketProperty_GetByVendorPropertyId(Nullable<int> vendorPropertyId)
        {
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TimeTicketProperty_GetByVendorPropertyId_Result>("TimeTicketProperty_GetByVendorPropertyId", vendorPropertyIdParameter);
        }
    
        public virtual int TimeTicketProperty_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TimeTicketProperty_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int TimeTicketProperty_Insert(ObjectParameter timeTicketPropertyId, Nullable<int> timeTicketId, Nullable<int> vendorPropertyId, Nullable<int> stopOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var timeTicketIdParameter = timeTicketId.HasValue ?
                new ObjectParameter("TimeTicketId", timeTicketId) :
                new ObjectParameter("TimeTicketId", typeof(int));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var stopOrderParameter = stopOrder.HasValue ?
                new ObjectParameter("StopOrder", stopOrder) :
                new ObjectParameter("StopOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TimeTicketProperty_Insert", timeTicketPropertyId, timeTicketIdParameter, vendorPropertyIdParameter, stopOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int TimeTicketProperty_Update(Nullable<int> timeTicketPropertyId, Nullable<int> timeTicketId, Nullable<int> vendorPropertyId, Nullable<int> stopOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var timeTicketPropertyIdParameter = timeTicketPropertyId.HasValue ?
                new ObjectParameter("TimeTicketPropertyId", timeTicketPropertyId) :
                new ObjectParameter("TimeTicketPropertyId", typeof(int));
    
            var timeTicketIdParameter = timeTicketId.HasValue ?
                new ObjectParameter("TimeTicketId", timeTicketId) :
                new ObjectParameter("TimeTicketId", typeof(int));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var stopOrderParameter = stopOrder.HasValue ?
                new ObjectParameter("StopOrder", stopOrder) :
                new ObjectParameter("StopOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TimeTicketProperty_Update", timeTicketPropertyIdParameter, timeTicketIdParameter, vendorPropertyIdParameter, stopOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Trip_Delete(Nullable<int> tripId)
        {
            var tripIdParameter = tripId.HasValue ?
                new ObjectParameter("TripId", tripId) :
                new ObjectParameter("TripId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Trip_Delete", tripIdParameter);
        }
    
        public virtual ObjectResult<Trip_Find_Result> Trip_Find(Nullable<bool> searchUsinGOR, Nullable<int> tripId, Nullable<int> weatherEventId, Nullable<int> workTypeId, Nullable<int> truckId, Nullable<int> driverVendorWorkerId, Nullable<bool> isActive, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var tripIdParameter = tripId.HasValue ?
                new ObjectParameter("TripId", tripId) :
                new ObjectParameter("TripId", typeof(int));
    
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var truckIdParameter = truckId.HasValue ?
                new ObjectParameter("TruckId", truckId) :
                new ObjectParameter("TruckId", typeof(int));
    
            var driverVendorWorkerIdParameter = driverVendorWorkerId.HasValue ?
                new ObjectParameter("DriverVendorWorkerId", driverVendorWorkerId) :
                new ObjectParameter("DriverVendorWorkerId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Trip_Find_Result>("Trip_Find", searchUsinGORParameter, tripIdParameter, weatherEventIdParameter, workTypeIdParameter, truckIdParameter, driverVendorWorkerIdParameter, isActiveParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<Trip_Get_List_Result> Trip_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Trip_Get_List_Result>("Trip_Get_List");
        }
    
        public virtual ObjectResult<Trip_GetByDriverVendorWorkerId_Result> Trip_GetByDriverVendorWorkerId(Nullable<int> driverVendorWorkerId)
        {
            var driverVendorWorkerIdParameter = driverVendorWorkerId.HasValue ?
                new ObjectParameter("DriverVendorWorkerId", driverVendorWorkerId) :
                new ObjectParameter("DriverVendorWorkerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Trip_GetByDriverVendorWorkerId_Result>("Trip_GetByDriverVendorWorkerId", driverVendorWorkerIdParameter);
        }
    
        public virtual ObjectResult<Trip_GetByTripId_Result> Trip_GetByTripId(Nullable<int> tripId)
        {
            var tripIdParameter = tripId.HasValue ?
                new ObjectParameter("TripId", tripId) :
                new ObjectParameter("TripId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Trip_GetByTripId_Result>("Trip_GetByTripId", tripIdParameter);
        }
    
        public virtual ObjectResult<Trip_GetByTruckId_Result> Trip_GetByTruckId(Nullable<int> truckId)
        {
            var truckIdParameter = truckId.HasValue ?
                new ObjectParameter("TruckId", truckId) :
                new ObjectParameter("TruckId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Trip_GetByTruckId_Result>("Trip_GetByTruckId", truckIdParameter);
        }
    
        public virtual ObjectResult<Trip_GetByWeatherEventId_Result> Trip_GetByWeatherEventId(Nullable<int> weatherEventId)
        {
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Trip_GetByWeatherEventId_Result>("Trip_GetByWeatherEventId", weatherEventIdParameter);
        }
    
        public virtual ObjectResult<Trip_GetByWeatherEventIdTruckId_Result> Trip_GetByWeatherEventIdTruckId(Nullable<int> weatherEventId, Nullable<int> truckId)
        {
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            var truckIdParameter = truckId.HasValue ?
                new ObjectParameter("TruckId", truckId) :
                new ObjectParameter("TruckId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Trip_GetByWeatherEventIdTruckId_Result>("Trip_GetByWeatherEventIdTruckId", weatherEventIdParameter, truckIdParameter);
        }
    
        public virtual ObjectResult<Trip_GetByWorkTypeId_Result> Trip_GetByWorkTypeId(Nullable<int> workTypeId)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Trip_GetByWorkTypeId_Result>("Trip_GetByWorkTypeId", workTypeIdParameter);
        }
    
        public virtual int Trip_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Trip_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int Trip_Insert(ObjectParameter tripId, Nullable<int> weatherEventId, Nullable<int> workTypeId, Nullable<int> truckId, Nullable<int> driverVendorWorkerId, Nullable<bool> isActive, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var truckIdParameter = truckId.HasValue ?
                new ObjectParameter("TruckId", truckId) :
                new ObjectParameter("TruckId", typeof(int));
    
            var driverVendorWorkerIdParameter = driverVendorWorkerId.HasValue ?
                new ObjectParameter("DriverVendorWorkerId", driverVendorWorkerId) :
                new ObjectParameter("DriverVendorWorkerId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Trip_Insert", tripId, weatherEventIdParameter, workTypeIdParameter, truckIdParameter, driverVendorWorkerIdParameter, isActiveParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Trip_Update(Nullable<int> tripId, Nullable<int> weatherEventId, Nullable<int> workTypeId, Nullable<int> truckId, Nullable<int> driverVendorWorkerId, Nullable<bool> isActive, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var tripIdParameter = tripId.HasValue ?
                new ObjectParameter("TripId", tripId) :
                new ObjectParameter("TripId", typeof(int));
    
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var truckIdParameter = truckId.HasValue ?
                new ObjectParameter("TruckId", truckId) :
                new ObjectParameter("TruckId", typeof(int));
    
            var driverVendorWorkerIdParameter = driverVendorWorkerId.HasValue ?
                new ObjectParameter("DriverVendorWorkerId", driverVendorWorkerId) :
                new ObjectParameter("DriverVendorWorkerId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Trip_Update", tripIdParameter, weatherEventIdParameter, workTypeIdParameter, truckIdParameter, driverVendorWorkerIdParameter, isActiveParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int TripRoute_Delete(Nullable<int> tripRouteId)
        {
            var tripRouteIdParameter = tripRouteId.HasValue ?
                new ObjectParameter("TripRouteId", tripRouteId) :
                new ObjectParameter("TripRouteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TripRoute_Delete", tripRouteIdParameter);
        }
    
        public virtual ObjectResult<TripRoute_Find_Result> TripRoute_Find(Nullable<bool> searchUsinGOR, Nullable<int> tripRouteId, Nullable<int> weatherEventId, Nullable<int> vendorRouteId, string routeName, Nullable<int> filterByFrequencyTypeId, Nullable<int> tripId, Nullable<int> tripRouteOrder, string splitRange, Nullable<int> totalStops, Nullable<int> scheduledStops, Nullable<int> completedStops, Nullable<bool> isPublished, Nullable<int> tripStatusId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var tripRouteIdParameter = tripRouteId.HasValue ?
                new ObjectParameter("TripRouteId", tripRouteId) :
                new ObjectParameter("TripRouteId", typeof(int));
    
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            var routeNameParameter = routeName != null ?
                new ObjectParameter("RouteName", routeName) :
                new ObjectParameter("RouteName", typeof(string));
    
            var filterByFrequencyTypeIdParameter = filterByFrequencyTypeId.HasValue ?
                new ObjectParameter("FilterByFrequencyTypeId", filterByFrequencyTypeId) :
                new ObjectParameter("FilterByFrequencyTypeId", typeof(int));
    
            var tripIdParameter = tripId.HasValue ?
                new ObjectParameter("TripId", tripId) :
                new ObjectParameter("TripId", typeof(int));
    
            var tripRouteOrderParameter = tripRouteOrder.HasValue ?
                new ObjectParameter("TripRouteOrder", tripRouteOrder) :
                new ObjectParameter("TripRouteOrder", typeof(int));
    
            var splitRangeParameter = splitRange != null ?
                new ObjectParameter("SplitRange", splitRange) :
                new ObjectParameter("SplitRange", typeof(string));
    
            var totalStopsParameter = totalStops.HasValue ?
                new ObjectParameter("TotalStops", totalStops) :
                new ObjectParameter("TotalStops", typeof(int));
    
            var scheduledStopsParameter = scheduledStops.HasValue ?
                new ObjectParameter("ScheduledStops", scheduledStops) :
                new ObjectParameter("ScheduledStops", typeof(int));
    
            var completedStopsParameter = completedStops.HasValue ?
                new ObjectParameter("CompletedStops", completedStops) :
                new ObjectParameter("CompletedStops", typeof(int));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("IsPublished", isPublished) :
                new ObjectParameter("IsPublished", typeof(bool));
    
            var tripStatusIdParameter = tripStatusId.HasValue ?
                new ObjectParameter("TripStatusId", tripStatusId) :
                new ObjectParameter("TripStatusId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TripRoute_Find_Result>("TripRoute_Find", searchUsinGORParameter, tripRouteIdParameter, weatherEventIdParameter, vendorRouteIdParameter, routeNameParameter, filterByFrequencyTypeIdParameter, tripIdParameter, tripRouteOrderParameter, splitRangeParameter, totalStopsParameter, scheduledStopsParameter, completedStopsParameter, isPublishedParameter, tripStatusIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<TripRoute_Get_List_Result> TripRoute_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TripRoute_Get_List_Result>("TripRoute_Get_List");
        }
    
        public virtual ObjectResult<TripRoute_GetByFilterByFrequencyTypeId_Result> TripRoute_GetByFilterByFrequencyTypeId(Nullable<int> filterByFrequencyTypeId)
        {
            var filterByFrequencyTypeIdParameter = filterByFrequencyTypeId.HasValue ?
                new ObjectParameter("FilterByFrequencyTypeId", filterByFrequencyTypeId) :
                new ObjectParameter("FilterByFrequencyTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TripRoute_GetByFilterByFrequencyTypeId_Result>("TripRoute_GetByFilterByFrequencyTypeId", filterByFrequencyTypeIdParameter);
        }
    
        public virtual ObjectResult<TripRoute_GetByTripId_Result> TripRoute_GetByTripId(Nullable<int> tripId)
        {
            var tripIdParameter = tripId.HasValue ?
                new ObjectParameter("TripId", tripId) :
                new ObjectParameter("TripId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TripRoute_GetByTripId_Result>("TripRoute_GetByTripId", tripIdParameter);
        }
    
        public virtual ObjectResult<TripRoute_GetByTripRouteId_Result> TripRoute_GetByTripRouteId(Nullable<int> tripRouteId)
        {
            var tripRouteIdParameter = tripRouteId.HasValue ?
                new ObjectParameter("TripRouteId", tripRouteId) :
                new ObjectParameter("TripRouteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TripRoute_GetByTripRouteId_Result>("TripRoute_GetByTripRouteId", tripRouteIdParameter);
        }
    
        public virtual ObjectResult<TripRoute_GetByTripStatusId_Result> TripRoute_GetByTripStatusId(Nullable<int> tripStatusId)
        {
            var tripStatusIdParameter = tripStatusId.HasValue ?
                new ObjectParameter("TripStatusId", tripStatusId) :
                new ObjectParameter("TripStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TripRoute_GetByTripStatusId_Result>("TripRoute_GetByTripStatusId", tripStatusIdParameter);
        }
    
        public virtual ObjectResult<TripRoute_GetByVendorRouteId_Result> TripRoute_GetByVendorRouteId(Nullable<int> vendorRouteId)
        {
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TripRoute_GetByVendorRouteId_Result>("TripRoute_GetByVendorRouteId", vendorRouteIdParameter);
        }
    
        public virtual ObjectResult<TripRoute_GetByWeatherEventId_Result> TripRoute_GetByWeatherEventId(Nullable<int> weatherEventId)
        {
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TripRoute_GetByWeatherEventId_Result>("TripRoute_GetByWeatherEventId", weatherEventIdParameter);
        }
    
        public virtual ObjectResult<TripRoute_GetByWeatherEventIdVendorRouteIdSplitRange_Result> TripRoute_GetByWeatherEventIdVendorRouteIdSplitRange(Nullable<int> weatherEventId, Nullable<int> vendorRouteId, string splitRange)
        {
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            var splitRangeParameter = splitRange != null ?
                new ObjectParameter("SplitRange", splitRange) :
                new ObjectParameter("SplitRange", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TripRoute_GetByWeatherEventIdVendorRouteIdSplitRange_Result>("TripRoute_GetByWeatherEventIdVendorRouteIdSplitRange", weatherEventIdParameter, vendorRouteIdParameter, splitRangeParameter);
        }
    
        public virtual int TripRoute_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TripRoute_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int TripRoute_Insert(ObjectParameter tripRouteId, Nullable<int> weatherEventId, Nullable<int> vendorRouteId, string routeName, Nullable<int> filterByFrequencyTypeId, Nullable<int> tripId, Nullable<int> tripRouteOrder, string splitRange, Nullable<int> totalStops, Nullable<int> scheduledStops, Nullable<int> completedStops, Nullable<bool> isPublished, Nullable<int> tripStatusId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            var routeNameParameter = routeName != null ?
                new ObjectParameter("RouteName", routeName) :
                new ObjectParameter("RouteName", typeof(string));
    
            var filterByFrequencyTypeIdParameter = filterByFrequencyTypeId.HasValue ?
                new ObjectParameter("FilterByFrequencyTypeId", filterByFrequencyTypeId) :
                new ObjectParameter("FilterByFrequencyTypeId", typeof(int));
    
            var tripIdParameter = tripId.HasValue ?
                new ObjectParameter("TripId", tripId) :
                new ObjectParameter("TripId", typeof(int));
    
            var tripRouteOrderParameter = tripRouteOrder.HasValue ?
                new ObjectParameter("TripRouteOrder", tripRouteOrder) :
                new ObjectParameter("TripRouteOrder", typeof(int));
    
            var splitRangeParameter = splitRange != null ?
                new ObjectParameter("SplitRange", splitRange) :
                new ObjectParameter("SplitRange", typeof(string));
    
            var totalStopsParameter = totalStops.HasValue ?
                new ObjectParameter("TotalStops", totalStops) :
                new ObjectParameter("TotalStops", typeof(int));
    
            var scheduledStopsParameter = scheduledStops.HasValue ?
                new ObjectParameter("ScheduledStops", scheduledStops) :
                new ObjectParameter("ScheduledStops", typeof(int));
    
            var completedStopsParameter = completedStops.HasValue ?
                new ObjectParameter("CompletedStops", completedStops) :
                new ObjectParameter("CompletedStops", typeof(int));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("IsPublished", isPublished) :
                new ObjectParameter("IsPublished", typeof(bool));
    
            var tripStatusIdParameter = tripStatusId.HasValue ?
                new ObjectParameter("TripStatusId", tripStatusId) :
                new ObjectParameter("TripStatusId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TripRoute_Insert", tripRouteId, weatherEventIdParameter, vendorRouteIdParameter, routeNameParameter, filterByFrequencyTypeIdParameter, tripIdParameter, tripRouteOrderParameter, splitRangeParameter, totalStopsParameter, scheduledStopsParameter, completedStopsParameter, isPublishedParameter, tripStatusIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int TripRoute_Update(Nullable<int> tripRouteId, Nullable<int> weatherEventId, Nullable<int> vendorRouteId, string routeName, Nullable<int> filterByFrequencyTypeId, Nullable<int> tripId, Nullable<int> tripRouteOrder, string splitRange, Nullable<int> totalStops, Nullable<int> scheduledStops, Nullable<int> completedStops, Nullable<bool> isPublished, Nullable<int> tripStatusId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var tripRouteIdParameter = tripRouteId.HasValue ?
                new ObjectParameter("TripRouteId", tripRouteId) :
                new ObjectParameter("TripRouteId", typeof(int));
    
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            var routeNameParameter = routeName != null ?
                new ObjectParameter("RouteName", routeName) :
                new ObjectParameter("RouteName", typeof(string));
    
            var filterByFrequencyTypeIdParameter = filterByFrequencyTypeId.HasValue ?
                new ObjectParameter("FilterByFrequencyTypeId", filterByFrequencyTypeId) :
                new ObjectParameter("FilterByFrequencyTypeId", typeof(int));
    
            var tripIdParameter = tripId.HasValue ?
                new ObjectParameter("TripId", tripId) :
                new ObjectParameter("TripId", typeof(int));
    
            var tripRouteOrderParameter = tripRouteOrder.HasValue ?
                new ObjectParameter("TripRouteOrder", tripRouteOrder) :
                new ObjectParameter("TripRouteOrder", typeof(int));
    
            var splitRangeParameter = splitRange != null ?
                new ObjectParameter("SplitRange", splitRange) :
                new ObjectParameter("SplitRange", typeof(string));
    
            var totalStopsParameter = totalStops.HasValue ?
                new ObjectParameter("TotalStops", totalStops) :
                new ObjectParameter("TotalStops", typeof(int));
    
            var scheduledStopsParameter = scheduledStops.HasValue ?
                new ObjectParameter("ScheduledStops", scheduledStops) :
                new ObjectParameter("ScheduledStops", typeof(int));
    
            var completedStopsParameter = completedStops.HasValue ?
                new ObjectParameter("CompletedStops", completedStops) :
                new ObjectParameter("CompletedStops", typeof(int));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("IsPublished", isPublished) :
                new ObjectParameter("IsPublished", typeof(bool));
    
            var tripStatusIdParameter = tripStatusId.HasValue ?
                new ObjectParameter("TripStatusId", tripStatusId) :
                new ObjectParameter("TripStatusId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TripRoute_Update", tripRouteIdParameter, weatherEventIdParameter, vendorRouteIdParameter, routeNameParameter, filterByFrequencyTypeIdParameter, tripIdParameter, tripRouteOrderParameter, splitRangeParameter, totalStopsParameter, scheduledStopsParameter, completedStopsParameter, isPublishedParameter, tripStatusIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int TripStatus_Delete(Nullable<int> tripStatusId)
        {
            var tripStatusIdParameter = tripStatusId.HasValue ?
                new ObjectParameter("TripStatusId", tripStatusId) :
                new ObjectParameter("TripStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TripStatus_Delete", tripStatusIdParameter);
        }
    
        public virtual ObjectResult<TripStatus_Find_Result> TripStatus_Find(Nullable<bool> searchUsinGOR, Nullable<int> tripStatusId, string name, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var tripStatusIdParameter = tripStatusId.HasValue ?
                new ObjectParameter("TripStatusId", tripStatusId) :
                new ObjectParameter("TripStatusId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TripStatus_Find_Result>("TripStatus_Find", searchUsinGORParameter, tripStatusIdParameter, nameParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<TripStatus_Get_List_Result> TripStatus_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TripStatus_Get_List_Result>("TripStatus_Get_List");
        }
    
        public virtual ObjectResult<TripStatus_GetByName_Result> TripStatus_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TripStatus_GetByName_Result>("TripStatus_GetByName", nameParameter);
        }
    
        public virtual ObjectResult<TripStatus_GetByTripStatusId_Result> TripStatus_GetByTripStatusId(Nullable<int> tripStatusId)
        {
            var tripStatusIdParameter = tripStatusId.HasValue ?
                new ObjectParameter("TripStatusId", tripStatusId) :
                new ObjectParameter("TripStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TripStatus_GetByTripStatusId_Result>("TripStatus_GetByTripStatusId", tripStatusIdParameter);
        }
    
        public virtual int TripStatus_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TripStatus_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int TripStatus_Insert(Nullable<int> tripStatusId, string name, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var tripStatusIdParameter = tripStatusId.HasValue ?
                new ObjectParameter("TripStatusId", tripStatusId) :
                new ObjectParameter("TripStatusId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TripStatus_Insert", tripStatusIdParameter, nameParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int TripStatus_Update(Nullable<int> tripStatusId, Nullable<int> originalTripStatusId, string name, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var tripStatusIdParameter = tripStatusId.HasValue ?
                new ObjectParameter("TripStatusId", tripStatusId) :
                new ObjectParameter("TripStatusId", typeof(int));
    
            var originalTripStatusIdParameter = originalTripStatusId.HasValue ?
                new ObjectParameter("OriginalTripStatusId", originalTripStatusId) :
                new ObjectParameter("OriginalTripStatusId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TripStatus_Update", tripStatusIdParameter, originalTripStatusIdParameter, nameParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Truck_Delete(Nullable<int> truckId)
        {
            var truckIdParameter = truckId.HasValue ?
                new ObjectParameter("TruckId", truckId) :
                new ObjectParameter("TruckId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Truck_Delete", truckIdParameter);
        }
    
        public virtual ObjectResult<Truck_Find_Result> Truck_Find(Nullable<bool> searchUsinGOR, Nullable<int> truckId, string truckNumber, Nullable<int> vendorId, Nullable<int> equipmentId, Nullable<int> tripApiUserId, string mobilePhone, Nullable<bool> isActive, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var truckIdParameter = truckId.HasValue ?
                new ObjectParameter("TruckId", truckId) :
                new ObjectParameter("TruckId", typeof(int));
    
            var truckNumberParameter = truckNumber != null ?
                new ObjectParameter("TruckNumber", truckNumber) :
                new ObjectParameter("TruckNumber", typeof(string));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var tripApiUserIdParameter = tripApiUserId.HasValue ?
                new ObjectParameter("TripApiUserId", tripApiUserId) :
                new ObjectParameter("TripApiUserId", typeof(int));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Truck_Find_Result>("Truck_Find", searchUsinGORParameter, truckIdParameter, truckNumberParameter, vendorIdParameter, equipmentIdParameter, tripApiUserIdParameter, mobilePhoneParameter, isActiveParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<Truck_Get_List_Result> Truck_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Truck_Get_List_Result>("Truck_Get_List");
        }
    
        public virtual ObjectResult<Truck_GetByEquipmentId_Result> Truck_GetByEquipmentId(Nullable<int> equipmentId)
        {
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Truck_GetByEquipmentId_Result>("Truck_GetByEquipmentId", equipmentIdParameter);
        }
    
        public virtual ObjectResult<Truck_GetByTripApiUserId_Result> Truck_GetByTripApiUserId(Nullable<int> tripApiUserId)
        {
            var tripApiUserIdParameter = tripApiUserId.HasValue ?
                new ObjectParameter("TripApiUserId", tripApiUserId) :
                new ObjectParameter("TripApiUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Truck_GetByTripApiUserId_Result>("Truck_GetByTripApiUserId", tripApiUserIdParameter);
        }
    
        public virtual ObjectResult<Truck_GetByTruckId_Result> Truck_GetByTruckId(Nullable<int> truckId)
        {
            var truckIdParameter = truckId.HasValue ?
                new ObjectParameter("TruckId", truckId) :
                new ObjectParameter("TruckId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Truck_GetByTruckId_Result>("Truck_GetByTruckId", truckIdParameter);
        }
    
        public virtual ObjectResult<Truck_GetByVendorId_Result> Truck_GetByVendorId(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Truck_GetByVendorId_Result>("Truck_GetByVendorId", vendorIdParameter);
        }
    
        public virtual ObjectResult<Truck_GetByVendorIdEquipmentId_Result> Truck_GetByVendorIdEquipmentId(Nullable<int> vendorId, Nullable<int> equipmentId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Truck_GetByVendorIdEquipmentId_Result>("Truck_GetByVendorIdEquipmentId", vendorIdParameter, equipmentIdParameter);
        }
    
        public virtual ObjectResult<Truck_GetByVendorIdTruckNumber_Result> Truck_GetByVendorIdTruckNumber(Nullable<int> vendorId, string truckNumber)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var truckNumberParameter = truckNumber != null ?
                new ObjectParameter("TruckNumber", truckNumber) :
                new ObjectParameter("TruckNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Truck_GetByVendorIdTruckNumber_Result>("Truck_GetByVendorIdTruckNumber", vendorIdParameter, truckNumberParameter);
        }
    
        public virtual int Truck_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Truck_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int Truck_Insert(ObjectParameter truckId, string truckNumber, Nullable<int> vendorId, Nullable<int> equipmentId, Nullable<int> tripApiUserId, string mobilePhone, Nullable<bool> isActive, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var truckNumberParameter = truckNumber != null ?
                new ObjectParameter("TruckNumber", truckNumber) :
                new ObjectParameter("TruckNumber", typeof(string));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var tripApiUserIdParameter = tripApiUserId.HasValue ?
                new ObjectParameter("TripApiUserId", tripApiUserId) :
                new ObjectParameter("TripApiUserId", typeof(int));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Truck_Insert", truckId, truckNumberParameter, vendorIdParameter, equipmentIdParameter, tripApiUserIdParameter, mobilePhoneParameter, isActiveParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Truck_Update(Nullable<int> truckId, string truckNumber, Nullable<int> vendorId, Nullable<int> equipmentId, Nullable<int> tripApiUserId, string mobilePhone, Nullable<bool> isActive, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var truckIdParameter = truckId.HasValue ?
                new ObjectParameter("TruckId", truckId) :
                new ObjectParameter("TruckId", typeof(int));
    
            var truckNumberParameter = truckNumber != null ?
                new ObjectParameter("TruckNumber", truckNumber) :
                new ObjectParameter("TruckNumber", typeof(string));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var tripApiUserIdParameter = tripApiUserId.HasValue ?
                new ObjectParameter("TripApiUserId", tripApiUserId) :
                new ObjectParameter("TripApiUserId", typeof(int));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Truck_Update", truckIdParameter, truckNumberParameter, vendorIdParameter, equipmentIdParameter, tripApiUserIdParameter, mobilePhoneParameter, isActiveParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int UserRole_Delete(Nullable<int> userRoleId)
        {
            var userRoleIdParameter = userRoleId.HasValue ?
                new ObjectParameter("UserRoleId", userRoleId) :
                new ObjectParameter("UserRoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserRole_Delete", userRoleIdParameter);
        }
    
        public virtual ObjectResult<UserRole_Find_Result> UserRole_Find(Nullable<bool> searchUsinGOR, Nullable<int> userRoleId, Nullable<int> userId, Nullable<int> roleId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var userRoleIdParameter = userRoleId.HasValue ?
                new ObjectParameter("UserRoleId", userRoleId) :
                new ObjectParameter("UserRoleId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserRole_Find_Result>("UserRole_Find", searchUsinGORParameter, userRoleIdParameter, userIdParameter, roleIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<UserRole_Get_List_Result> UserRole_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserRole_Get_List_Result>("UserRole_Get_List");
        }
    
        public virtual ObjectResult<UserRole_GetByRoleId_Result> UserRole_GetByRoleId(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserRole_GetByRoleId_Result>("UserRole_GetByRoleId", roleIdParameter);
        }
    
        public virtual ObjectResult<UserRole_GetByUserId_Result> UserRole_GetByUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserRole_GetByUserId_Result>("UserRole_GetByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<UserRole_GetByUserIdRoleId_Result> UserRole_GetByUserIdRoleId(Nullable<int> userId, Nullable<int> roleId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserRole_GetByUserIdRoleId_Result>("UserRole_GetByUserIdRoleId", userIdParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<UserRole_GetByUserRoleId_Result> UserRole_GetByUserRoleId(Nullable<int> userRoleId)
        {
            var userRoleIdParameter = userRoleId.HasValue ?
                new ObjectParameter("UserRoleId", userRoleId) :
                new ObjectParameter("UserRoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserRole_GetByUserRoleId_Result>("UserRole_GetByUserRoleId", userRoleIdParameter);
        }
    
        public virtual int UserRole_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserRole_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int UserRole_Insert(ObjectParameter userRoleId, Nullable<int> userId, Nullable<int> roleId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserRole_Insert", userRoleId, userIdParameter, roleIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int UserRole_Update(Nullable<int> userRoleId, Nullable<int> userId, Nullable<int> roleId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var userRoleIdParameter = userRoleId.HasValue ?
                new ObjectParameter("UserRoleId", userRoleId) :
                new ObjectParameter("UserRoleId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserRole_Update", userRoleIdParameter, userIdParameter, roleIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int Users_Delete(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Users_Delete", userIdParameter);
        }
    
        public virtual ObjectResult<Users_Find_Result> Users_Find(Nullable<bool> searchUsinGOR, Nullable<int> userId, string username, string password, string emailAddress, string passwordQuestion, string passwordAnswer, Nullable<bool> isLockedOut, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastPasswordChangeDate, Nullable<int> failedPasswordAttemptCount, Nullable<bool> mustChangePassword, Nullable<bool> isActive, Nullable<int> vendorId, string firstName, string middleName, string lastName, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, string mobilePhone)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var passwordQuestionParameter = passwordQuestion != null ?
                new ObjectParameter("PasswordQuestion", passwordQuestion) :
                new ObjectParameter("PasswordQuestion", typeof(string));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            var isLockedOutParameter = isLockedOut.HasValue ?
                new ObjectParameter("IsLockedOut", isLockedOut) :
                new ObjectParameter("IsLockedOut", typeof(bool));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastPasswordChangeDateParameter = lastPasswordChangeDate.HasValue ?
                new ObjectParameter("LastPasswordChangeDate", lastPasswordChangeDate) :
                new ObjectParameter("LastPasswordChangeDate", typeof(System.DateTime));
    
            var failedPasswordAttemptCountParameter = failedPasswordAttemptCount.HasValue ?
                new ObjectParameter("FailedPasswordAttemptCount", failedPasswordAttemptCount) :
                new ObjectParameter("FailedPasswordAttemptCount", typeof(int));
    
            var mustChangePasswordParameter = mustChangePassword.HasValue ?
                new ObjectParameter("MustChangePassword", mustChangePassword) :
                new ObjectParameter("MustChangePassword", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Users_Find_Result>("Users_Find", searchUsinGORParameter, userIdParameter, usernameParameter, passwordParameter, emailAddressParameter, passwordQuestionParameter, passwordAnswerParameter, isLockedOutParameter, lastLoginDateParameter, lastPasswordChangeDateParameter, failedPasswordAttemptCountParameter, mustChangePasswordParameter, isActiveParameter, vendorIdParameter, firstNameParameter, middleNameParameter, lastNameParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, mobilePhoneParameter);
        }
    
        public virtual ObjectResult<Users_Get_List_Result> Users_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Users_Get_List_Result>("Users_Get_List");
        }
    
        public virtual ObjectResult<Users_GetByEmailAddress_Result> Users_GetByEmailAddress(string emailAddress)
        {
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Users_GetByEmailAddress_Result>("Users_GetByEmailAddress", emailAddressParameter);
        }
    
        public virtual ObjectResult<Users_GetByUserId_Result> Users_GetByUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Users_GetByUserId_Result>("Users_GetByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<Users_GetByUsername_Result> Users_GetByUsername(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Users_GetByUsername_Result>("Users_GetByUsername", usernameParameter);
        }
    
        public virtual ObjectResult<Users_GetByVendorId_Result> Users_GetByVendorId(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Users_GetByVendorId_Result>("Users_GetByVendorId", vendorIdParameter);
        }
    
        public virtual int Users_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Users_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int Users_Insert(ObjectParameter userId, string username, string password, string emailAddress, string passwordQuestion, string passwordAnswer, Nullable<bool> isLockedOut, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastPasswordChangeDate, Nullable<int> failedPasswordAttemptCount, Nullable<bool> mustChangePassword, Nullable<bool> isActive, Nullable<int> vendorId, string firstName, string middleName, string lastName, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, string mobilePhone)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var passwordQuestionParameter = passwordQuestion != null ?
                new ObjectParameter("PasswordQuestion", passwordQuestion) :
                new ObjectParameter("PasswordQuestion", typeof(string));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            var isLockedOutParameter = isLockedOut.HasValue ?
                new ObjectParameter("IsLockedOut", isLockedOut) :
                new ObjectParameter("IsLockedOut", typeof(bool));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastPasswordChangeDateParameter = lastPasswordChangeDate.HasValue ?
                new ObjectParameter("LastPasswordChangeDate", lastPasswordChangeDate) :
                new ObjectParameter("LastPasswordChangeDate", typeof(System.DateTime));
    
            var failedPasswordAttemptCountParameter = failedPasswordAttemptCount.HasValue ?
                new ObjectParameter("FailedPasswordAttemptCount", failedPasswordAttemptCount) :
                new ObjectParameter("FailedPasswordAttemptCount", typeof(int));
    
            var mustChangePasswordParameter = mustChangePassword.HasValue ?
                new ObjectParameter("MustChangePassword", mustChangePassword) :
                new ObjectParameter("MustChangePassword", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Users_Insert", userId, usernameParameter, passwordParameter, emailAddressParameter, passwordQuestionParameter, passwordAnswerParameter, isLockedOutParameter, lastLoginDateParameter, lastPasswordChangeDateParameter, failedPasswordAttemptCountParameter, mustChangePasswordParameter, isActiveParameter, vendorIdParameter, firstNameParameter, middleNameParameter, lastNameParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, mobilePhoneParameter);
        }
    
        public virtual int Users_Update(Nullable<int> userId, string username, string password, string emailAddress, string passwordQuestion, string passwordAnswer, Nullable<bool> isLockedOut, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastPasswordChangeDate, Nullable<int> failedPasswordAttemptCount, Nullable<bool> mustChangePassword, Nullable<bool> isActive, Nullable<int> vendorId, string firstName, string middleName, string lastName, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, string mobilePhone)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var passwordQuestionParameter = passwordQuestion != null ?
                new ObjectParameter("PasswordQuestion", passwordQuestion) :
                new ObjectParameter("PasswordQuestion", typeof(string));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            var isLockedOutParameter = isLockedOut.HasValue ?
                new ObjectParameter("IsLockedOut", isLockedOut) :
                new ObjectParameter("IsLockedOut", typeof(bool));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastPasswordChangeDateParameter = lastPasswordChangeDate.HasValue ?
                new ObjectParameter("LastPasswordChangeDate", lastPasswordChangeDate) :
                new ObjectParameter("LastPasswordChangeDate", typeof(System.DateTime));
    
            var failedPasswordAttemptCountParameter = failedPasswordAttemptCount.HasValue ?
                new ObjectParameter("FailedPasswordAttemptCount", failedPasswordAttemptCount) :
                new ObjectParameter("FailedPasswordAttemptCount", typeof(int));
    
            var mustChangePasswordParameter = mustChangePassword.HasValue ?
                new ObjectParameter("MustChangePassword", mustChangePassword) :
                new ObjectParameter("MustChangePassword", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Users_Update", userIdParameter, usernameParameter, passwordParameter, emailAddressParameter, passwordQuestionParameter, passwordAnswerParameter, isLockedOutParameter, lastLoginDateParameter, lastPasswordChangeDateParameter, failedPasswordAttemptCountParameter, mustChangePasswordParameter, isActiveParameter, vendorIdParameter, firstNameParameter, middleNameParameter, lastNameParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, mobilePhoneParameter);
        }
    
        public virtual int Vendor_Delete(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Vendor_Delete", vendorIdParameter);
        }
    
        public virtual ObjectResult<Vendor_Find_Result> Vendor_Find(Nullable<bool> searchUsinGOR, Nullable<int> vendorId, string businessName, string checkName, string street1, string street2, string city, Nullable<int> stateId, string zipCode, string attentionName, string einSsn, Nullable<bool> isContactSheetOnfile, Nullable<bool> isInsuranceOnFile, Nullable<bool> isWce1OnFile, Nullable<bool> isActive, Nullable<bool> isObsolete, Nullable<bool> is1099, Nullable<bool> isForeman, Nullable<bool> isOutlying, Nullable<bool> isFuelSurcharge, Nullable<System.DateTime> insuranceExpirationDate, Nullable<System.DateTime> wce1ExpirationDate, string contactName, string homePhoneNumber, string workPhoneNumber, string mobilePhoneNumber, string emergencyPhoneNumber, string faxNumber, string emailAddress, string alternateContactName, string alternateContactPhoneNumber, string trade, string qbReference, string comments, Nullable<bool> isSyncNeeded, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, string abList)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var checkNameParameter = checkName != null ?
                new ObjectParameter("CheckName", checkName) :
                new ObjectParameter("CheckName", typeof(string));
    
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            var street2Parameter = street2 != null ?
                new ObjectParameter("Street2", street2) :
                new ObjectParameter("Street2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var attentionNameParameter = attentionName != null ?
                new ObjectParameter("AttentionName", attentionName) :
                new ObjectParameter("AttentionName", typeof(string));
    
            var einSsnParameter = einSsn != null ?
                new ObjectParameter("EinSsn", einSsn) :
                new ObjectParameter("EinSsn", typeof(string));
    
            var isContactSheetOnfileParameter = isContactSheetOnfile.HasValue ?
                new ObjectParameter("IsContactSheetOnfile", isContactSheetOnfile) :
                new ObjectParameter("IsContactSheetOnfile", typeof(bool));
    
            var isInsuranceOnFileParameter = isInsuranceOnFile.HasValue ?
                new ObjectParameter("IsInsuranceOnFile", isInsuranceOnFile) :
                new ObjectParameter("IsInsuranceOnFile", typeof(bool));
    
            var isWce1OnFileParameter = isWce1OnFile.HasValue ?
                new ObjectParameter("IsWce1OnFile", isWce1OnFile) :
                new ObjectParameter("IsWce1OnFile", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isObsoleteParameter = isObsolete.HasValue ?
                new ObjectParameter("IsObsolete", isObsolete) :
                new ObjectParameter("IsObsolete", typeof(bool));
    
            var is1099Parameter = is1099.HasValue ?
                new ObjectParameter("Is1099", is1099) :
                new ObjectParameter("Is1099", typeof(bool));
    
            var isForemanParameter = isForeman.HasValue ?
                new ObjectParameter("IsForeman", isForeman) :
                new ObjectParameter("IsForeman", typeof(bool));
    
            var isOutlyingParameter = isOutlying.HasValue ?
                new ObjectParameter("IsOutlying", isOutlying) :
                new ObjectParameter("IsOutlying", typeof(bool));
    
            var isFuelSurchargeParameter = isFuelSurcharge.HasValue ?
                new ObjectParameter("IsFuelSurcharge", isFuelSurcharge) :
                new ObjectParameter("IsFuelSurcharge", typeof(bool));
    
            var insuranceExpirationDateParameter = insuranceExpirationDate.HasValue ?
                new ObjectParameter("InsuranceExpirationDate", insuranceExpirationDate) :
                new ObjectParameter("InsuranceExpirationDate", typeof(System.DateTime));
    
            var wce1ExpirationDateParameter = wce1ExpirationDate.HasValue ?
                new ObjectParameter("Wce1ExpirationDate", wce1ExpirationDate) :
                new ObjectParameter("Wce1ExpirationDate", typeof(System.DateTime));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var homePhoneNumberParameter = homePhoneNumber != null ?
                new ObjectParameter("HomePhoneNumber", homePhoneNumber) :
                new ObjectParameter("HomePhoneNumber", typeof(string));
    
            var workPhoneNumberParameter = workPhoneNumber != null ?
                new ObjectParameter("WorkPhoneNumber", workPhoneNumber) :
                new ObjectParameter("WorkPhoneNumber", typeof(string));
    
            var mobilePhoneNumberParameter = mobilePhoneNumber != null ?
                new ObjectParameter("MobilePhoneNumber", mobilePhoneNumber) :
                new ObjectParameter("MobilePhoneNumber", typeof(string));
    
            var emergencyPhoneNumberParameter = emergencyPhoneNumber != null ?
                new ObjectParameter("EmergencyPhoneNumber", emergencyPhoneNumber) :
                new ObjectParameter("EmergencyPhoneNumber", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var alternateContactNameParameter = alternateContactName != null ?
                new ObjectParameter("AlternateContactName", alternateContactName) :
                new ObjectParameter("AlternateContactName", typeof(string));
    
            var alternateContactPhoneNumberParameter = alternateContactPhoneNumber != null ?
                new ObjectParameter("AlternateContactPhoneNumber", alternateContactPhoneNumber) :
                new ObjectParameter("AlternateContactPhoneNumber", typeof(string));
    
            var tradeParameter = trade != null ?
                new ObjectParameter("Trade", trade) :
                new ObjectParameter("Trade", typeof(string));
    
            var qbReferenceParameter = qbReference != null ?
                new ObjectParameter("QbReference", qbReference) :
                new ObjectParameter("QbReference", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var abListParameter = abList != null ?
                new ObjectParameter("AbList", abList) :
                new ObjectParameter("AbList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vendor_Find_Result>("Vendor_Find", searchUsinGORParameter, vendorIdParameter, businessNameParameter, checkNameParameter, street1Parameter, street2Parameter, cityParameter, stateIdParameter, zipCodeParameter, attentionNameParameter, einSsnParameter, isContactSheetOnfileParameter, isInsuranceOnFileParameter, isWce1OnFileParameter, isActiveParameter, isObsoleteParameter, is1099Parameter, isForemanParameter, isOutlyingParameter, isFuelSurchargeParameter, insuranceExpirationDateParameter, wce1ExpirationDateParameter, contactNameParameter, homePhoneNumberParameter, workPhoneNumberParameter, mobilePhoneNumberParameter, emergencyPhoneNumberParameter, faxNumberParameter, emailAddressParameter, alternateContactNameParameter, alternateContactPhoneNumberParameter, tradeParameter, qbReferenceParameter, commentsParameter, isSyncNeededParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, abListParameter);
        }
    
        public virtual ObjectResult<Vendor_Get_List_Result> Vendor_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vendor_Get_List_Result>("Vendor_Get_List");
        }
    
        public virtual ObjectResult<Vendor_GetByStateId_Result> Vendor_GetByStateId(Nullable<int> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vendor_GetByStateId_Result>("Vendor_GetByStateId", stateIdParameter);
        }
    
        public virtual ObjectResult<Vendor_GetByVendorId_Result> Vendor_GetByVendorId(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vendor_GetByVendorId_Result>("Vendor_GetByVendorId", vendorIdParameter);
        }
    
        public virtual int Vendor_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Vendor_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int Vendor_Insert(ObjectParameter vendorId, string businessName, string checkName, string street1, string street2, string city, Nullable<int> stateId, string zipCode, string attentionName, string einSsn, Nullable<bool> isContactSheetOnfile, Nullable<bool> isInsuranceOnFile, Nullable<bool> isWce1OnFile, Nullable<bool> isActive, Nullable<bool> isObsolete, Nullable<bool> is1099, Nullable<bool> isForeman, Nullable<bool> isOutlying, Nullable<bool> isFuelSurcharge, Nullable<System.DateTime> insuranceExpirationDate, Nullable<System.DateTime> wce1ExpirationDate, string contactName, string homePhoneNumber, string workPhoneNumber, string mobilePhoneNumber, string emergencyPhoneNumber, string faxNumber, string emailAddress, string alternateContactName, string alternateContactPhoneNumber, string trade, string qbReference, string comments, Nullable<bool> isSyncNeeded, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, string abList)
        {
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var checkNameParameter = checkName != null ?
                new ObjectParameter("CheckName", checkName) :
                new ObjectParameter("CheckName", typeof(string));
    
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            var street2Parameter = street2 != null ?
                new ObjectParameter("Street2", street2) :
                new ObjectParameter("Street2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var attentionNameParameter = attentionName != null ?
                new ObjectParameter("AttentionName", attentionName) :
                new ObjectParameter("AttentionName", typeof(string));
    
            var einSsnParameter = einSsn != null ?
                new ObjectParameter("EinSsn", einSsn) :
                new ObjectParameter("EinSsn", typeof(string));
    
            var isContactSheetOnfileParameter = isContactSheetOnfile.HasValue ?
                new ObjectParameter("IsContactSheetOnfile", isContactSheetOnfile) :
                new ObjectParameter("IsContactSheetOnfile", typeof(bool));
    
            var isInsuranceOnFileParameter = isInsuranceOnFile.HasValue ?
                new ObjectParameter("IsInsuranceOnFile", isInsuranceOnFile) :
                new ObjectParameter("IsInsuranceOnFile", typeof(bool));
    
            var isWce1OnFileParameter = isWce1OnFile.HasValue ?
                new ObjectParameter("IsWce1OnFile", isWce1OnFile) :
                new ObjectParameter("IsWce1OnFile", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isObsoleteParameter = isObsolete.HasValue ?
                new ObjectParameter("IsObsolete", isObsolete) :
                new ObjectParameter("IsObsolete", typeof(bool));
    
            var is1099Parameter = is1099.HasValue ?
                new ObjectParameter("Is1099", is1099) :
                new ObjectParameter("Is1099", typeof(bool));
    
            var isForemanParameter = isForeman.HasValue ?
                new ObjectParameter("IsForeman", isForeman) :
                new ObjectParameter("IsForeman", typeof(bool));
    
            var isOutlyingParameter = isOutlying.HasValue ?
                new ObjectParameter("IsOutlying", isOutlying) :
                new ObjectParameter("IsOutlying", typeof(bool));
    
            var isFuelSurchargeParameter = isFuelSurcharge.HasValue ?
                new ObjectParameter("IsFuelSurcharge", isFuelSurcharge) :
                new ObjectParameter("IsFuelSurcharge", typeof(bool));
    
            var insuranceExpirationDateParameter = insuranceExpirationDate.HasValue ?
                new ObjectParameter("InsuranceExpirationDate", insuranceExpirationDate) :
                new ObjectParameter("InsuranceExpirationDate", typeof(System.DateTime));
    
            var wce1ExpirationDateParameter = wce1ExpirationDate.HasValue ?
                new ObjectParameter("Wce1ExpirationDate", wce1ExpirationDate) :
                new ObjectParameter("Wce1ExpirationDate", typeof(System.DateTime));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var homePhoneNumberParameter = homePhoneNumber != null ?
                new ObjectParameter("HomePhoneNumber", homePhoneNumber) :
                new ObjectParameter("HomePhoneNumber", typeof(string));
    
            var workPhoneNumberParameter = workPhoneNumber != null ?
                new ObjectParameter("WorkPhoneNumber", workPhoneNumber) :
                new ObjectParameter("WorkPhoneNumber", typeof(string));
    
            var mobilePhoneNumberParameter = mobilePhoneNumber != null ?
                new ObjectParameter("MobilePhoneNumber", mobilePhoneNumber) :
                new ObjectParameter("MobilePhoneNumber", typeof(string));
    
            var emergencyPhoneNumberParameter = emergencyPhoneNumber != null ?
                new ObjectParameter("EmergencyPhoneNumber", emergencyPhoneNumber) :
                new ObjectParameter("EmergencyPhoneNumber", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var alternateContactNameParameter = alternateContactName != null ?
                new ObjectParameter("AlternateContactName", alternateContactName) :
                new ObjectParameter("AlternateContactName", typeof(string));
    
            var alternateContactPhoneNumberParameter = alternateContactPhoneNumber != null ?
                new ObjectParameter("AlternateContactPhoneNumber", alternateContactPhoneNumber) :
                new ObjectParameter("AlternateContactPhoneNumber", typeof(string));
    
            var tradeParameter = trade != null ?
                new ObjectParameter("Trade", trade) :
                new ObjectParameter("Trade", typeof(string));
    
            var qbReferenceParameter = qbReference != null ?
                new ObjectParameter("QbReference", qbReference) :
                new ObjectParameter("QbReference", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var abListParameter = abList != null ?
                new ObjectParameter("AbList", abList) :
                new ObjectParameter("AbList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Vendor_Insert", vendorId, businessNameParameter, checkNameParameter, street1Parameter, street2Parameter, cityParameter, stateIdParameter, zipCodeParameter, attentionNameParameter, einSsnParameter, isContactSheetOnfileParameter, isInsuranceOnFileParameter, isWce1OnFileParameter, isActiveParameter, isObsoleteParameter, is1099Parameter, isForemanParameter, isOutlyingParameter, isFuelSurchargeParameter, insuranceExpirationDateParameter, wce1ExpirationDateParameter, contactNameParameter, homePhoneNumberParameter, workPhoneNumberParameter, mobilePhoneNumberParameter, emergencyPhoneNumberParameter, faxNumberParameter, emailAddressParameter, alternateContactNameParameter, alternateContactPhoneNumberParameter, tradeParameter, qbReferenceParameter, commentsParameter, isSyncNeededParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, abListParameter);
        }
    
        public virtual int Vendor_Update(Nullable<int> vendorId, string businessName, string checkName, string street1, string street2, string city, Nullable<int> stateId, string zipCode, string attentionName, string einSsn, Nullable<bool> isContactSheetOnfile, Nullable<bool> isInsuranceOnFile, Nullable<bool> isWce1OnFile, Nullable<bool> isActive, Nullable<bool> isObsolete, Nullable<bool> is1099, Nullable<bool> isForeman, Nullable<bool> isOutlying, Nullable<bool> isFuelSurcharge, Nullable<System.DateTime> insuranceExpirationDate, Nullable<System.DateTime> wce1ExpirationDate, string contactName, string homePhoneNumber, string workPhoneNumber, string mobilePhoneNumber, string emergencyPhoneNumber, string faxNumber, string emailAddress, string alternateContactName, string alternateContactPhoneNumber, string trade, string qbReference, string comments, Nullable<bool> isSyncNeeded, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, string abList)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var checkNameParameter = checkName != null ?
                new ObjectParameter("CheckName", checkName) :
                new ObjectParameter("CheckName", typeof(string));
    
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            var street2Parameter = street2 != null ?
                new ObjectParameter("Street2", street2) :
                new ObjectParameter("Street2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var attentionNameParameter = attentionName != null ?
                new ObjectParameter("AttentionName", attentionName) :
                new ObjectParameter("AttentionName", typeof(string));
    
            var einSsnParameter = einSsn != null ?
                new ObjectParameter("EinSsn", einSsn) :
                new ObjectParameter("EinSsn", typeof(string));
    
            var isContactSheetOnfileParameter = isContactSheetOnfile.HasValue ?
                new ObjectParameter("IsContactSheetOnfile", isContactSheetOnfile) :
                new ObjectParameter("IsContactSheetOnfile", typeof(bool));
    
            var isInsuranceOnFileParameter = isInsuranceOnFile.HasValue ?
                new ObjectParameter("IsInsuranceOnFile", isInsuranceOnFile) :
                new ObjectParameter("IsInsuranceOnFile", typeof(bool));
    
            var isWce1OnFileParameter = isWce1OnFile.HasValue ?
                new ObjectParameter("IsWce1OnFile", isWce1OnFile) :
                new ObjectParameter("IsWce1OnFile", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isObsoleteParameter = isObsolete.HasValue ?
                new ObjectParameter("IsObsolete", isObsolete) :
                new ObjectParameter("IsObsolete", typeof(bool));
    
            var is1099Parameter = is1099.HasValue ?
                new ObjectParameter("Is1099", is1099) :
                new ObjectParameter("Is1099", typeof(bool));
    
            var isForemanParameter = isForeman.HasValue ?
                new ObjectParameter("IsForeman", isForeman) :
                new ObjectParameter("IsForeman", typeof(bool));
    
            var isOutlyingParameter = isOutlying.HasValue ?
                new ObjectParameter("IsOutlying", isOutlying) :
                new ObjectParameter("IsOutlying", typeof(bool));
    
            var isFuelSurchargeParameter = isFuelSurcharge.HasValue ?
                new ObjectParameter("IsFuelSurcharge", isFuelSurcharge) :
                new ObjectParameter("IsFuelSurcharge", typeof(bool));
    
            var insuranceExpirationDateParameter = insuranceExpirationDate.HasValue ?
                new ObjectParameter("InsuranceExpirationDate", insuranceExpirationDate) :
                new ObjectParameter("InsuranceExpirationDate", typeof(System.DateTime));
    
            var wce1ExpirationDateParameter = wce1ExpirationDate.HasValue ?
                new ObjectParameter("Wce1ExpirationDate", wce1ExpirationDate) :
                new ObjectParameter("Wce1ExpirationDate", typeof(System.DateTime));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var homePhoneNumberParameter = homePhoneNumber != null ?
                new ObjectParameter("HomePhoneNumber", homePhoneNumber) :
                new ObjectParameter("HomePhoneNumber", typeof(string));
    
            var workPhoneNumberParameter = workPhoneNumber != null ?
                new ObjectParameter("WorkPhoneNumber", workPhoneNumber) :
                new ObjectParameter("WorkPhoneNumber", typeof(string));
    
            var mobilePhoneNumberParameter = mobilePhoneNumber != null ?
                new ObjectParameter("MobilePhoneNumber", mobilePhoneNumber) :
                new ObjectParameter("MobilePhoneNumber", typeof(string));
    
            var emergencyPhoneNumberParameter = emergencyPhoneNumber != null ?
                new ObjectParameter("EmergencyPhoneNumber", emergencyPhoneNumber) :
                new ObjectParameter("EmergencyPhoneNumber", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var alternateContactNameParameter = alternateContactName != null ?
                new ObjectParameter("AlternateContactName", alternateContactName) :
                new ObjectParameter("AlternateContactName", typeof(string));
    
            var alternateContactPhoneNumberParameter = alternateContactPhoneNumber != null ?
                new ObjectParameter("AlternateContactPhoneNumber", alternateContactPhoneNumber) :
                new ObjectParameter("AlternateContactPhoneNumber", typeof(string));
    
            var tradeParameter = trade != null ?
                new ObjectParameter("Trade", trade) :
                new ObjectParameter("Trade", typeof(string));
    
            var qbReferenceParameter = qbReference != null ?
                new ObjectParameter("QbReference", qbReference) :
                new ObjectParameter("QbReference", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var isSyncNeededParameter = isSyncNeeded.HasValue ?
                new ObjectParameter("IsSyncNeeded", isSyncNeeded) :
                new ObjectParameter("IsSyncNeeded", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var abListParameter = abList != null ?
                new ObjectParameter("AbList", abList) :
                new ObjectParameter("AbList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Vendor_Update", vendorIdParameter, businessNameParameter, checkNameParameter, street1Parameter, street2Parameter, cityParameter, stateIdParameter, zipCodeParameter, attentionNameParameter, einSsnParameter, isContactSheetOnfileParameter, isInsuranceOnFileParameter, isWce1OnFileParameter, isActiveParameter, isObsoleteParameter, is1099Parameter, isForemanParameter, isOutlyingParameter, isFuelSurchargeParameter, insuranceExpirationDateParameter, wce1ExpirationDateParameter, contactNameParameter, homePhoneNumberParameter, workPhoneNumberParameter, mobilePhoneNumberParameter, emergencyPhoneNumberParameter, faxNumberParameter, emailAddressParameter, alternateContactNameParameter, alternateContactPhoneNumberParameter, tradeParameter, qbReferenceParameter, commentsParameter, isSyncNeededParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, abListParameter);
        }
    
        public virtual int VendorEquipment_Delete(Nullable<int> vendorEquipmentId)
        {
            var vendorEquipmentIdParameter = vendorEquipmentId.HasValue ?
                new ObjectParameter("VendorEquipmentId", vendorEquipmentId) :
                new ObjectParameter("VendorEquipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorEquipment_Delete", vendorEquipmentIdParameter);
        }
    
        public virtual ObjectResult<VendorEquipment_Find_Result> VendorEquipment_Find(Nullable<bool> searchUsinGOR, Nullable<int> vendorEquipmentId, Nullable<int> vendorId, Nullable<int> foremanId, Nullable<int> equipmentId, Nullable<int> number, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, Nullable<int> territoryId)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var vendorEquipmentIdParameter = vendorEquipmentId.HasValue ?
                new ObjectParameter("VendorEquipmentId", vendorEquipmentId) :
                new ObjectParameter("VendorEquipmentId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var foremanIdParameter = foremanId.HasValue ?
                new ObjectParameter("ForemanId", foremanId) :
                new ObjectParameter("ForemanId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorEquipment_Find_Result>("VendorEquipment_Find", searchUsinGORParameter, vendorEquipmentIdParameter, vendorIdParameter, foremanIdParameter, equipmentIdParameter, numberParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, territoryIdParameter);
        }
    
        public virtual ObjectResult<VendorEquipment_Get_List_Result> VendorEquipment_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorEquipment_Get_List_Result>("VendorEquipment_Get_List");
        }
    
        public virtual ObjectResult<VendorEquipment_GetByEquipmentId_Result> VendorEquipment_GetByEquipmentId(Nullable<int> equipmentId)
        {
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorEquipment_GetByEquipmentId_Result>("VendorEquipment_GetByEquipmentId", equipmentIdParameter);
        }
    
        public virtual ObjectResult<VendorEquipment_GetByForemanId_Result> VendorEquipment_GetByForemanId(Nullable<int> foremanId)
        {
            var foremanIdParameter = foremanId.HasValue ?
                new ObjectParameter("ForemanId", foremanId) :
                new ObjectParameter("ForemanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorEquipment_GetByForemanId_Result>("VendorEquipment_GetByForemanId", foremanIdParameter);
        }
    
        public virtual ObjectResult<VendorEquipment_GetByTerritoryId_Result> VendorEquipment_GetByTerritoryId(Nullable<int> territoryId)
        {
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorEquipment_GetByTerritoryId_Result>("VendorEquipment_GetByTerritoryId", territoryIdParameter);
        }
    
        public virtual ObjectResult<VendorEquipment_GetByVendorEquipmentId_Result> VendorEquipment_GetByVendorEquipmentId(Nullable<int> vendorEquipmentId)
        {
            var vendorEquipmentIdParameter = vendorEquipmentId.HasValue ?
                new ObjectParameter("VendorEquipmentId", vendorEquipmentId) :
                new ObjectParameter("VendorEquipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorEquipment_GetByVendorEquipmentId_Result>("VendorEquipment_GetByVendorEquipmentId", vendorEquipmentIdParameter);
        }
    
        public virtual ObjectResult<VendorEquipment_GetByVendorId_Result> VendorEquipment_GetByVendorId(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorEquipment_GetByVendorId_Result>("VendorEquipment_GetByVendorId", vendorIdParameter);
        }
    
        public virtual int VendorEquipment_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorEquipment_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int VendorEquipment_Insert(ObjectParameter vendorEquipmentId, Nullable<int> vendorId, Nullable<int> foremanId, Nullable<int> equipmentId, Nullable<int> number, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, Nullable<int> territoryId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var foremanIdParameter = foremanId.HasValue ?
                new ObjectParameter("ForemanId", foremanId) :
                new ObjectParameter("ForemanId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorEquipment_Insert", vendorEquipmentId, vendorIdParameter, foremanIdParameter, equipmentIdParameter, numberParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, territoryIdParameter);
        }
    
        public virtual int VendorEquipment_Update(Nullable<int> vendorEquipmentId, Nullable<int> vendorId, Nullable<int> foremanId, Nullable<int> equipmentId, Nullable<int> number, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, Nullable<int> territoryId)
        {
            var vendorEquipmentIdParameter = vendorEquipmentId.HasValue ?
                new ObjectParameter("VendorEquipmentId", vendorEquipmentId) :
                new ObjectParameter("VendorEquipmentId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var foremanIdParameter = foremanId.HasValue ?
                new ObjectParameter("ForemanId", foremanId) :
                new ObjectParameter("ForemanId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorEquipment_Update", vendorEquipmentIdParameter, vendorIdParameter, foremanIdParameter, equipmentIdParameter, numberParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, territoryIdParameter);
        }
    
        public virtual int VendorFeeRate_Delete(Nullable<int> vendorFeeRateId)
        {
            var vendorFeeRateIdParameter = vendorFeeRateId.HasValue ?
                new ObjectParameter("VendorFeeRateId", vendorFeeRateId) :
                new ObjectParameter("VendorFeeRateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorFeeRate_Delete", vendorFeeRateIdParameter);
        }
    
        public virtual ObjectResult<VendorFeeRate_Find_Result> VendorFeeRate_Find(Nullable<bool> searchUsinGOR, Nullable<int> vendorFeeRateId, Nullable<int> vendorId, Nullable<int> equipmentId, Nullable<double> rate, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var vendorFeeRateIdParameter = vendorFeeRateId.HasValue ?
                new ObjectParameter("VendorFeeRateId", vendorFeeRateId) :
                new ObjectParameter("VendorFeeRateId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorFeeRate_Find_Result>("VendorFeeRate_Find", searchUsinGORParameter, vendorFeeRateIdParameter, vendorIdParameter, equipmentIdParameter, rateParameter, effectiveDateParameter, expirationDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<VendorFeeRate_Get_List_Result> VendorFeeRate_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorFeeRate_Get_List_Result>("VendorFeeRate_Get_List");
        }
    
        public virtual ObjectResult<VendorFeeRate_GetByEquipmentId_Result> VendorFeeRate_GetByEquipmentId(Nullable<int> equipmentId)
        {
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorFeeRate_GetByEquipmentId_Result>("VendorFeeRate_GetByEquipmentId", equipmentIdParameter);
        }
    
        public virtual ObjectResult<VendorFeeRate_GetByVendorFeeRateId_Result> VendorFeeRate_GetByVendorFeeRateId(Nullable<int> vendorFeeRateId)
        {
            var vendorFeeRateIdParameter = vendorFeeRateId.HasValue ?
                new ObjectParameter("VendorFeeRateId", vendorFeeRateId) :
                new ObjectParameter("VendorFeeRateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorFeeRate_GetByVendorFeeRateId_Result>("VendorFeeRate_GetByVendorFeeRateId", vendorFeeRateIdParameter);
        }
    
        public virtual ObjectResult<VendorFeeRate_GetByVendorId_Result> VendorFeeRate_GetByVendorId(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorFeeRate_GetByVendorId_Result>("VendorFeeRate_GetByVendorId", vendorIdParameter);
        }
    
        public virtual ObjectResult<VendorFeeRate_GetByVendorIdEquipmentId_Result> VendorFeeRate_GetByVendorIdEquipmentId(Nullable<int> vendorId, Nullable<int> equipmentId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorFeeRate_GetByVendorIdEquipmentId_Result>("VendorFeeRate_GetByVendorIdEquipmentId", vendorIdParameter, equipmentIdParameter);
        }
    
        public virtual int VendorFeeRate_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorFeeRate_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int VendorFeeRate_Insert(ObjectParameter vendorFeeRateId, Nullable<int> vendorId, Nullable<int> equipmentId, Nullable<double> rate, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorFeeRate_Insert", vendorFeeRateId, vendorIdParameter, equipmentIdParameter, rateParameter, effectiveDateParameter, expirationDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int VendorFeeRate_Update(Nullable<int> vendorFeeRateId, Nullable<int> vendorId, Nullable<int> equipmentId, Nullable<double> rate, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var vendorFeeRateIdParameter = vendorFeeRateId.HasValue ?
                new ObjectParameter("VendorFeeRateId", vendorFeeRateId) :
                new ObjectParameter("VendorFeeRateId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorFeeRate_Update", vendorFeeRateIdParameter, vendorIdParameter, equipmentIdParameter, rateParameter, effectiveDateParameter, expirationDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int VendorForeman_Delete(Nullable<int> vendorForemanId)
        {
            var vendorForemanIdParameter = vendorForemanId.HasValue ?
                new ObjectParameter("VendorForemanId", vendorForemanId) :
                new ObjectParameter("VendorForemanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorForeman_Delete", vendorForemanIdParameter);
        }
    
        public virtual ObjectResult<VendorForeman_Find_Result> VendorForeman_Find(Nullable<bool> searchUsinGOR, Nullable<int> vendorForemanId, Nullable<int> vendorId, Nullable<int> foremanId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var vendorForemanIdParameter = vendorForemanId.HasValue ?
                new ObjectParameter("VendorForemanId", vendorForemanId) :
                new ObjectParameter("VendorForemanId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var foremanIdParameter = foremanId.HasValue ?
                new ObjectParameter("ForemanId", foremanId) :
                new ObjectParameter("ForemanId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorForeman_Find_Result>("VendorForeman_Find", searchUsinGORParameter, vendorForemanIdParameter, vendorIdParameter, foremanIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<VendorForeman_Get_List_Result> VendorForeman_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorForeman_Get_List_Result>("VendorForeman_Get_List");
        }
    
        public virtual ObjectResult<VendorForeman_GetByForemanId_Result> VendorForeman_GetByForemanId(Nullable<int> foremanId)
        {
            var foremanIdParameter = foremanId.HasValue ?
                new ObjectParameter("ForemanId", foremanId) :
                new ObjectParameter("ForemanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorForeman_GetByForemanId_Result>("VendorForeman_GetByForemanId", foremanIdParameter);
        }
    
        public virtual ObjectResult<VendorForeman_GetByVendorForemanId_Result> VendorForeman_GetByVendorForemanId(Nullable<int> vendorForemanId)
        {
            var vendorForemanIdParameter = vendorForemanId.HasValue ?
                new ObjectParameter("VendorForemanId", vendorForemanId) :
                new ObjectParameter("VendorForemanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorForeman_GetByVendorForemanId_Result>("VendorForeman_GetByVendorForemanId", vendorForemanIdParameter);
        }
    
        public virtual ObjectResult<VendorForeman_GetByVendorId_Result> VendorForeman_GetByVendorId(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorForeman_GetByVendorId_Result>("VendorForeman_GetByVendorId", vendorIdParameter);
        }
    
        public virtual int VendorForeman_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorForeman_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int VendorForeman_Insert(ObjectParameter vendorForemanId, Nullable<int> vendorId, Nullable<int> foremanId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var foremanIdParameter = foremanId.HasValue ?
                new ObjectParameter("ForemanId", foremanId) :
                new ObjectParameter("ForemanId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorForeman_Insert", vendorForemanId, vendorIdParameter, foremanIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int VendorForeman_Update(Nullable<int> vendorForemanId, Nullable<int> vendorId, Nullable<int> foremanId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var vendorForemanIdParameter = vendorForemanId.HasValue ?
                new ObjectParameter("VendorForemanId", vendorForemanId) :
                new ObjectParameter("VendorForemanId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var foremanIdParameter = foremanId.HasValue ?
                new ObjectParameter("ForemanId", foremanId) :
                new ObjectParameter("ForemanId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorForeman_Update", vendorForemanIdParameter, vendorIdParameter, foremanIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int VendorProperty_Delete(Nullable<int> vendorPropertyId)
        {
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorProperty_Delete", vendorPropertyIdParameter);
        }
    
        public virtual ObjectResult<VendorProperty_Find_Result> VendorProperty_Find(Nullable<bool> searchUsinGOR, Nullable<int> vendorPropertyId, Nullable<int> vendorId, Nullable<int> propertyId, Nullable<int> workTypeId, Nullable<int> frequencyTypeId, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var frequencyTypeIdParameter = frequencyTypeId.HasValue ?
                new ObjectParameter("FrequencyTypeId", frequencyTypeId) :
                new ObjectParameter("FrequencyTypeId", typeof(int));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorProperty_Find_Result>("VendorProperty_Find", searchUsinGORParameter, vendorPropertyIdParameter, vendorIdParameter, propertyIdParameter, workTypeIdParameter, frequencyTypeIdParameter, effectiveDateParameter, expirationDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<VendorProperty_Get_List_Result> VendorProperty_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorProperty_Get_List_Result>("VendorProperty_Get_List");
        }
    
        public virtual ObjectResult<VendorProperty_GetByFrequencyTypeId_Result> VendorProperty_GetByFrequencyTypeId(Nullable<int> frequencyTypeId)
        {
            var frequencyTypeIdParameter = frequencyTypeId.HasValue ?
                new ObjectParameter("FrequencyTypeId", frequencyTypeId) :
                new ObjectParameter("FrequencyTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorProperty_GetByFrequencyTypeId_Result>("VendorProperty_GetByFrequencyTypeId", frequencyTypeIdParameter);
        }
    
        public virtual ObjectResult<VendorProperty_GetByPropertyId_Result> VendorProperty_GetByPropertyId(Nullable<int> propertyId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorProperty_GetByPropertyId_Result>("VendorProperty_GetByPropertyId", propertyIdParameter);
        }
    
        public virtual ObjectResult<VendorProperty_GetByPropertyIdWorkTypeId_Result> VendorProperty_GetByPropertyIdWorkTypeId(Nullable<int> propertyId, Nullable<int> workTypeId)
        {
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorProperty_GetByPropertyIdWorkTypeId_Result>("VendorProperty_GetByPropertyIdWorkTypeId", propertyIdParameter, workTypeIdParameter);
        }
    
        public virtual ObjectResult<VendorProperty_GetByVendorId_Result> VendorProperty_GetByVendorId(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorProperty_GetByVendorId_Result>("VendorProperty_GetByVendorId", vendorIdParameter);
        }
    
        public virtual ObjectResult<VendorProperty_GetByVendorPropertyId_Result> VendorProperty_GetByVendorPropertyId(Nullable<int> vendorPropertyId)
        {
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorProperty_GetByVendorPropertyId_Result>("VendorProperty_GetByVendorPropertyId", vendorPropertyIdParameter);
        }
    
        public virtual ObjectResult<VendorProperty_GetByWorkTypeId_Result> VendorProperty_GetByWorkTypeId(Nullable<int> workTypeId)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorProperty_GetByWorkTypeId_Result>("VendorProperty_GetByWorkTypeId", workTypeIdParameter);
        }
    
        public virtual int VendorProperty_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorProperty_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int VendorProperty_Insert(ObjectParameter vendorPropertyId, Nullable<int> vendorId, Nullable<int> propertyId, Nullable<int> workTypeId, Nullable<int> frequencyTypeId, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var frequencyTypeIdParameter = frequencyTypeId.HasValue ?
                new ObjectParameter("FrequencyTypeId", frequencyTypeId) :
                new ObjectParameter("FrequencyTypeId", typeof(int));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorProperty_Insert", vendorPropertyId, vendorIdParameter, propertyIdParameter, workTypeIdParameter, frequencyTypeIdParameter, effectiveDateParameter, expirationDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int VendorProperty_Update(Nullable<int> vendorPropertyId, Nullable<int> vendorId, Nullable<int> propertyId, Nullable<int> workTypeId, Nullable<int> frequencyTypeId, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var frequencyTypeIdParameter = frequencyTypeId.HasValue ?
                new ObjectParameter("FrequencyTypeId", frequencyTypeId) :
                new ObjectParameter("FrequencyTypeId", typeof(int));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorProperty_Update", vendorPropertyIdParameter, vendorIdParameter, propertyIdParameter, workTypeIdParameter, frequencyTypeIdParameter, effectiveDateParameter, expirationDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int VendorPropertyRoute_Delete(Nullable<int> vendorPropertyRouteId)
        {
            var vendorPropertyRouteIdParameter = vendorPropertyRouteId.HasValue ?
                new ObjectParameter("VendorPropertyRouteId", vendorPropertyRouteId) :
                new ObjectParameter("VendorPropertyRouteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorPropertyRoute_Delete", vendorPropertyRouteIdParameter);
        }
    
        public virtual ObjectResult<VendorPropertyRoute_Find_Result> VendorPropertyRoute_Find(Nullable<bool> searchUsinGOR, Nullable<int> vendorPropertyRouteId, Nullable<int> vendorPropertyId, Nullable<int> vendorRouteId, Nullable<int> stopOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var vendorPropertyRouteIdParameter = vendorPropertyRouteId.HasValue ?
                new ObjectParameter("VendorPropertyRouteId", vendorPropertyRouteId) :
                new ObjectParameter("VendorPropertyRouteId", typeof(int));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            var stopOrderParameter = stopOrder.HasValue ?
                new ObjectParameter("StopOrder", stopOrder) :
                new ObjectParameter("StopOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorPropertyRoute_Find_Result>("VendorPropertyRoute_Find", searchUsinGORParameter, vendorPropertyRouteIdParameter, vendorPropertyIdParameter, vendorRouteIdParameter, stopOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<VendorPropertyRoute_Get_List_Result> VendorPropertyRoute_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorPropertyRoute_Get_List_Result>("VendorPropertyRoute_Get_List");
        }
    
        public virtual ObjectResult<VendorPropertyRoute_GetByVendorPropertyId_Result> VendorPropertyRoute_GetByVendorPropertyId(Nullable<int> vendorPropertyId)
        {
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorPropertyRoute_GetByVendorPropertyId_Result>("VendorPropertyRoute_GetByVendorPropertyId", vendorPropertyIdParameter);
        }
    
        public virtual ObjectResult<VendorPropertyRoute_GetByVendorPropertyRouteId_Result> VendorPropertyRoute_GetByVendorPropertyRouteId(Nullable<int> vendorPropertyRouteId)
        {
            var vendorPropertyRouteIdParameter = vendorPropertyRouteId.HasValue ?
                new ObjectParameter("VendorPropertyRouteId", vendorPropertyRouteId) :
                new ObjectParameter("VendorPropertyRouteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorPropertyRoute_GetByVendorPropertyRouteId_Result>("VendorPropertyRoute_GetByVendorPropertyRouteId", vendorPropertyRouteIdParameter);
        }
    
        public virtual ObjectResult<VendorPropertyRoute_GetByVendorRouteId_Result> VendorPropertyRoute_GetByVendorRouteId(Nullable<int> vendorRouteId)
        {
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorPropertyRoute_GetByVendorRouteId_Result>("VendorPropertyRoute_GetByVendorRouteId", vendorRouteIdParameter);
        }
    
        public virtual int VendorPropertyRoute_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorPropertyRoute_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int VendorPropertyRoute_Insert(ObjectParameter vendorPropertyRouteId, Nullable<int> vendorPropertyId, Nullable<int> vendorRouteId, Nullable<int> stopOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            var stopOrderParameter = stopOrder.HasValue ?
                new ObjectParameter("StopOrder", stopOrder) :
                new ObjectParameter("StopOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorPropertyRoute_Insert", vendorPropertyRouteId, vendorPropertyIdParameter, vendorRouteIdParameter, stopOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int VendorPropertyRoute_Update(Nullable<int> vendorPropertyRouteId, Nullable<int> vendorPropertyId, Nullable<int> vendorRouteId, Nullable<int> stopOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var vendorPropertyRouteIdParameter = vendorPropertyRouteId.HasValue ?
                new ObjectParameter("VendorPropertyRouteId", vendorPropertyRouteId) :
                new ObjectParameter("VendorPropertyRouteId", typeof(int));
    
            var vendorPropertyIdParameter = vendorPropertyId.HasValue ?
                new ObjectParameter("VendorPropertyId", vendorPropertyId) :
                new ObjectParameter("VendorPropertyId", typeof(int));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            var stopOrderParameter = stopOrder.HasValue ?
                new ObjectParameter("StopOrder", stopOrder) :
                new ObjectParameter("StopOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorPropertyRoute_Update", vendorPropertyRouteIdParameter, vendorPropertyIdParameter, vendorRouteIdParameter, stopOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int VendorRoute_Delete(Nullable<int> vendorRouteId)
        {
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorRoute_Delete", vendorRouteIdParameter);
        }
    
        public virtual ObjectResult<VendorRoute_Find_Result> VendorRoute_Find(Nullable<bool> searchUsinGOR, Nullable<int> vendorRouteId, Nullable<int> vendorId, string routeName, Nullable<int> assignedVendorId, Nullable<int> vendorWorkerId, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, Nullable<int> territoryId)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var routeNameParameter = routeName != null ?
                new ObjectParameter("RouteName", routeName) :
                new ObjectParameter("RouteName", typeof(string));
    
            var assignedVendorIdParameter = assignedVendorId.HasValue ?
                new ObjectParameter("AssignedVendorId", assignedVendorId) :
                new ObjectParameter("AssignedVendorId", typeof(int));
    
            var vendorWorkerIdParameter = vendorWorkerId.HasValue ?
                new ObjectParameter("VendorWorkerId", vendorWorkerId) :
                new ObjectParameter("VendorWorkerId", typeof(int));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorRoute_Find_Result>("VendorRoute_Find", searchUsinGORParameter, vendorRouteIdParameter, vendorIdParameter, routeNameParameter, assignedVendorIdParameter, vendorWorkerIdParameter, effectiveDateParameter, expirationDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, territoryIdParameter);
        }
    
        public virtual ObjectResult<VendorRoute_Get_List_Result> VendorRoute_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorRoute_Get_List_Result>("VendorRoute_Get_List");
        }
    
        public virtual ObjectResult<VendorRoute_GetByAssignedVendorId_Result> VendorRoute_GetByAssignedVendorId(Nullable<int> assignedVendorId)
        {
            var assignedVendorIdParameter = assignedVendorId.HasValue ?
                new ObjectParameter("AssignedVendorId", assignedVendorId) :
                new ObjectParameter("AssignedVendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorRoute_GetByAssignedVendorId_Result>("VendorRoute_GetByAssignedVendorId", assignedVendorIdParameter);
        }
    
        public virtual ObjectResult<VendorRoute_GetByTerritoryId_Result> VendorRoute_GetByTerritoryId(Nullable<int> territoryId)
        {
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorRoute_GetByTerritoryId_Result>("VendorRoute_GetByTerritoryId", territoryIdParameter);
        }
    
        public virtual ObjectResult<VendorRoute_GetByVendorId_Result> VendorRoute_GetByVendorId(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorRoute_GetByVendorId_Result>("VendorRoute_GetByVendorId", vendorIdParameter);
        }
    
        public virtual ObjectResult<VendorRoute_GetByVendorIdRouteName_Result> VendorRoute_GetByVendorIdRouteName(Nullable<int> vendorId, string routeName)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var routeNameParameter = routeName != null ?
                new ObjectParameter("RouteName", routeName) :
                new ObjectParameter("RouteName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorRoute_GetByVendorIdRouteName_Result>("VendorRoute_GetByVendorIdRouteName", vendorIdParameter, routeNameParameter);
        }
    
        public virtual ObjectResult<VendorRoute_GetByVendorRouteId_Result> VendorRoute_GetByVendorRouteId(Nullable<int> vendorRouteId)
        {
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorRoute_GetByVendorRouteId_Result>("VendorRoute_GetByVendorRouteId", vendorRouteIdParameter);
        }
    
        public virtual ObjectResult<VendorRoute_GetByVendorWorkerId_Result> VendorRoute_GetByVendorWorkerId(Nullable<int> vendorWorkerId)
        {
            var vendorWorkerIdParameter = vendorWorkerId.HasValue ?
                new ObjectParameter("VendorWorkerId", vendorWorkerId) :
                new ObjectParameter("VendorWorkerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorRoute_GetByVendorWorkerId_Result>("VendorRoute_GetByVendorWorkerId", vendorWorkerIdParameter);
        }
    
        public virtual int VendorRoute_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorRoute_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int VendorRoute_Insert(ObjectParameter vendorRouteId, Nullable<int> vendorId, string routeName, Nullable<int> assignedVendorId, Nullable<int> vendorWorkerId, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, Nullable<int> territoryId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var routeNameParameter = routeName != null ?
                new ObjectParameter("RouteName", routeName) :
                new ObjectParameter("RouteName", typeof(string));
    
            var assignedVendorIdParameter = assignedVendorId.HasValue ?
                new ObjectParameter("AssignedVendorId", assignedVendorId) :
                new ObjectParameter("AssignedVendorId", typeof(int));
    
            var vendorWorkerIdParameter = vendorWorkerId.HasValue ?
                new ObjectParameter("VendorWorkerId", vendorWorkerId) :
                new ObjectParameter("VendorWorkerId", typeof(int));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorRoute_Insert", vendorRouteId, vendorIdParameter, routeNameParameter, assignedVendorIdParameter, vendorWorkerIdParameter, effectiveDateParameter, expirationDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, territoryIdParameter);
        }
    
        public virtual int VendorRoute_Update(Nullable<int> vendorRouteId, Nullable<int> vendorId, string routeName, Nullable<int> assignedVendorId, Nullable<int> vendorWorkerId, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, Nullable<int> territoryId)
        {
            var vendorRouteIdParameter = vendorRouteId.HasValue ?
                new ObjectParameter("VendorRouteId", vendorRouteId) :
                new ObjectParameter("VendorRouteId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var routeNameParameter = routeName != null ?
                new ObjectParameter("RouteName", routeName) :
                new ObjectParameter("RouteName", typeof(string));
    
            var assignedVendorIdParameter = assignedVendorId.HasValue ?
                new ObjectParameter("AssignedVendorId", assignedVendorId) :
                new ObjectParameter("AssignedVendorId", typeof(int));
    
            var vendorWorkerIdParameter = vendorWorkerId.HasValue ?
                new ObjectParameter("VendorWorkerId", vendorWorkerId) :
                new ObjectParameter("VendorWorkerId", typeof(int));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorRoute_Update", vendorRouteIdParameter, vendorIdParameter, routeNameParameter, assignedVendorIdParameter, vendorWorkerIdParameter, effectiveDateParameter, expirationDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, territoryIdParameter);
        }
    
        public virtual int VendorStatus_Delete(string vendorStatusId)
        {
            var vendorStatusIdParameter = vendorStatusId != null ?
                new ObjectParameter("VendorStatusId", vendorStatusId) :
                new ObjectParameter("VendorStatusId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorStatus_Delete", vendorStatusIdParameter);
        }
    
        public virtual ObjectResult<VendorStatus_Find_Result> VendorStatus_Find(Nullable<bool> searchUsinGOR, string vendorStatusId, string name)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var vendorStatusIdParameter = vendorStatusId != null ?
                new ObjectParameter("VendorStatusId", vendorStatusId) :
                new ObjectParameter("VendorStatusId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorStatus_Find_Result>("VendorStatus_Find", searchUsinGORParameter, vendorStatusIdParameter, nameParameter);
        }
    
        public virtual ObjectResult<VendorStatus_Get_List_Result> VendorStatus_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorStatus_Get_List_Result>("VendorStatus_Get_List");
        }
    
        public virtual ObjectResult<VendorStatus_GetByName_Result> VendorStatus_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorStatus_GetByName_Result>("VendorStatus_GetByName", nameParameter);
        }
    
        public virtual ObjectResult<VendorStatus_GetByVendorStatusId_Result> VendorStatus_GetByVendorStatusId(string vendorStatusId)
        {
            var vendorStatusIdParameter = vendorStatusId != null ?
                new ObjectParameter("VendorStatusId", vendorStatusId) :
                new ObjectParameter("VendorStatusId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorStatus_GetByVendorStatusId_Result>("VendorStatus_GetByVendorStatusId", vendorStatusIdParameter);
        }
    
        public virtual int VendorStatus_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorStatus_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int VendorStatus_Insert(string vendorStatusId, string name)
        {
            var vendorStatusIdParameter = vendorStatusId != null ?
                new ObjectParameter("VendorStatusId", vendorStatusId) :
                new ObjectParameter("VendorStatusId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorStatus_Insert", vendorStatusIdParameter, nameParameter);
        }
    
        public virtual int VendorStatus_Update(string vendorStatusId, string originalVendorStatusId, string name)
        {
            var vendorStatusIdParameter = vendorStatusId != null ?
                new ObjectParameter("VendorStatusId", vendorStatusId) :
                new ObjectParameter("VendorStatusId", typeof(string));
    
            var originalVendorStatusIdParameter = originalVendorStatusId != null ?
                new ObjectParameter("OriginalVendorStatusId", originalVendorStatusId) :
                new ObjectParameter("OriginalVendorStatusId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorStatus_Update", vendorStatusIdParameter, originalVendorStatusIdParameter, nameParameter);
        }
    
        public virtual int VendorTerritory_Delete(Nullable<int> vendorTerritoryId)
        {
            var vendorTerritoryIdParameter = vendorTerritoryId.HasValue ?
                new ObjectParameter("VendorTerritoryId", vendorTerritoryId) :
                new ObjectParameter("VendorTerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorTerritory_Delete", vendorTerritoryIdParameter);
        }
    
        public virtual int VendorTerritory_Find(Nullable<bool> searchUsinGOR, Nullable<int> vendorTerritoryId, Nullable<int> vendorId, Nullable<int> territoryId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var vendorTerritoryIdParameter = vendorTerritoryId.HasValue ?
                new ObjectParameter("VendorTerritoryId", vendorTerritoryId) :
                new ObjectParameter("VendorTerritoryId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorTerritory_Find", searchUsinGORParameter, vendorTerritoryIdParameter, vendorIdParameter, territoryIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int VendorTerritory_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorTerritory_Get_List");
        }
    
        public virtual int VendorTerritory_GetByTerritoryId(Nullable<int> territoryId)
        {
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorTerritory_GetByTerritoryId", territoryIdParameter);
        }
    
        public virtual int VendorTerritory_GetByVendorId(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorTerritory_GetByVendorId", vendorIdParameter);
        }
    
        public virtual int VendorTerritory_GetByVendorIdTerritoryId(Nullable<int> vendorId, Nullable<int> territoryId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorTerritory_GetByVendorIdTerritoryId", vendorIdParameter, territoryIdParameter);
        }
    
        public virtual int VendorTerritory_GetByVendorTerritoryId(Nullable<int> vendorTerritoryId)
        {
            var vendorTerritoryIdParameter = vendorTerritoryId.HasValue ?
                new ObjectParameter("VendorTerritoryId", vendorTerritoryId) :
                new ObjectParameter("VendorTerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorTerritory_GetByVendorTerritoryId", vendorTerritoryIdParameter);
        }
    
        public virtual int VendorTerritory_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorTerritory_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int VendorTerritory_Insert(ObjectParameter vendorTerritoryId, Nullable<int> vendorId, Nullable<int> territoryId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorTerritory_Insert", vendorTerritoryId, vendorIdParameter, territoryIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int VendorTerritory_Update(Nullable<int> vendorTerritoryId, Nullable<int> vendorId, Nullable<int> territoryId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var vendorTerritoryIdParameter = vendorTerritoryId.HasValue ?
                new ObjectParameter("VendorTerritoryId", vendorTerritoryId) :
                new ObjectParameter("VendorTerritoryId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorTerritory_Update", vendorTerritoryIdParameter, vendorIdParameter, territoryIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int VendorWorker_Delete(Nullable<int> vendorWorkerId)
        {
            var vendorWorkerIdParameter = vendorWorkerId.HasValue ?
                new ObjectParameter("VendorWorkerId", vendorWorkerId) :
                new ObjectParameter("VendorWorkerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorWorker_Delete", vendorWorkerIdParameter);
        }
    
        public virtual ObjectResult<VendorWorker_Find_Result> VendorWorker_Find(Nullable<bool> searchUsinGOR, Nullable<int> vendorWorkerId, Nullable<int> vendorId, string firstName, string middleName, string lastName, Nullable<bool> isActive, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var vendorWorkerIdParameter = vendorWorkerId.HasValue ?
                new ObjectParameter("VendorWorkerId", vendorWorkerId) :
                new ObjectParameter("VendorWorkerId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorWorker_Find_Result>("VendorWorker_Find", searchUsinGORParameter, vendorWorkerIdParameter, vendorIdParameter, firstNameParameter, middleNameParameter, lastNameParameter, isActiveParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<VendorWorker_Get_List_Result> VendorWorker_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorWorker_Get_List_Result>("VendorWorker_Get_List");
        }
    
        public virtual ObjectResult<VendorWorker_GetByVendorId_Result> VendorWorker_GetByVendorId(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorWorker_GetByVendorId_Result>("VendorWorker_GetByVendorId", vendorIdParameter);
        }
    
        public virtual ObjectResult<VendorWorker_GetByVendorWorkerId_Result> VendorWorker_GetByVendorWorkerId(Nullable<int> vendorWorkerId)
        {
            var vendorWorkerIdParameter = vendorWorkerId.HasValue ?
                new ObjectParameter("VendorWorkerId", vendorWorkerId) :
                new ObjectParameter("VendorWorkerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorWorker_GetByVendorWorkerId_Result>("VendorWorker_GetByVendorWorkerId", vendorWorkerIdParameter);
        }
    
        public virtual int VendorWorker_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorWorker_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int VendorWorker_Insert(ObjectParameter vendorWorkerId, Nullable<int> vendorId, string firstName, string middleName, string lastName, Nullable<bool> isActive, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorWorker_Insert", vendorWorkerId, vendorIdParameter, firstNameParameter, middleNameParameter, lastNameParameter, isActiveParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int VendorWorker_Update(Nullable<int> vendorWorkerId, Nullable<int> vendorId, string firstName, string middleName, string lastName, Nullable<bool> isActive, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var vendorWorkerIdParameter = vendorWorkerId.HasValue ?
                new ObjectParameter("VendorWorkerId", vendorWorkerId) :
                new ObjectParameter("VendorWorkerId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorWorker_Update", vendorWorkerIdParameter, vendorIdParameter, firstNameParameter, middleNameParameter, lastNameParameter, isActiveParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int VendorWorkType_Delete(Nullable<int> vendorWorkTypeId)
        {
            var vendorWorkTypeIdParameter = vendorWorkTypeId.HasValue ?
                new ObjectParameter("VendorWorkTypeId", vendorWorkTypeId) :
                new ObjectParameter("VendorWorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorWorkType_Delete", vendorWorkTypeIdParameter);
        }
    
        public virtual ObjectResult<VendorWorkType_Find_Result> VendorWorkType_Find(Nullable<bool> searchUsinGOR, Nullable<int> vendorWorkTypeId, Nullable<int> vendorId, Nullable<int> workTypeId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var vendorWorkTypeIdParameter = vendorWorkTypeId.HasValue ?
                new ObjectParameter("VendorWorkTypeId", vendorWorkTypeId) :
                new ObjectParameter("VendorWorkTypeId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorWorkType_Find_Result>("VendorWorkType_Find", searchUsinGORParameter, vendorWorkTypeIdParameter, vendorIdParameter, workTypeIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<VendorWorkType_Get_List_Result> VendorWorkType_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorWorkType_Get_List_Result>("VendorWorkType_Get_List");
        }
    
        public virtual ObjectResult<VendorWorkType_GetByVendorId_Result> VendorWorkType_GetByVendorId(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorWorkType_GetByVendorId_Result>("VendorWorkType_GetByVendorId", vendorIdParameter);
        }
    
        public virtual ObjectResult<VendorWorkType_GetByVendorIdWorkTypeId_Result> VendorWorkType_GetByVendorIdWorkTypeId(Nullable<int> vendorId, Nullable<int> workTypeId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorWorkType_GetByVendorIdWorkTypeId_Result>("VendorWorkType_GetByVendorIdWorkTypeId", vendorIdParameter, workTypeIdParameter);
        }
    
        public virtual ObjectResult<VendorWorkType_GetByVendorWorkTypeId_Result> VendorWorkType_GetByVendorWorkTypeId(Nullable<int> vendorWorkTypeId)
        {
            var vendorWorkTypeIdParameter = vendorWorkTypeId.HasValue ?
                new ObjectParameter("VendorWorkTypeId", vendorWorkTypeId) :
                new ObjectParameter("VendorWorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorWorkType_GetByVendorWorkTypeId_Result>("VendorWorkType_GetByVendorWorkTypeId", vendorWorkTypeIdParameter);
        }
    
        public virtual ObjectResult<VendorWorkType_GetByWorkTypeId_Result> VendorWorkType_GetByWorkTypeId(Nullable<int> workTypeId)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorWorkType_GetByWorkTypeId_Result>("VendorWorkType_GetByWorkTypeId", workTypeIdParameter);
        }
    
        public virtual int VendorWorkType_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorWorkType_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int VendorWorkType_Insert(ObjectParameter vendorWorkTypeId, Nullable<int> vendorId, Nullable<int> workTypeId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorWorkType_Insert", vendorWorkTypeId, vendorIdParameter, workTypeIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int VendorWorkType_Update(Nullable<int> vendorWorkTypeId, Nullable<int> vendorId, Nullable<int> workTypeId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var vendorWorkTypeIdParameter = vendorWorkTypeId.HasValue ?
                new ObjectParameter("VendorWorkTypeId", vendorWorkTypeId) :
                new ObjectParameter("VendorWorkTypeId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorWorkType_Update", vendorWorkTypeIdParameter, vendorIdParameter, workTypeIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int WeatherEvent_Delete(Nullable<int> weatherEventId)
        {
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WeatherEvent_Delete", weatherEventIdParameter);
        }
    
        public virtual ObjectResult<WeatherEvent_Find_Result> WeatherEvent_Find(Nullable<bool> searchUsinGOR, Nullable<int> weatherEventId, Nullable<int> seasonId, Nullable<int> vendorId, string name, Nullable<int> temperature, Nullable<int> accumulationTypeId, Nullable<int> windTypeId, Nullable<bool> isDrifting, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, Nullable<int> territoryId)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("SeasonId", seasonId) :
                new ObjectParameter("SeasonId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var temperatureParameter = temperature.HasValue ?
                new ObjectParameter("Temperature", temperature) :
                new ObjectParameter("Temperature", typeof(int));
    
            var accumulationTypeIdParameter = accumulationTypeId.HasValue ?
                new ObjectParameter("AccumulationTypeId", accumulationTypeId) :
                new ObjectParameter("AccumulationTypeId", typeof(int));
    
            var windTypeIdParameter = windTypeId.HasValue ?
                new ObjectParameter("WindTypeId", windTypeId) :
                new ObjectParameter("WindTypeId", typeof(int));
    
            var isDriftingParameter = isDrifting.HasValue ?
                new ObjectParameter("IsDrifting", isDrifting) :
                new ObjectParameter("IsDrifting", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WeatherEvent_Find_Result>("WeatherEvent_Find", searchUsinGORParameter, weatherEventIdParameter, seasonIdParameter, vendorIdParameter, nameParameter, temperatureParameter, accumulationTypeIdParameter, windTypeIdParameter, isDriftingParameter, startDateParameter, endDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, territoryIdParameter);
        }
    
        public virtual ObjectResult<WeatherEvent_Get_List_Result> WeatherEvent_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WeatherEvent_Get_List_Result>("WeatherEvent_Get_List");
        }
    
        public virtual ObjectResult<WeatherEvent_GetByAccumulationTypeId_Result> WeatherEvent_GetByAccumulationTypeId(Nullable<int> accumulationTypeId)
        {
            var accumulationTypeIdParameter = accumulationTypeId.HasValue ?
                new ObjectParameter("AccumulationTypeId", accumulationTypeId) :
                new ObjectParameter("AccumulationTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WeatherEvent_GetByAccumulationTypeId_Result>("WeatherEvent_GetByAccumulationTypeId", accumulationTypeIdParameter);
        }
    
        public virtual ObjectResult<WeatherEvent_GetBySeasonId_Result> WeatherEvent_GetBySeasonId(Nullable<int> seasonId)
        {
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("SeasonId", seasonId) :
                new ObjectParameter("SeasonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WeatherEvent_GetBySeasonId_Result>("WeatherEvent_GetBySeasonId", seasonIdParameter);
        }
    
        public virtual ObjectResult<WeatherEvent_GetByTerritoryId_Result> WeatherEvent_GetByTerritoryId(Nullable<int> territoryId)
        {
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WeatherEvent_GetByTerritoryId_Result>("WeatherEvent_GetByTerritoryId", territoryIdParameter);
        }
    
        public virtual ObjectResult<WeatherEvent_GetByVendorId_Result> WeatherEvent_GetByVendorId(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WeatherEvent_GetByVendorId_Result>("WeatherEvent_GetByVendorId", vendorIdParameter);
        }
    
        public virtual ObjectResult<WeatherEvent_GetByWeatherEventId_Result> WeatherEvent_GetByWeatherEventId(Nullable<int> weatherEventId)
        {
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WeatherEvent_GetByWeatherEventId_Result>("WeatherEvent_GetByWeatherEventId", weatherEventIdParameter);
        }
    
        public virtual ObjectResult<WeatherEvent_GetByWindTypeId_Result> WeatherEvent_GetByWindTypeId(Nullable<int> windTypeId)
        {
            var windTypeIdParameter = windTypeId.HasValue ?
                new ObjectParameter("WindTypeId", windTypeId) :
                new ObjectParameter("WindTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WeatherEvent_GetByWindTypeId_Result>("WeatherEvent_GetByWindTypeId", windTypeIdParameter);
        }
    
        public virtual int WeatherEvent_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WeatherEvent_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int WeatherEvent_Insert(ObjectParameter weatherEventId, Nullable<int> seasonId, Nullable<int> vendorId, string name, Nullable<int> temperature, Nullable<int> accumulationTypeId, Nullable<int> windTypeId, Nullable<bool> isDrifting, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, Nullable<int> territoryId)
        {
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("SeasonId", seasonId) :
                new ObjectParameter("SeasonId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var temperatureParameter = temperature.HasValue ?
                new ObjectParameter("Temperature", temperature) :
                new ObjectParameter("Temperature", typeof(int));
    
            var accumulationTypeIdParameter = accumulationTypeId.HasValue ?
                new ObjectParameter("AccumulationTypeId", accumulationTypeId) :
                new ObjectParameter("AccumulationTypeId", typeof(int));
    
            var windTypeIdParameter = windTypeId.HasValue ?
                new ObjectParameter("WindTypeId", windTypeId) :
                new ObjectParameter("WindTypeId", typeof(int));
    
            var isDriftingParameter = isDrifting.HasValue ?
                new ObjectParameter("IsDrifting", isDrifting) :
                new ObjectParameter("IsDrifting", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WeatherEvent_Insert", weatherEventId, seasonIdParameter, vendorIdParameter, nameParameter, temperatureParameter, accumulationTypeIdParameter, windTypeIdParameter, isDriftingParameter, startDateParameter, endDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, territoryIdParameter);
        }
    
        public virtual int WeatherEvent_Update(Nullable<int> weatherEventId, Nullable<int> seasonId, Nullable<int> vendorId, string name, Nullable<int> temperature, Nullable<int> accumulationTypeId, Nullable<int> windTypeId, Nullable<bool> isDrifting, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn, Nullable<int> territoryId)
        {
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("SeasonId", seasonId) :
                new ObjectParameter("SeasonId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var temperatureParameter = temperature.HasValue ?
                new ObjectParameter("Temperature", temperature) :
                new ObjectParameter("Temperature", typeof(int));
    
            var accumulationTypeIdParameter = accumulationTypeId.HasValue ?
                new ObjectParameter("AccumulationTypeId", accumulationTypeId) :
                new ObjectParameter("AccumulationTypeId", typeof(int));
    
            var windTypeIdParameter = windTypeId.HasValue ?
                new ObjectParameter("WindTypeId", windTypeId) :
                new ObjectParameter("WindTypeId", typeof(int));
    
            var isDriftingParameter = isDrifting.HasValue ?
                new ObjectParameter("IsDrifting", isDrifting) :
                new ObjectParameter("IsDrifting", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var territoryIdParameter = territoryId.HasValue ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WeatherEvent_Update", weatherEventIdParameter, seasonIdParameter, vendorIdParameter, nameParameter, temperatureParameter, accumulationTypeIdParameter, windTypeIdParameter, isDriftingParameter, startDateParameter, endDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter, territoryIdParameter);
        }
    
        public virtual int WeatherEventPrecipitation_Delete(Nullable<int> weatherEventPrecipitationId)
        {
            var weatherEventPrecipitationIdParameter = weatherEventPrecipitationId.HasValue ?
                new ObjectParameter("WeatherEventPrecipitationId", weatherEventPrecipitationId) :
                new ObjectParameter("WeatherEventPrecipitationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WeatherEventPrecipitation_Delete", weatherEventPrecipitationIdParameter);
        }
    
        public virtual ObjectResult<WeatherEventPrecipitation_Find_Result> WeatherEventPrecipitation_Find(Nullable<bool> searchUsinGOR, Nullable<int> weatherEventPrecipitationId, Nullable<int> weatherEventId, Nullable<int> precipitationTypeId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var weatherEventPrecipitationIdParameter = weatherEventPrecipitationId.HasValue ?
                new ObjectParameter("WeatherEventPrecipitationId", weatherEventPrecipitationId) :
                new ObjectParameter("WeatherEventPrecipitationId", typeof(int));
    
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            var precipitationTypeIdParameter = precipitationTypeId.HasValue ?
                new ObjectParameter("PrecipitationTypeId", precipitationTypeId) :
                new ObjectParameter("PrecipitationTypeId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WeatherEventPrecipitation_Find_Result>("WeatherEventPrecipitation_Find", searchUsinGORParameter, weatherEventPrecipitationIdParameter, weatherEventIdParameter, precipitationTypeIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<WeatherEventPrecipitation_Get_List_Result> WeatherEventPrecipitation_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WeatherEventPrecipitation_Get_List_Result>("WeatherEventPrecipitation_Get_List");
        }
    
        public virtual ObjectResult<WeatherEventPrecipitation_GetByPrecipitationTypeId_Result> WeatherEventPrecipitation_GetByPrecipitationTypeId(Nullable<int> precipitationTypeId)
        {
            var precipitationTypeIdParameter = precipitationTypeId.HasValue ?
                new ObjectParameter("PrecipitationTypeId", precipitationTypeId) :
                new ObjectParameter("PrecipitationTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WeatherEventPrecipitation_GetByPrecipitationTypeId_Result>("WeatherEventPrecipitation_GetByPrecipitationTypeId", precipitationTypeIdParameter);
        }
    
        public virtual ObjectResult<WeatherEventPrecipitation_GetByWeatherEventId_Result> WeatherEventPrecipitation_GetByWeatherEventId(Nullable<int> weatherEventId)
        {
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WeatherEventPrecipitation_GetByWeatherEventId_Result>("WeatherEventPrecipitation_GetByWeatherEventId", weatherEventIdParameter);
        }
    
        public virtual ObjectResult<WeatherEventPrecipitation_GetByWeatherEventPrecipitationId_Result> WeatherEventPrecipitation_GetByWeatherEventPrecipitationId(Nullable<int> weatherEventPrecipitationId)
        {
            var weatherEventPrecipitationIdParameter = weatherEventPrecipitationId.HasValue ?
                new ObjectParameter("WeatherEventPrecipitationId", weatherEventPrecipitationId) :
                new ObjectParameter("WeatherEventPrecipitationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WeatherEventPrecipitation_GetByWeatherEventPrecipitationId_Result>("WeatherEventPrecipitation_GetByWeatherEventPrecipitationId", weatherEventPrecipitationIdParameter);
        }
    
        public virtual int WeatherEventPrecipitation_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WeatherEventPrecipitation_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int WeatherEventPrecipitation_Insert(ObjectParameter weatherEventPrecipitationId, Nullable<int> weatherEventId, Nullable<int> precipitationTypeId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            var precipitationTypeIdParameter = precipitationTypeId.HasValue ?
                new ObjectParameter("PrecipitationTypeId", precipitationTypeId) :
                new ObjectParameter("PrecipitationTypeId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WeatherEventPrecipitation_Insert", weatherEventPrecipitationId, weatherEventIdParameter, precipitationTypeIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int WeatherEventPrecipitation_Update(Nullable<int> weatherEventPrecipitationId, Nullable<int> weatherEventId, Nullable<int> precipitationTypeId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var weatherEventPrecipitationIdParameter = weatherEventPrecipitationId.HasValue ?
                new ObjectParameter("WeatherEventPrecipitationId", weatherEventPrecipitationId) :
                new ObjectParameter("WeatherEventPrecipitationId", typeof(int));
    
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            var precipitationTypeIdParameter = precipitationTypeId.HasValue ?
                new ObjectParameter("PrecipitationTypeId", precipitationTypeId) :
                new ObjectParameter("PrecipitationTypeId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WeatherEventPrecipitation_Update", weatherEventPrecipitationIdParameter, weatherEventIdParameter, precipitationTypeIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int WeatherEventSurface_Delete(Nullable<int> weatherEventSurfaceId)
        {
            var weatherEventSurfaceIdParameter = weatherEventSurfaceId.HasValue ?
                new ObjectParameter("WeatherEventSurfaceId", weatherEventSurfaceId) :
                new ObjectParameter("WeatherEventSurfaceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WeatherEventSurface_Delete", weatherEventSurfaceIdParameter);
        }
    
        public virtual ObjectResult<WeatherEventSurface_Find_Result> WeatherEventSurface_Find(Nullable<bool> searchUsinGOR, Nullable<int> weatherEventSurfaceId, Nullable<int> weatherEventId, Nullable<int> surfaceTypeId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var weatherEventSurfaceIdParameter = weatherEventSurfaceId.HasValue ?
                new ObjectParameter("WeatherEventSurfaceId", weatherEventSurfaceId) :
                new ObjectParameter("WeatherEventSurfaceId", typeof(int));
    
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            var surfaceTypeIdParameter = surfaceTypeId.HasValue ?
                new ObjectParameter("SurfaceTypeId", surfaceTypeId) :
                new ObjectParameter("SurfaceTypeId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WeatherEventSurface_Find_Result>("WeatherEventSurface_Find", searchUsinGORParameter, weatherEventSurfaceIdParameter, weatherEventIdParameter, surfaceTypeIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<WeatherEventSurface_Get_List_Result> WeatherEventSurface_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WeatherEventSurface_Get_List_Result>("WeatherEventSurface_Get_List");
        }
    
        public virtual ObjectResult<WeatherEventSurface_GetBySurfaceTypeId_Result> WeatherEventSurface_GetBySurfaceTypeId(Nullable<int> surfaceTypeId)
        {
            var surfaceTypeIdParameter = surfaceTypeId.HasValue ?
                new ObjectParameter("SurfaceTypeId", surfaceTypeId) :
                new ObjectParameter("SurfaceTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WeatherEventSurface_GetBySurfaceTypeId_Result>("WeatherEventSurface_GetBySurfaceTypeId", surfaceTypeIdParameter);
        }
    
        public virtual ObjectResult<WeatherEventSurface_GetByWeatherEventId_Result> WeatherEventSurface_GetByWeatherEventId(Nullable<int> weatherEventId)
        {
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WeatherEventSurface_GetByWeatherEventId_Result>("WeatherEventSurface_GetByWeatherEventId", weatherEventIdParameter);
        }
    
        public virtual ObjectResult<WeatherEventSurface_GetByWeatherEventSurfaceId_Result> WeatherEventSurface_GetByWeatherEventSurfaceId(Nullable<int> weatherEventSurfaceId)
        {
            var weatherEventSurfaceIdParameter = weatherEventSurfaceId.HasValue ?
                new ObjectParameter("WeatherEventSurfaceId", weatherEventSurfaceId) :
                new ObjectParameter("WeatherEventSurfaceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WeatherEventSurface_GetByWeatherEventSurfaceId_Result>("WeatherEventSurface_GetByWeatherEventSurfaceId", weatherEventSurfaceIdParameter);
        }
    
        public virtual int WeatherEventSurface_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WeatherEventSurface_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int WeatherEventSurface_Insert(ObjectParameter weatherEventSurfaceId, Nullable<int> weatherEventId, Nullable<int> surfaceTypeId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            var surfaceTypeIdParameter = surfaceTypeId.HasValue ?
                new ObjectParameter("SurfaceTypeId", surfaceTypeId) :
                new ObjectParameter("SurfaceTypeId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WeatherEventSurface_Insert", weatherEventSurfaceId, weatherEventIdParameter, surfaceTypeIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int WeatherEventSurface_Update(Nullable<int> weatherEventSurfaceId, Nullable<int> weatherEventId, Nullable<int> surfaceTypeId, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var weatherEventSurfaceIdParameter = weatherEventSurfaceId.HasValue ?
                new ObjectParameter("WeatherEventSurfaceId", weatherEventSurfaceId) :
                new ObjectParameter("WeatherEventSurfaceId", typeof(int));
    
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            var surfaceTypeIdParameter = surfaceTypeId.HasValue ?
                new ObjectParameter("SurfaceTypeId", surfaceTypeId) :
                new ObjectParameter("SurfaceTypeId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WeatherEventSurface_Update", weatherEventSurfaceIdParameter, weatherEventIdParameter, surfaceTypeIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int WindType_Delete(Nullable<int> windTypeId)
        {
            var windTypeIdParameter = windTypeId.HasValue ?
                new ObjectParameter("WindTypeId", windTypeId) :
                new ObjectParameter("WindTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WindType_Delete", windTypeIdParameter);
        }
    
        public virtual ObjectResult<WindType_Find_Result> WindType_Find(Nullable<bool> searchUsinGOR, Nullable<int> windTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var windTypeIdParameter = windTypeId.HasValue ?
                new ObjectParameter("WindTypeId", windTypeId) :
                new ObjectParameter("WindTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WindType_Find_Result>("WindType_Find", searchUsinGORParameter, windTypeIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<WindType_Get_List_Result> WindType_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WindType_Get_List_Result>("WindType_Get_List");
        }
    
        public virtual ObjectResult<WindType_GetByName_Result> WindType_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WindType_GetByName_Result>("WindType_GetByName", nameParameter);
        }
    
        public virtual ObjectResult<WindType_GetByWindTypeId_Result> WindType_GetByWindTypeId(Nullable<int> windTypeId)
        {
            var windTypeIdParameter = windTypeId.HasValue ?
                new ObjectParameter("WindTypeId", windTypeId) :
                new ObjectParameter("WindTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WindType_GetByWindTypeId_Result>("WindType_GetByWindTypeId", windTypeIdParameter);
        }
    
        public virtual int WindType_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WindType_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int WindType_Insert(ObjectParameter windTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WindType_Insert", windTypeId, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int WindType_Update(Nullable<int> windTypeId, string name, string description, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var windTypeIdParameter = windTypeId.HasValue ?
                new ObjectParameter("WindTypeId", windTypeId) :
                new ObjectParameter("WindTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WindType_Update", windTypeIdParameter, nameParameter, descriptionParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int WorkEvent_Delete(Nullable<long> workEventId)
        {
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkEvent_Delete", workEventIdParameter);
        }
    
        public virtual ObjectResult<WorkEvent_Find_Result> WorkEvent_Find(Nullable<bool> searchUsinGOR, Nullable<long> workEventId, Nullable<int> vendorId, Nullable<System.DateTime> serviceDate, Nullable<int> workTypeId, Nullable<int> weatherEventId, Nullable<bool> isApproved, Nullable<System.DateTime> approvedDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var serviceDateParameter = serviceDate.HasValue ?
                new ObjectParameter("ServiceDate", serviceDate) :
                new ObjectParameter("ServiceDate", typeof(System.DateTime));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var approvedDateParameter = approvedDate.HasValue ?
                new ObjectParameter("ApprovedDate", approvedDate) :
                new ObjectParameter("ApprovedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkEvent_Find_Result>("WorkEvent_Find", searchUsinGORParameter, workEventIdParameter, vendorIdParameter, serviceDateParameter, workTypeIdParameter, weatherEventIdParameter, isApprovedParameter, approvedDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<WorkEvent_Get_List_Result> WorkEvent_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkEvent_Get_List_Result>("WorkEvent_Get_List");
        }
    
        public virtual ObjectResult<WorkEvent_GetByVendorId_Result> WorkEvent_GetByVendorId(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkEvent_GetByVendorId_Result>("WorkEvent_GetByVendorId", vendorIdParameter);
        }
    
        public virtual ObjectResult<WorkEvent_GetByWeatherEventId_Result> WorkEvent_GetByWeatherEventId(Nullable<int> weatherEventId)
        {
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkEvent_GetByWeatherEventId_Result>("WorkEvent_GetByWeatherEventId", weatherEventIdParameter);
        }
    
        public virtual ObjectResult<WorkEvent_GetByWorkEventId_Result> WorkEvent_GetByWorkEventId(Nullable<long> workEventId)
        {
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkEvent_GetByWorkEventId_Result>("WorkEvent_GetByWorkEventId", workEventIdParameter);
        }
    
        public virtual ObjectResult<WorkEvent_GetByWorkTypeId_Result> WorkEvent_GetByWorkTypeId(Nullable<int> workTypeId)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkEvent_GetByWorkTypeId_Result>("WorkEvent_GetByWorkTypeId", workTypeIdParameter);
        }
    
        public virtual int WorkEvent_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkEvent_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int WorkEvent_Insert(ObjectParameter workEventId, Nullable<int> vendorId, Nullable<System.DateTime> serviceDate, Nullable<int> workTypeId, Nullable<int> weatherEventId, Nullable<bool> isApproved, Nullable<System.DateTime> approvedDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var serviceDateParameter = serviceDate.HasValue ?
                new ObjectParameter("ServiceDate", serviceDate) :
                new ObjectParameter("ServiceDate", typeof(System.DateTime));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var approvedDateParameter = approvedDate.HasValue ?
                new ObjectParameter("ApprovedDate", approvedDate) :
                new ObjectParameter("ApprovedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkEvent_Insert", workEventId, vendorIdParameter, serviceDateParameter, workTypeIdParameter, weatherEventIdParameter, isApprovedParameter, approvedDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int WorkEvent_Update(Nullable<long> workEventId, Nullable<int> vendorId, Nullable<System.DateTime> serviceDate, Nullable<int> workTypeId, Nullable<int> weatherEventId, Nullable<bool> isApproved, Nullable<System.DateTime> approvedDate, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var workEventIdParameter = workEventId.HasValue ?
                new ObjectParameter("WorkEventId", workEventId) :
                new ObjectParameter("WorkEventId", typeof(long));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var serviceDateParameter = serviceDate.HasValue ?
                new ObjectParameter("ServiceDate", serviceDate) :
                new ObjectParameter("ServiceDate", typeof(System.DateTime));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var weatherEventIdParameter = weatherEventId.HasValue ?
                new ObjectParameter("WeatherEventId", weatherEventId) :
                new ObjectParameter("WeatherEventId", typeof(int));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var approvedDateParameter = approvedDate.HasValue ?
                new ObjectParameter("ApprovedDate", approvedDate) :
                new ObjectParameter("ApprovedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkEvent_Update", workEventIdParameter, vendorIdParameter, serviceDateParameter, workTypeIdParameter, weatherEventIdParameter, isApprovedParameter, approvedDateParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int WorkType_Delete(Nullable<int> workTypeId)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkType_Delete", workTypeIdParameter);
        }
    
        public virtual ObjectResult<WorkType_Find_Result> WorkType_Find(Nullable<bool> searchUsinGOR, Nullable<int> workTypeId, string name, string description, Nullable<bool> isAssignable, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var searchUsinGORParameter = searchUsinGOR.HasValue ?
                new ObjectParameter("SearchUsinGOR", searchUsinGOR) :
                new ObjectParameter("SearchUsinGOR", typeof(bool));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isAssignableParameter = isAssignable.HasValue ?
                new ObjectParameter("IsAssignable", isAssignable) :
                new ObjectParameter("IsAssignable", typeof(bool));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkType_Find_Result>("WorkType_Find", searchUsinGORParameter, workTypeIdParameter, nameParameter, descriptionParameter, isAssignableParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual ObjectResult<WorkType_Get_List_Result> WorkType_Get_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkType_Get_List_Result>("WorkType_Get_List");
        }
    
        public virtual ObjectResult<WorkType_GetByName_Result> WorkType_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkType_GetByName_Result>("WorkType_GetByName", nameParameter);
        }
    
        public virtual ObjectResult<WorkType_GetByWorkTypeId_Result> WorkType_GetByWorkTypeId(Nullable<int> workTypeId)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkType_GetByWorkTypeId_Result>("WorkType_GetByWorkTypeId", workTypeIdParameter);
        }
    
        public virtual int WorkType_GetPaged(string whereClause, string orderBy, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkType_GetPaged", whereClauseParameter, orderByParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int WorkType_Insert(ObjectParameter workTypeId, string name, string description, Nullable<bool> isAssignable, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isAssignableParameter = isAssignable.HasValue ?
                new ObjectParameter("IsAssignable", isAssignable) :
                new ObjectParameter("IsAssignable", typeof(bool));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkType_Insert", workTypeId, nameParameter, descriptionParameter, isAssignableParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int WorkType_Update(Nullable<int> workTypeId, string name, string description, Nullable<bool> isAssignable, Nullable<int> displayOrder, string createdBy, Nullable<System.DateTime> createdOn, string updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isAssignableParameter = isAssignable.HasValue ?
                new ObjectParameter("IsAssignable", isAssignable) :
                new ObjectParameter("IsAssignable", typeof(bool));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkType_Update", workTypeIdParameter, nameParameter, descriptionParameter, isAssignableParameter, displayOrderParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    }
}
